[[1.124957,{"lines":{"0":[[" ",{}],["wes-macbook:~",{"fg":6}],["                                                                            ",{}]],"1":[["                                                                                          ",{}]],"2":[["                                                                                          ",{}]],"3":[["                                                                                          ",{}]],"4":[["                                                                                          ",{}]],"5":[["                                                                                          ",{}]],"6":[["                                                                                          ",{}]],"7":[["                                                                                          ",{}]],"8":[["                                                                                          ",{}]],"9":[["                                                                                          ",{}]],"10":[["                                                                                          ",{}]],"11":[["                                                                                          ",{}]],"12":[["                                                                                          ",{}]],"13":[["                                                                                          ",{}]],"14":[["                                                                                          ",{}]],"15":[["                                                                                          ",{}]],"16":[["                                                                                          ",{}]],"17":[["                                                                                          ",{}]],"18":[["                                                                                          ",{}]],"19":[["                                                                                          ",{}]],"20":[["                                                                                          ",{}]],"21":[["                                                                                          ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":15,"y":0,"visible":true}}],[0.783603,{"lines":{"0":[[" ",{}],["wes-macbook:~",{"fg":6}],[" m                                                                          ",{}]]},"cursor":{"x":16}}],[0.039872,{"lines":{"0":[[" ",{}],["wes-macbook:~",{"fg":6}],[" mk                                                                         ",{}]]},"cursor":{"x":17}}],[0.089116,{"lines":{"0":[[" ",{}],["wes-macbook:~",{"fg":6}],[" mkd                                                                        ",{}]]},"cursor":{"x":18}}],[0.110884,{"lines":{"0":[[" ",{}],["wes-macbook:~",{"fg":6}],[" mkdi                                                                       ",{}]]},"cursor":{"x":19}}],[0.079943,{"lines":{"0":[[" ",{}],["wes-macbook:~",{"fg":6}],[" mkdir                                                                      ",{}]]},"cursor":{"x":20}}],[0.104038,{"cursor":{"x":21}}],[0.112098,{"lines":{"0":[[" ",{}],["wes-macbook:~",{"fg":6}],[" mkdir s                                                                    ",{}]]},"cursor":{"x":22}}],[0.087954,{"lines":{"0":[[" ",{}],["wes-macbook:~",{"fg":6}],[" mkdir sc                                                                   ",{}]]},"cursor":{"x":23}}],[0.111892,{"lines":{"0":[[" ",{}],["wes-macbook:~",{"fg":6}],[" mkdir sca                                                                  ",{}]]},"cursor":{"x":24}}],[0.064125,{"lines":{"0":[[" ",{}],["wes-macbook:~",{"fg":6}],[" mkdir scal                                                                 ",{}]]},"cursor":{"x":25}}],[0.151958,{"lines":{"0":[[" ",{}],["wes-macbook:~",{"fg":6}],[" mkdir scalt                                                                ",{}]]},"cursor":{"x":26}}],[0.095904,{"lines":{"0":[[" ",{}],["wes-macbook:~",{"fg":6}],[" mkdir scalte                                                               ",{}]]},"cursor":{"x":27}}],[0.06439400000000001,{"lines":{"0":[[" ",{}],["wes-macbook:~",{"fg":6}],[" mkdir scaltes                                                              ",{}]]},"cursor":{"x":28}}],[0.079647,{"lines":{"0":[[" ",{}],["wes-macbook:~",{"fg":6}],[" mkdir scaltest                                                             ",{}]]},"cursor":{"x":29}}],[0.14413,{"cursor":{"x":0,"y":1}}],[0.09709,{"lines":{"1":[[" ",{}],["wes-macbook:~",{"fg":6}],["                                                                            ",{}]]},"cursor":{"x":15}}],[1.447077,{"lines":{"1":[[" ",{}],["wes-macbook:~",{"fg":6}],[" c                                                                          ",{}]]},"cursor":{"x":16}}],[0.079716,{"lines":{"1":[[" ",{}],["wes-macbook:~",{"fg":6}],[" cd                                                                         ",{}]]},"cursor":{"x":17}}],[0.063948,{"cursor":{"x":18}}],[0.160006,{"lines":{"1":[[" ",{}],["wes-macbook:~",{"fg":6}],[" cd s                                                                       ",{}]]},"cursor":{"x":19}}],[0.09601800000000001,{"lines":{"1":[[" ",{}],["wes-macbook:~",{"fg":6}],[" cd sc                                                                      ",{}]]},"cursor":{"x":20}}],[0.136038,{"lines":{"1":[[" ",{}],["wes-macbook:~",{"fg":6}],[" cd sca                                                                     ",{}]]},"cursor":{"x":21}}],[0.280201,{"lines":{"1":[[" ",{}],["wes-macbook:~",{"fg":6}],[" cd scal                                                                    ",{}]]},"cursor":{"x":22}}],[0.559962,{"lines":{"1":[[" ",{}],["wes-macbook:~",{"fg":6}],[" cd scalt                                                                   ",{}]]},"cursor":{"x":23}}],[0.095752,{"lines":{"1":[[" ",{}],["wes-macbook:~",{"fg":6}],[" cd scalte                                                                  ",{}]]},"cursor":{"x":24}}],[0.152137,{"lines":{"1":[[" ",{}],["wes-macbook:~",{"fg":6}],[" cd scaltes                                                                 ",{}]]},"cursor":{"x":25}}],[0.352292,{"lines":{"1":[[" ",{}],["wes-macbook:~",{"fg":6}],[" cd scaltest                                                                ",{}]]},"cursor":{"x":26}}],[0.144009,{"cursor":{"x":0,"y":2}}],[0.068039,{"lines":{"2":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],["                                                                     ",{}]]},"cursor":{"x":22}}],[1.148366,{"lines":{"2":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" v                                                                   ",{}]]},"cursor":{"x":23}}],[0.041999,{"lines":{"2":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" vi                                                                  ",{}]]},"cursor":{"x":24}}],[0.061487,{"cursor":{"x":25}}],[0.312568,{"lines":{"2":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" vi b                                                                ",{}]]},"cursor":{"x":26}}],[0.08749700000000001,{"lines":{"2":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" vi bu                                                               ",{}]]},"cursor":{"x":27}}],[0.047892,{"lines":{"2":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" vi bui                                                              ",{}]]},"cursor":{"x":28}}],[0.047803,{"lines":{"2":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" vi buil                                                             ",{}]]},"cursor":{"x":29}}],[0.16078,{"lines":{"2":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" vi build                                                            ",{}]]},"cursor":{"x":30}}],[0.063565,{"lines":{"2":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" vi build.                                                           ",{}]]},"cursor":{"x":31}}],[0.352116,{"lines":{"2":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" vi build.s                                                          ",{}]]},"cursor":{"x":32}}],[0.159719,{"lines":{"2":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" vi build.sb                                                         ",{}]]},"cursor":{"x":33}}],[0.191926,{"lines":{"2":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" vi build.sbt                                                        ",{}]]},"cursor":{"x":34}}],[0.120448,{"cursor":{"x":0,"y":3}}],[0.07935,{"lines":{"0":[["                                                                                          ",{}]],"1":[["                                                                                          ",{}]],"2":[["                                                                                          ",{}]]}}],[0.003743,{"lines":{"1":[["~                                                                                         ",{"fg":4,"bold":true}]],"2":[["~                                                                                         ",{"fg":4,"bold":true}]],"3":[["~                                                                                         ",{"fg":4,"bold":true}]],"4":[["~                                                                                         ",{"fg":4,"bold":true}]],"5":[["~                                                                                         ",{"fg":4,"bold":true}]],"6":[["~                                                                                         ",{"fg":4,"bold":true}]],"7":[["~                                                                                         ",{"fg":4,"bold":true}]],"8":[["~                                                                                         ",{"fg":4,"bold":true}]],"9":[["~                                                                                         ",{"fg":4,"bold":true}]],"10":[["~                                                                                         ",{"fg":4,"bold":true}]],"11":[["~                                                                                         ",{"fg":4,"bold":true}]],"12":[["~                                                                                         ",{"fg":4,"bold":true}]],"13":[["~                                                                                         ",{"fg":4,"bold":true}]],"14":[["~                                                                                         ",{"fg":4,"bold":true}]],"15":[["~                                                                                         ",{"fg":4,"bold":true}]],"16":[["~                                                                                         ",{"fg":4,"bold":true}]],"17":[["~                                                                                         ",{"fg":4,"bold":true}]],"18":[["~                                                                                         ",{"fg":4,"bold":true}]],"19":[["~                                                                                         ",{"fg":4,"bold":true}]],"20":[["~                                                                                         ",{"fg":4,"bold":true}]],"21":[["~/scaltest/build.sbt (unix){} [0,1][100%]                                                 ",{"bold":true,"inverse":true}]],"22":[["\"build.sbt\" [New File]                                                                    ",{}]]},"cursor":{"y":0}}],[1.212182,{"lines":{"22":[["\"build.sbt\" [New File]                                                         i          ",{}]]},"cursor":{"visible":false}}],[0.000144,{"lines":{"22":[["-- INSERT --",{"bold":true}],["                                                                              ",{}]]},"cursor":{"visible":true}}],[0.280019,{"lines":{"0":[["s                                                                                         ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,2][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":1}}],[0.103977,{"lines":{"0":[["sc                                                                                        ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,3][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":2}}],[0.103968,{"lines":{"0":[["sca                                                                                       ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,4][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":3}}],[0.095988,{"lines":{"0":[["scal                                                                                      ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,5][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":4}}],[0.09647699999999999,{"lines":{"0":[["scala                                                                                     ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,6][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":5}}],[0.391666,{"lines":{"0":[["scalaV                                                                                    ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,7][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":6}}],[0.255942,{"lines":{"0":[["scalaVe                                                                                   ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,8][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":7}}],[0.0561,{"lines":{"0":[["scalaVer                                                                                  ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,9][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":8}}],[0.08791499999999999,{"lines":{"0":[["scalaVers                                                                                 ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,10][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":9}}],[0.111924,{"lines":{"0":[["scalaVersi                                                                                ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,11][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":10}}],[0.048056,{"lines":{"0":[["scalaVersio                                                                               ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,12][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":11}}],[0.047929,{"lines":{"0":[["scalaVersion                                                                              ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,13][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":12}}],[0.192511,{"lines":{"21":[["~/scaltest/build.sbt[+] (unix){} [1,14][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":13}}],[0.215574,{"lines":{"0":[["scalaVersion :                                                                            ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,15][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":14}}],[0.231909,{"lines":{"0":[["scalaVersion :=                                                                           ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,16][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":15}}],[0.096064,{"lines":{"21":[["~/scaltest/build.sbt[+] (unix){} [1,17][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":16}}],[0.680055,{"lines":{"0":[["scalaVersion := \"                                                                         ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,18][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":17}}],[0.42431,{"lines":{"0":[["scalaVersion := \"2                                                                        ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,19][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":18}}],[0.095494,{"lines":{"0":[["scalaVersion := \"2.                                                                       ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,20][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":19}}],[0.200054,{"lines":{"0":[["scalaVersion := \"2.1                                                                      ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,21][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":20}}],[0.224048,{"lines":{"0":[["scalaVersion := \"2.10                                                                     ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,22][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":21}}],[0.248046,{"lines":{"0":[["scalaVersion := \"2.10.                                                                    ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,23][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":22}}],[0.231944,{"lines":{"0":[["scalaVersion := \"2.10.2                                                                   ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,24][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":23}}],[0.239898,{"lines":{"0":[["scalaVersion := \"2.10.2\"                                                                  ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [1,25][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":24}}],[0.305274,{"lines":{"1":[["                                                                                          ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [2,1][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":0,"y":1}}],[0.407898,{"lines":{"2":[["                                                                                          ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,1][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"y":2}}],[0.958929,{"lines":{"2":[["l                                                                                         ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,2][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":1}}],[0.056549,{"lines":{"2":[["li                                                                                        ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,3][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":2}}],[0.104611,{"lines":{"2":[["lib                                                                                       ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,4][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":3}}],[0.191696,{"lines":{"2":[["libr                                                                                      ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,5][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":4}}],[0.09568400000000001,{"lines":{"2":[["libra                                                                                     ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,6][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":5}}],[0.08937199999999999,{"lines":{"2":[["librar                                                                                    ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,7][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":6}}],[0.063094,{"lines":{"2":[["library                                                                                   ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,8][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":7}}],[0.239438,{"lines":{"2":[["libraryD                                                                                  ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,9][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":8}}],[0.183858,{"lines":{"2":[["libraryDe                                                                                 ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,10][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":9}}],[0.10349,{"lines":{"2":[["libraryDep                                                                                ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,11][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":10}}],[0.152584,{"lines":{"2":[["libraryDepd                                                                               ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,12][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":11}}],[0.575862,{"lines":{"2":[["libraryDep                                                                                ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,11][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":10}}],[0.09633799999999999,{"lines":{"2":[["libraryDepe                                                                               ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,12][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":11}}],[0.104099,{"lines":{"2":[["libraryDepen                                                                              ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,13][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":12}}],[0.127153,{"lines":{"2":[["libraryDepend                                                                             ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,14][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":13}}],[0.192579,{"lines":{"2":[["libraryDepende                                                                            ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,15][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":14}}],[0.088495,{"lines":{"2":[["libraryDependen                                                                           ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,16][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":15}}],[0.175012,{"lines":{"2":[["libraryDependenc                                                                          ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,17][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":16}}],[0.08066,{"lines":{"2":[["libraryDependenci                                                                         ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,18][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":17}}],[0.112284,{"lines":{"2":[["libraryDependencie                                                                        ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,19][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":18}}],[0.047048,{"lines":{"2":[["libraryDependencies                                                                       ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,20][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":19}}],[0.463955,{"lines":{"21":[["~/scaltest/build.sbt[+] (unix){} [3,21][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":20}}],[0.384235,{"lines":{"2":[["libraryDependencies +                                                                     ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,22][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":21}}],[0.135922,{"lines":{"2":[["libraryDependencies ++                                                                    ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,23][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":22}}],[0.271971,{"lines":{"2":[["libraryDependencies ++=                                                                   ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,24][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":23}}],[0.079968,{"lines":{"21":[["~/scaltest/build.sbt[+] (unix){} [3,25][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":24}}],[0.551883,{"lines":{"2":[["libraryDependencies ++= S                                                                 ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,26][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":25}}],[0.248036,{"lines":{"2":[["libraryDependencies ++= Se                                                                ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,27][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":26}}],[0.079897,{"lines":{"2":[["libraryDependencies ++= Seq                                                               ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,28][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":27}}],[0.312136,{"lines":{"2":[["libraryDependencies ++= Seq(                                                              ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [3,29][100%]                                             ",{"bold":true,"inverse":true}]]},"cursor":{"x":28}}],[0.5120749999999999,{"lines":{"3":[["                                                                                          ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,1][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":0,"y":3}}],[0.144028,{"lines":{"4":[["                                                                                          ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [5,1][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"y":4}}],[0.216192,{"lines":{"2":[["libraryDependencies ++= Seq",{}],["(",{"bg":4}],["                                                              ",{}]],"4":[[")",{"bg":4}],["                                                                                         ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [5,2][100%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":1}}],[0.495587,{"lines":{"2":[["libraryDependencies ++= Seq(                                                              ",{}]],"4":[[")                                                                                         ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,1][80%]                                               ",{"bold":true,"inverse":true}]]},"cursor":{"x":0,"y":3}}],[0.327942,{"lines":{"21":[["~/scaltest/build.sbt[+] (unix){} [4,2][80%]                                               ",{"bold":true,"inverse":true}]]},"cursor":{"x":1}}],[0.136071,{"lines":{"21":[["~/scaltest/build.sbt[+] (unix){} [4,3][80%]                                               ",{"bold":true,"inverse":true}]]},"cursor":{"x":2}}],[0.336307,{"lines":{"3":[["  \"                                                                                       ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,4][80%]                                               ",{"bold":true,"inverse":true}]]},"cursor":{"x":3}}],[0.439599,{"lines":{"3":[["  \"o                                                                                      ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,5][80%]                                               ",{"bold":true,"inverse":true}]]},"cursor":{"x":4}}],[0.121834,{"lines":{"3":[["  \"or                                                                                     ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,6][80%]                                               ",{"bold":true,"inverse":true}]]},"cursor":{"x":5}}],[0.166339,{"lines":{"3":[["  \"org                                                                                    ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,7][80%]                                               ",{"bold":true,"inverse":true}]]},"cursor":{"x":6}}],[0.087779,{"lines":{"3":[["  \"org.                                                                                   ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,8][80%]                                               ",{"bold":true,"inverse":true}]]},"cursor":{"x":7}}],[0.208032,{"lines":{"3":[["  \"org.n                                                                                  ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,9][80%]                                               ",{"bold":true,"inverse":true}]]},"cursor":{"x":8}}],[0.096126,{"lines":{"3":[["  \"org.ne                                                                                 ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,10][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":9}}],[0.111918,{"lines":{"3":[["  \"org.neo                                                                                ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,11][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":10}}],[0.120879,{"lines":{"3":[["  \"org.neo4                                                                               ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,12][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":11}}],[0.087174,{"lines":{"3":[["  \"org.neo4j                                                                              ",{}]],"22":[["-- INSERT --",{"bold":true}],["                                                                   j          ",{}]]}}],[0.335825,{"lines":{"3":[["  \"org.neo4                                                                               ",{}]],"22":[["-- INSERT --",{"bold":true}],["                                                                              ",{}]]},"cursor":{"visible":false}}],[0.000189,{"lines":{"3":[["  \"org.neo4j\"                                                                             ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,14][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":13,"visible":true}}],[0.296988,{"lines":{"21":[["~/scaltest/build.sbt[+] (unix){} [4,15][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":14}}],[0.278866,{"lines":{"3":[["  \"org.neo4j\" %                                                                           ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,16][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":15}}],[0.552583,{"lines":{"21":[["~/scaltest/build.sbt[+] (unix){} [4,17][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":16}}],[0.160656,{"lines":{"3":[["  \"org.neo4j\" % \"                                                                         ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,18][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":17}}],[0.455701,{"lines":{"3":[["  \"org.neo4j\" % \"n                                                                        ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,19][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":18}}],[0.079121,{"lines":{"3":[["  \"org.neo4j\" % \"ne                                                                       ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,20][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":19}}],[0.079904,{"lines":{"3":[["  \"org.neo4j\" % \"neo                                                                      ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,21][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":20}}],[0.12872,{"lines":{"3":[["  \"org.neo4j\" % \"neo4                                                                     ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,22][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":21}}],[0.095192,{"lines":{"3":[["  \"org.neo4j\" % \"neo4j                                                                    ",{}]],"22":[["-- INSERT --",{"bold":true}],["                                                                   j          ",{}]]}}],[0.232105,{"lines":{"3":[["  \"org.neo4j\" % \"neo4                                                                     ",{}]],"22":[["-- INSERT --",{"bold":true}],["                                                                              ",{}]]},"cursor":{"visible":false}}],[0.000249,{"lines":{"3":[["  \"org.neo4j\" % \"neo4j\"                                                                   ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,24][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":23,"visible":true}}],[0.08036600000000001,{"lines":{"21":[["~/scaltest/build.sbt[+] (unix){} [4,25][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":24}}],[1.016924,{"lines":{"3":[["  \"org.neo4j\" % \"neo4j\" %                                                                 ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,26][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":25}}],[0.166449,{"lines":{"21":[["~/scaltest/build.sbt[+] (unix){} [4,27][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":26}}],[0.271875,{"lines":{"3":[["  \"org.neo4j\" % \"neo4j\" % \"                                                               ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,28][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":27}}],[0.673367,{"lines":{"3":[["  \"org.neo4j\" % \"neo4j\" % \"2                                                              ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,29][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":28}}],[0.046516,{"lines":{"3":[["  \"org.neo4j\" % \"neo4j\" % \"2.                                                             ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,30][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":29}}],[0.232661,{"lines":{"3":[["  \"org.neo4j\" % \"neo4j\" % \"2.0                                                            ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,31][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":30}}],[0.239514,{"lines":{"3":[["  \"org.neo4j\" % \"neo4j\" % \"2.0.                                                           ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,32][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":31}}],[0.192613,{"lines":{"3":[["  \"org.neo4j\" % \"neo4j\" % \"2.0.0                                                          ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,33][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":32}}],[0.77537,{"lines":{"3":[["  \"org.neo4j\" % \"neo4j\" % \"2.0.0-                                                         ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,34][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":33}}],[0.320038,{"lines":{"3":[["  \"org.neo4j\" % \"neo4j\" % \"2.0.0-M                                                        ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,35][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":34}}],[0.263944,{"lines":{"3":[["  \"org.neo4j\" % \"neo4j\" % \"2.0.0-M0                                                       ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,36][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":35}}],[0.128497,{"lines":{"3":[["  \"org.neo4j\" % \"neo4j\" % \"2.0.0-M06                                                      ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,37][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":36}}],[0.375596,{"lines":{"3":[["  \"org.neo4j\" % \"neo4j\" % \"2.0.0-M06\"                                                     ",{}]],"21":[["~/scaltest/build.sbt[+] (unix){} [4,38][80%]                                              ",{"bold":true,"inverse":true}]]},"cursor":{"x":37}}],[0.569326,{"lines":{"22":[["                                                                               ^[         ",{}]]},"cursor":{"x":36}}],[0.295213,{"lines":{"22":[["                                                                                          ",{}]]},"cursor":{"x":37,"visible":false}}],[8.500000000000001e-05,{"lines":{"21":[["~/scaltest/build.sbt[+] (unix){} [4,37][80%]                                              ",{"bold":true,"inverse":true}]],"22":[[":                                                                                         ",{}]]},"cursor":{"x":1,"y":22,"visible":true}}],[0.207109,{"lines":{"22":[[":w                                                                                        ",{}]]},"cursor":{"x":2}}],[0.056016,{"lines":{"22":[[":wq                                                                                       ",{}]]},"cursor":{"x":3}}],[0.104001,{"cursor":{"x":0}}],[0.003406,{"lines":{"0":[[" ",{}],["wes-macbook:~",{"fg":6}],[" mkdir scaltest                                                             ",{}]],"1":[[" ",{}],["wes-macbook:~",{"fg":6}],[" cd scaltest                                                                ",{}]],"2":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" vi build.sbt                                                        ",{}]],"3":[["                                                                                          ",{}]],"4":[["                                                                                          ",{}]],"5":[["                                                                                          ",{}]],"6":[["                                                                                          ",{}]],"7":[["                                                                                          ",{}]],"8":[["                                                                                          ",{}]],"9":[["                                                                                          ",{}]],"10":[["                                                                                          ",{}]],"11":[["                                                                                          ",{}]],"12":[["                                                                                          ",{}]],"13":[["                                                                                          ",{}]],"14":[["                                                                                          ",{}]],"15":[["                                                                                          ",{}]],"16":[["                                                                                          ",{}]],"17":[["                                                                                          ",{}]],"18":[["                                                                                          ",{}]],"19":[["                                                                                          ",{}]],"20":[["                                                                                          ",{}]],"21":[["                                                                                          ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"y":3}}],[0.07820299999999999,{"lines":{"3":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],["                                                                     ",{}]]},"cursor":{"x":22}}],[1.142381,{"lines":{"3":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" s                                                                   ",{}]]},"cursor":{"x":23}}],[0.183963,{"lines":{"3":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" sb                                                                  ",{}]]},"cursor":{"x":24}}],[0.190894,{"lines":{"3":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" sbt                                                                 ",{}]]},"cursor":{"x":25}}],[0.041189,{"cursor":{"x":26}}],[0.18415,{"lines":{"3":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" sbt c                                                               ",{}]]},"cursor":{"x":27}}],[0.064278,{"lines":{"3":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" sbt co                                                              ",{}]]},"cursor":{"x":28}}],[0.05589,{"lines":{"3":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" sbt con                                                             ",{}]]},"cursor":{"x":29}}],[0.088542,{"lines":{"3":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" sbt cons                                                            ",{}]]},"cursor":{"x":30}}],[0.07907500000000001,{"lines":{"3":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" sbt conso                                                           ",{}]]},"cursor":{"x":31}}],[0.169184,{"lines":{"3":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" sbt consol                                                          ",{}]]},"cursor":{"x":32}}],[0.095555,{"lines":{"3":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" sbt console                                                         ",{}]]},"cursor":{"x":33}}],[0.087522,{"cursor":{"x":0,"y":4}}],[2.853562,{"lines":{"4":[["[info] Loading global plugins from /Users/wfreeman/.sbt/plugins                           ",{}]]},"cursor":{"y":5}}],[8.563812,{"lines":{"5":[["[info] Set current project to default-a0506d (in build file:/Users/wfreeman/scaltest/)    ",{}]]},"cursor":{"y":6}}],[0.296199,{"lines":{"6":[["[info] Updating {file:/Users/wfreeman/scaltest/}default-a0506d...                         ",{}]]},"cursor":{"y":7}}],[0.062395,{"lines":{"7":[["[info] Resolving org.scala-lang#scala-library;2.10.2 ...                                  ",{}]]},"cursor":{"x":56}}],[8.3e-05,{"cursor":{"x":0,"y":8}}],[0.122498,{"lines":{"7":[["                                                                                          ",{}]]},"cursor":{"y":7}}],[0.000146,{"lines":{"7":[["[info] Resolving org.neo4j#neo4j;2.0.0-M06 ...                                            ",{}]]},"cursor":{"y":8}}],[0.07849299999999999,{"lines":{"7":[["[info] Resolving org.neo4j#neo4j-kernel;2.0.0-M06 ...                                     ",{}]]}}],[0.103931,{"lines":{"7":[["[info] Resolving org.apache.geronimo.specs#geronimo-jta_1.1_spec;1.1.1 ...                ",{}]]}}],[0.050873,{"lines":{"7":[["[info] Resolving org.neo4j#neo4j-lucene-index;2.0.0-M06 ...                               ",{}]]}}],[0.053648,{"lines":{"7":[["[info] Resolving org.apache.lucene#lucene-core;3.6.2 ...                                  ",{}]]}}],[0.055669,{"lines":{"7":[["[info] Resolving org.neo4j#neo4j-graph-algo;2.0.0-M06 ...                                 ",{}]]}}],[0.05016,{"lines":{"7":[["[info] Resolving org.neo4j#neo4j-udc;2.0.0-M06 ...                                        ",{}]]}}],[0.057047,{"lines":{"7":[["[info] Resolving org.neo4j#neo4j-graph-matching;2.0.0-M06 ...                             ",{}]]}}],[0.042815,{"lines":{"7":[["[info] Resolving org.neo4j#neo4j-cypher;2.0.0-M06 ...                                     ",{}]]}}],[0.134932,{"lines":{"7":[["                                                                                          ",{}]]},"cursor":{"y":7}}],[0.001381,{"lines":{"7":[["[info] Resolving com.googlecode.concurrentlinkedhashmap#concurrentlinkedhashmap-lru;1.3.1 ",{}]],"8":[["...                                                                                       ",{}]]},"cursor":{"y":9}}],[0.050861,{"lines":{"8":[["[info] Resolving org.parboiled#parboiled-scala_2.10;1.1.6 ...                             ",{}]]}}],[0.053113,{"lines":{"8":[["[info] Resolving org.parboiled#parboiled-core;1.1.6 ...                                   ",{}]]}}],[0.047806,{"lines":{"8":[["                                                                                          ",{}]]},"cursor":{"y":8}}],[0.00223,{"lines":{"8":[["[info] Resolving org.neo4j#neo4j-jmx;2.0.0-M06 ...                                        ",{}]]},"cursor":{"y":9}}],[0.649306,{"lines":{"9":[["[info] Done updating.                                                                     ",{}]]},"cursor":{"y":10}}],[0.43641,{"lines":{"10":[["[info] Starting scala interpreter...                                                      ",{}]]},"cursor":{"y":11}}],[0.002896,{"lines":{"11":[["[info]                                                                                    ",{}]]},"cursor":{"y":12}}],[6.267848,{"lines":{"12":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"13":[["Type in expressions to have them evaluated.                                               ",{}]],"14":[["Type :help for more information.                                                          ",{}]]},"cursor":{"y":15}}],[0.000914,{"lines":{"16":[["scala>                                                                                    ",{}]]},"cursor":{"x":7,"y":16}}],[1.190744,{"lines":{"16":[["scala> i                                                                                  ",{}]]},"cursor":{"x":8}}],[0.138124,{"lines":{"16":[["scala> im                                                                                 ",{}]]},"cursor":{"x":9}}],[0.071794,{"lines":{"16":[["scala> imp                                                                                ",{}]]},"cursor":{"x":10}}],[0.048337,{"lines":{"16":[["scala> impo                                                                               ",{}]]},"cursor":{"x":11}}],[0.143666,{"lines":{"16":[["scala> impor                                                                              ",{}]]},"cursor":{"x":12}}],[0.199778,{"lines":{"16":[["scala> import                                                                             ",{}]]},"cursor":{"x":13}}],[0.088064,{"cursor":{"x":14}}],[1.283492,{"lines":{"16":[["scala> import o                                                                           ",{}]]},"cursor":{"x":15}}],[0.124583,{"lines":{"16":[["scala> import or                                                                          ",{}]]},"cursor":{"x":16}}],[0.17594,{"lines":{"16":[["scala> import org                                                                         ",{}]]},"cursor":{"x":17}}],[0.07185,{"lines":{"16":[["scala> import org.                                                                        ",{}]]},"cursor":{"x":18}}],[0.176018,{"lines":{"16":[["scala> import org.n                                                                       ",{}]]},"cursor":{"x":19}}],[0.087951,{"lines":{"16":[["scala> import org.ne                                                                      ",{}]]},"cursor":{"x":20}}],[0.072294,{"lines":{"16":[["scala> import org.neo                                                                     ",{}]]},"cursor":{"x":21}}],[0.153274,{"lines":{"16":[["scala> import org.neo4                                                                    ",{}]]},"cursor":{"x":22}}],[0.054524,{"lines":{"16":[["scala> import org.neo4j                                                                   ",{}]]},"cursor":{"x":23}}],[0.247935,{"lines":{"16":[["scala> import org.neo4j.                                                                  ",{}]]},"cursor":{"x":24}}],[1.107735,{"lines":{"16":[["scala> import org.neo4j.g                                                                 ",{}]]},"cursor":{"x":25}}],[0.14894,{"lines":{"16":[["scala> import org.neo4j.gr                                                                ",{}]]},"cursor":{"x":26}}],[0.071563,{"lines":{"16":[["scala> import org.neo4j.gra                                                               ",{}]]},"cursor":{"x":27}}],[0.032977,{"lines":{"16":[["scala> import org.neo4j.grap                                                              ",{}]]},"cursor":{"x":28}}],[0.054786,{"lines":{"16":[["scala> import org.neo4j.graph                                                             ",{}]]},"cursor":{"x":29}}],[0.199848,{"lines":{"16":[["scala> import org.neo4j.graphd                                                            ",{}]]},"cursor":{"x":30}}],[0.192166,{"lines":{"16":[["scala> import org.neo4j.graphdb                                                           ",{}]]},"cursor":{"x":31}}],[0.088723,{"lines":{"16":[["scala> import org.neo4j.graphdb.                                                          ",{}]]},"cursor":{"x":32}}],[0.532766,{"lines":{"16":[["scala> import org.neo4j.graphdb._                                                         ",{}]]},"cursor":{"x":33}}],[0.323619,{"cursor":{"x":0,"y":17}}],[0.187341,{"lines":{"17":[["import org.neo4j.graphdb._                                                                ",{}]]},"cursor":{"y":18}}],[0.000358,{"lines":{"19":[["scala>                                                                                    ",{}]]},"cursor":{"x":7,"y":19}}],[0.8803879999999999,{"lines":{"19":[["scala> import org.neo4j.graphdb._                                                         ",{}]]},"cursor":{"x":33}}],[0.068125,{"cursor":{"x":32}}],[0.7678,{"lines":{"19":[["scala> import org.neo4j.graphdb.t_                                                        ",{}]]},"cursor":{"x":33}}],[0.282801,{"lines":{"19":[["scala> import org.neo4j.graphdb.tr_                                                       ",{}]]},"cursor":{"x":34}}],[0.084229,{"lines":{"19":[["scala> import org.neo4j.graphdb.tra_                                                      ",{}]]},"cursor":{"x":35}}],[0.200574,{"lines":{"19":[["scala> import org.neo4j.graphdb.trav_                                                     ",{}]]},"cursor":{"x":36}}],[0.159913,{"lines":{"19":[["scala> import org.neo4j.graphdb.trave_                                                    ",{}]]},"cursor":{"x":37}}],[0.07999199999999999,{"lines":{"19":[["scala> import org.neo4j.graphdb.traver_                                                   ",{}]]},"cursor":{"x":38}}],[0.129106,{"lines":{"19":[["scala> import org.neo4j.graphdb.travers_                                                  ",{}]]},"cursor":{"x":39}}],[0.142387,{"lines":{"19":[["scala> import org.neo4j.graphdb.traversa_                                                 ",{}]]},"cursor":{"x":40}}],[0.112364,{"lines":{"19":[["scala> import org.neo4j.graphdb.traversal_                                                ",{}]]},"cursor":{"x":41}}],[0.26075,{"lines":{"19":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]]},"cursor":{"x":42}}],[0.227552,{"cursor":{"x":0,"y":20}}],[0.356804,{"lines":{"20":[["import org.neo4j.graphdb.traversal._                                                      ",{}]]},"cursor":{"y":21}}],[4.2e-05,{"lines":{"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7,"y":22}}],[0.456305,{"lines":{"22":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]]},"cursor":{"x":43}}],[0.067153,{"cursor":{"x":42}}],[0.431358,{"cursor":{"x":41}}],[0.353154,{"cursor":{"x":40}}],[0.0008049999999999999,{"lines":{"22":[["scala> import org.neo4j.graphdb.traversa._                                                ",{}]]}}],[0.511948,{"cursor":{"x":39}}],[0.0008669999999999999,{"lines":{"22":[["scala> import org.neo4j.graphdb.travers._                                                 ",{}]]}}],[0.068782,{"cursor":{"x":38}}],[0.000397,{"lines":{"22":[["scala> import org.neo4j.graphdb.traver._                                                  ",{}]]}}],[0.083317,{"cursor":{"x":37}}],[0.000561,{"lines":{"22":[["scala> import org.neo4j.graphdb.trave._                                                   ",{}]]}}],[0.08439000000000001,{"cursor":{"x":36}}],[0.001354,{"lines":{"22":[["scala> import org.neo4j.graphdb.trav._                                                    ",{}]]}}],[0.08218,{"cursor":{"x":35}}],[0.0007559999999999999,{"lines":{"22":[["scala> import org.neo4j.graphdb.tra._                                                     ",{}]]}}],[0.08237899999999999,{"cursor":{"x":34}}],[0.000753,{"lines":{"22":[["scala> import org.neo4j.graphdb.tr._                                                      ",{}]]}}],[0.08384800000000001,{"cursor":{"x":33}}],[0.000606,{"lines":{"22":[["scala> import org.neo4j.graphdb.t._                                                       ",{}]]}}],[0.08350399999999999,{"cursor":{"x":32}}],[0.000643,{"lines":{"22":[["scala> import org.neo4j.graphdb.._                                                        ",{}]]}}],[0.084512,{"cursor":{"x":31}}],[0.000849,{"lines":{"22":[["scala> import org.neo4j.graphdb._                                                         ",{}]]}}],[0.082722,{"cursor":{"x":30}}],[0.0005730000000000001,{"lines":{"22":[["scala> import org.neo4j.graphd._                                                          ",{}]]}}],[0.083041,{"cursor":{"x":29}}],[0.000477,{"lines":{"22":[["scala> import org.neo4j.graph._                                                           ",{}]]}}],[0.083272,{"cursor":{"x":28}}],[0.000486,{"lines":{"22":[["scala> import org.neo4j.grap._                                                            ",{}]]}}],[0.084119,{"cursor":{"x":27}}],[0.000655,{"lines":{"22":[["scala> import org.neo4j.gra._                                                             ",{}]]}}],[0.09496599999999999,{"cursor":{"x":26}}],[0.000353,{"lines":{"22":[["scala> import org.neo4j.gr._                                                              ",{}]]}}],[0.071959,{"cursor":{"x":25}}],[0.000724,{"lines":{"22":[["scala> import org.neo4j.g._                                                               ",{}]]}}],[0.084984,{"cursor":{"x":24}}],[0.0007130000000000001,{"lines":{"22":[["scala> import org.neo4j.._                                                                ",{}]]}}],[0.380788,{"lines":{"22":[["scala> import org.neo4j.k._                                                               ",{}]]},"cursor":{"x":25}}],[0.112024,{"lines":{"22":[["scala> import org.neo4j.ke._                                                              ",{}]]},"cursor":{"x":26}}],[0.07179199999999999,{"lines":{"22":[["scala> import org.neo4j.ker._                                                             ",{}]]},"cursor":{"x":27}}],[0.032317,{"lines":{"22":[["scala> import org.neo4j.kern._                                                            ",{}]]},"cursor":{"x":28}}],[0.135679,{"lines":{"22":[["scala> import org.neo4j.kerne._                                                           ",{}]]},"cursor":{"x":29}}],[0.071993,{"lines":{"22":[["scala> import org.neo4j.kernel._                                                          ",{}]]},"cursor":{"x":30}}],[0.217659,{"lines":{"0":[[" ",{}],["wes-macbook:~",{"fg":6}],[" cd scaltest                                                                ",{}]],"1":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" vi build.sbt                                                        ",{}]],"2":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" sbt console                                                         ",{}]],"3":[["[info] Loading global plugins from /Users/wfreeman/.sbt/plugins                           ",{}]],"4":[["[info] Set current project to default-a0506d (in build file:/Users/wfreeman/scaltest/)    ",{}]],"5":[["[info] Updating {file:/Users/wfreeman/scaltest/}default-a0506d...                         ",{}]],"6":[["[info] Resolving com.googlecode.concurrentlinkedhashmap#concurrentlinkedhashmap-lru;1.3.1 ",{}]],"7":[["[info] Resolving org.neo4j#neo4j-jmx;2.0.0-M06 ...                                        ",{}]],"8":[["[info] Done updating.                                                                     ",{}]],"9":[["[info] Starting scala interpreter...                                                      ",{}]],"10":[["[info]                                                                                    ",{}]],"11":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"12":[["Type in expressions to have them evaluated.                                               ",{}]],"13":[["Type :help for more information.                                                          ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"16":[["import org.neo4j.graphdb._                                                                ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"19":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> import org.neo4j.kernel._                                                          ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.463801,{"lines":{"0":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" vi build.sbt                                                        ",{}]],"1":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" sbt console                                                         ",{}]],"2":[["[info] Loading global plugins from /Users/wfreeman/.sbt/plugins                           ",{}]],"3":[["[info] Set current project to default-a0506d (in build file:/Users/wfreeman/scaltest/)    ",{}]],"4":[["[info] Updating {file:/Users/wfreeman/scaltest/}default-a0506d...                         ",{}]],"5":[["[info] Resolving com.googlecode.concurrentlinkedhashmap#concurrentlinkedhashmap-lru;1.3.1 ",{}]],"6":[["[info] Resolving org.neo4j#neo4j-jmx;2.0.0-M06 ...                                        ",{}]],"7":[["[info] Done updating.                                                                     ",{}]],"8":[["[info] Starting scala interpreter...                                                      ",{}]],"9":[["[info]                                                                                    ",{}]],"10":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"11":[["Type in expressions to have them evaluated.                                               ",{}]],"12":[["Type :help for more information.                                                          ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"15":[["import org.neo4j.graphdb._                                                                ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"18":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> import org.neo4j.kernel._                                                          ",{}]],"21":[["import org.neo4j.kernel._                                                                 ",{}]]}}],[4.9e-05,{"lines":{"0":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" sbt console                                                         ",{}]],"1":[["[info] Loading global plugins from /Users/wfreeman/.sbt/plugins                           ",{}]],"2":[["[info] Set current project to default-a0506d (in build file:/Users/wfreeman/scaltest/)    ",{}]],"3":[["[info] Updating {file:/Users/wfreeman/scaltest/}default-a0506d...                         ",{}]],"4":[["[info] Resolving com.googlecode.concurrentlinkedhashmap#concurrentlinkedhashmap-lru;1.3.1 ",{}]],"5":[["[info] Resolving org.neo4j#neo4j-jmx;2.0.0-M06 ...                                        ",{}]],"6":[["[info] Done updating.                                                                     ",{}]],"7":[["[info] Starting scala interpreter...                                                      ",{}]],"8":[["[info]                                                                                    ",{}]],"9":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"10":[["Type in expressions to have them evaluated.                                               ",{}]],"11":[["Type :help for more information.                                                          ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"14":[["import org.neo4j.graphdb._                                                                ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"17":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> import org.neo4j.kernel._                                                          ",{}]],"20":[["import org.neo4j.kernel._                                                                 ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[0.814975,{"lines":{"22":[["scala> i                                                                                  ",{}]]},"cursor":{"x":8}}],[0.039432,{"lines":{"22":[["scala> im                                                                                 ",{}]]},"cursor":{"x":9}}],[0.127997,{"lines":{"22":[["scala> imp                                                                                ",{}]]},"cursor":{"x":10}}],[0.05603,{"lines":{"22":[["scala> impo                                                                               ",{}]]},"cursor":{"x":11}}],[0.112177,{"lines":{"22":[["scala> impor                                                                              ",{}]]},"cursor":{"x":12}}],[0.175916,{"lines":{"22":[["scala> import                                                                             ",{}]]},"cursor":{"x":13}}],[0.072037,{"cursor":{"x":14}}],[0.602556,{"lines":{"22":[["scala> import c                                                                           ",{}]]},"cursor":{"x":15}}],[0.117876,{"lines":{"22":[["scala> import co                                                                          ",{}]]},"cursor":{"x":16}}],[0.200588,{"lines":{"22":[["scala> import col                                                                         ",{}]]},"cursor":{"x":17}}],[0.134736,{"lines":{"22":[["scala> import coll                                                                        ",{}]]},"cursor":{"x":18}}],[0.04,{"lines":{"22":[["scala> import colle                                                                       ",{}]]},"cursor":{"x":19}}],[0.104034,{"lines":{"22":[["scala> import collec                                                                      ",{}]]},"cursor":{"x":20}}],[0.272364,{"lines":{"22":[["scala> import colleci                                                                     ",{}]]},"cursor":{"x":21}}],[0.007781,{"lines":{"22":[["scala> import collecit                                                                    ",{}]]},"cursor":{"x":22}}],[0.047891,{"lines":{"22":[["scala> import collecito                                                                   ",{}]]},"cursor":{"x":23}}],[0.06397899999999999,{"lines":{"22":[["scala> import colleciton                                                                  ",{}]]},"cursor":{"x":24}}],[0.499079,{"cursor":{"x":23}}],[0.000192,{"lines":{"22":[["scala> import collecito                                                                   ",{}]]}}],[0.125141,{"cursor":{"x":22}}],[0.000238,{"lines":{"22":[["scala> import collecit                                                                    ",{}]]}}],[0.135974,{"cursor":{"x":21}}],[3.9e-05,{"lines":{"22":[["scala> import colleci                                                                     ",{}]]}}],[0.143516,{"cursor":{"x":20}}],[0.000189,{"lines":{"22":[["scala> import collec                                                                      ",{}]]}}],[0.111698,{"lines":{"22":[["scala> import collect                                                                     ",{}]]},"cursor":{"x":21}}],[0.079878,{"lines":{"22":[["scala> import collecti                                                                    ",{}]]},"cursor":{"x":22}}],[0.048027,{"lines":{"22":[["scala> import collectio                                                                   ",{}]]},"cursor":{"x":23}}],[0.048087,{"lines":{"22":[["scala> import collection                                                                  ",{}]]},"cursor":{"x":24}}],[0.208045,{"lines":{"22":[["scala> import collection.                                                                 ",{}]]},"cursor":{"x":25}}],[0.529657,{"lines":{"22":[["scala> import collection.J                                                                ",{}]]},"cursor":{"x":26}}],[0.167802,{"lines":{"22":[["scala> import collection.Ja                                                               ",{}]]},"cursor":{"x":27}}],[0.094704,{"lines":{"22":[["scala> import collection.Jav                                                              ",{}]]},"cursor":{"x":28}}],[0.120928,{"lines":{"22":[["scala> import collection.Java                                                             ",{}]]},"cursor":{"x":29}}],[0.511255,{"lines":{"22":[["scala> import collection.JavaC                                                            ",{}]]},"cursor":{"x":30}}],[0.236088,{"lines":{"22":[["scala> import collection.JavaCo                                                           ",{}]]},"cursor":{"x":31}}],[0.06807299999999999,{"lines":{"22":[["scala> import collection.JavaCon                                                          ",{}]]},"cursor":{"x":32}}],[0.055764,{"lines":{"22":[["scala> import collection.JavaConv                                                         ",{}]]},"cursor":{"x":33}}],[0.154446,{"lines":{"22":[["scala> import collection.JavaConve                                                        ",{}]]},"cursor":{"x":34}}],[0.069688,{"lines":{"22":[["scala> import collection.JavaConver                                                       ",{}]]},"cursor":{"x":35}}],[0.160178,{"lines":{"22":[["scala> import collection.JavaConvert                                                      ",{}]]},"cursor":{"x":36}}],[0.104743,{"lines":{"22":[["scala> import collection.JavaConverte                                                     ",{}]]},"cursor":{"x":37}}],[0.103435,{"lines":{"22":[["scala> import collection.JavaConverter                                                    ",{}]]},"cursor":{"x":38}}],[0.08017000000000001,{"lines":{"22":[["scala> import collection.JavaConverters                                                   ",{}]]},"cursor":{"x":39}}],[0.08716699999999999,{"lines":{"22":[["scala> import collection.JavaConverters.                                                  ",{}]]},"cursor":{"x":40}}],[0.25984,{"lines":{"22":[["scala> import collection.JavaConverters._                                                 ",{}]]},"cursor":{"x":41}}],[0.134839,{"lines":{"0":[["[info] Loading global plugins from /Users/wfreeman/.sbt/plugins                           ",{}]],"1":[["[info] Set current project to default-a0506d (in build file:/Users/wfreeman/scaltest/)    ",{}]],"2":[["[info] Updating {file:/Users/wfreeman/scaltest/}default-a0506d...                         ",{}]],"3":[["[info] Resolving com.googlecode.concurrentlinkedhashmap#concurrentlinkedhashmap-lru;1.3.1 ",{}]],"4":[["[info] Resolving org.neo4j#neo4j-jmx;2.0.0-M06 ...                                        ",{}]],"5":[["[info] Done updating.                                                                     ",{}]],"6":[["[info] Starting scala interpreter...                                                      ",{}]],"7":[["[info]                                                                                    ",{}]],"8":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"9":[["Type in expressions to have them evaluated.                                               ",{}]],"10":[["Type :help for more information.                                                          ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"13":[["import org.neo4j.graphdb._                                                                ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"16":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> import org.neo4j.kernel._                                                          ",{}]],"19":[["import org.neo4j.kernel._                                                                 ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> import collection.JavaConverters._                                                 ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.431803,{"lines":{"0":[["[info] Set current project to default-a0506d (in build file:/Users/wfreeman/scaltest/)    ",{}]],"1":[["[info] Updating {file:/Users/wfreeman/scaltest/}default-a0506d...                         ",{}]],"2":[["[info] Resolving com.googlecode.concurrentlinkedhashmap#concurrentlinkedhashmap-lru;1.3.1 ",{}]],"3":[["[info] Resolving org.neo4j#neo4j-jmx;2.0.0-M06 ...                                        ",{}]],"4":[["[info] Done updating.                                                                     ",{}]],"5":[["[info] Starting scala interpreter...                                                      ",{}]],"6":[["[info]                                                                                    ",{}]],"7":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"8":[["Type in expressions to have them evaluated.                                               ",{}]],"9":[["Type :help for more information.                                                          ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"12":[["import org.neo4j.graphdb._                                                                ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"15":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> import org.neo4j.kernel._                                                          ",{}]],"18":[["import org.neo4j.kernel._                                                                 ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> import collection.JavaConverters._                                                 ",{}]],"21":[["import collection.JavaConverters._                                                        ",{}]]}}],[5.1e-05,{"lines":{"0":[["[info] Updating {file:/Users/wfreeman/scaltest/}default-a0506d...                         ",{}]],"1":[["[info] Resolving com.googlecode.concurrentlinkedhashmap#concurrentlinkedhashmap-lru;1.3.1 ",{}]],"2":[["[info] Resolving org.neo4j#neo4j-jmx;2.0.0-M06 ...                                        ",{}]],"3":[["[info] Done updating.                                                                     ",{}]],"4":[["[info] Starting scala interpreter...                                                      ",{}]],"5":[["[info]                                                                                    ",{}]],"6":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"7":[["Type in expressions to have them evaluated.                                               ",{}]],"8":[["Type :help for more information.                                                          ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"11":[["import org.neo4j.graphdb._                                                                ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"14":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> import org.neo4j.kernel._                                                          ",{}]],"17":[["import org.neo4j.kernel._                                                                 ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> import collection.JavaConverters._                                                 ",{}]],"20":[["import collection.JavaConverters._                                                        ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[3.888684,{"lines":{"22":[["scala> v                                                                                  ",{}]]},"cursor":{"x":8}}],[0.061376,{"lines":{"22":[["scala> va                                                                                 ",{}]]},"cursor":{"x":9}}],[0.070976,{"lines":{"22":[["scala> val                                                                                ",{}]]},"cursor":{"x":10}}],[0.072007,{"cursor":{"x":11}}],[0.400292,{"lines":{"22":[["scala> val l                                                                              ",{}]]},"cursor":{"x":12}}],[0.047842,{"lines":{"22":[["scala> val li                                                                             ",{}]]},"cursor":{"x":13}}],[0.048305,{"lines":{"22":[["scala> val lin                                                                            ",{}]]},"cursor":{"x":14}}],[0.09568599999999999,{"lines":{"22":[["scala> val link                                                                           ",{}]]},"cursor":{"x":15}}],[0.127945,{"cursor":{"x":16}}],[0.169053,{"lines":{"22":[["scala> val link =                                                                         ",{}]]},"cursor":{"x":17}}],[0.06327000000000001,{"cursor":{"x":18}}],[0.479578,{"lines":{"22":[["scala> val link = D                                                                       ",{}]]},"cursor":{"x":19}}],[0.111971,{"lines":{"22":[["scala> val link = Dy                                                                      ",{}]]},"cursor":{"x":20}}],[0.216048,{"lines":{"22":[["scala> val link = Dyn                                                                     ",{}]]},"cursor":{"x":21}}],[0.128123,{"lines":{"22":[["scala> val link = Dyna                                                                    ",{}]]},"cursor":{"x":22}}],[0.080803,{"lines":{"22":[["scala> val link = Dynam                                                                   ",{}]]},"cursor":{"x":23}}],[0.055083,{"lines":{"22":[["scala> val link = Dynami                                                                  ",{}]]},"cursor":{"x":24}}],[0.215955,{"lines":{"22":[["scala> val link = Dynamic                                                                 ",{}]]},"cursor":{"x":25}}],[0.528128,{"lines":{"22":[["scala> val link = DynamicR                                                                ",{}]]},"cursor":{"x":26}}],[0.175871,{"lines":{"22":[["scala> val link = DynamicRe                                                               ",{}]]},"cursor":{"x":27}}],[0.09300700000000001,{"lines":{"22":[["scala> val link = DynamicRel                                                              ",{}]]},"cursor":{"x":28}}],[0.09113,{"lines":{"22":[["scala> val link = DynamicRela                                                             ",{}]]},"cursor":{"x":29}}],[0.07185999999999999,{"lines":{"22":[["scala> val link = DynamicRelat                                                            ",{}]]},"cursor":{"x":30}}],[0.08817,{"lines":{"22":[["scala> val link = DynamicRelati                                                           ",{}]]},"cursor":{"x":31}}],[0.039844,{"lines":{"22":[["scala> val link = DynamicRelatio                                                          ",{}]]},"cursor":{"x":32}}],[0.064051,{"lines":{"22":[["scala> val link = DynamicRelation                                                         ",{}]]},"cursor":{"x":33}}],[0.866,{"lines":{"22":[["scala> val link = DynamicRelations                                                        ",{}]]},"cursor":{"x":34}}],[0.07011199999999999,{"lines":{"22":[["scala> val link = DynamicRelationsh                                                       ",{}]]},"cursor":{"x":35}}],[0.015891,{"lines":{"22":[["scala> val link = DynamicRelationshi                                                      ",{}]]},"cursor":{"x":36}}],[0.056328,{"lines":{"22":[["scala> val link = DynamicRelationship                                                     ",{}]]},"cursor":{"x":37}}],[0.303854,{"lines":{"22":[["scala> val link = DynamicRelationshipT                                                    ",{}]]},"cursor":{"x":38}}],[0.167689,{"lines":{"22":[["scala> val link = DynamicRelationshipTy                                                   ",{}]]},"cursor":{"x":39}}],[0.040036,{"lines":{"22":[["scala> val link = DynamicRelationshipTyp                                                  ",{}]]},"cursor":{"x":40}}],[0.088308,{"lines":{"22":[["scala> val link = DynamicRelationshipType                                                 ",{}]]},"cursor":{"x":41}}],[1.329719,{"lines":{"22":[["scala> val link = DynamicRelationshipType.                                                ",{}]]},"cursor":{"x":42}}],[0.286491,{"lines":{"22":[["scala> val link = DynamicRelationshipType.w                                               ",{}]]},"cursor":{"x":43}}],[0.07160999999999999,{"lines":{"22":[["scala> val link = DynamicRelationshipType.wi                                              ",{}]]},"cursor":{"x":44}}],[0.120234,{"lines":{"22":[["scala> val link = DynamicRelationshipType.wit                                             ",{}]]},"cursor":{"x":45}}],[0.06353,{"lines":{"22":[["scala> val link = DynamicRelationshipType.with                                            ",{}]]},"cursor":{"x":46}}],[0.200359,{"lines":{"22":[["scala> val link = DynamicRelationshipType.withN                                           ",{}]]},"cursor":{"x":47}}],[0.128603,{"lines":{"22":[["scala> val link = DynamicRelationshipType.withNa                                          ",{}]]},"cursor":{"x":48}}],[0.07220600000000001,{"lines":{"22":[["scala> val link = DynamicRelationshipType.withNam                                         ",{}]]},"cursor":{"x":49}}],[0.14714,{"lines":{"22":[["scala> val link = DynamicRelationshipType.withName                                        ",{}]]},"cursor":{"x":50}}],[0.124646,{"lines":{"22":[["scala> val link = DynamicRelationshipType.withName(                                       ",{}]]},"cursor":{"x":51}}],[0.127315,{"lines":{"22":[["scala> val link = DynamicRelationshipType.withName(\"                                      ",{}]]},"cursor":{"x":52}}],[0.472118,{"lines":{"22":[["scala> val link = DynamicRelationshipType.withName(\"L                                     ",{}]]},"cursor":{"x":53}}],[0.07278900000000001,{"lines":{"22":[["scala> val link = DynamicRelationshipType.withName(\"LI                                    ",{}]]},"cursor":{"x":54}}],[0.047875,{"lines":{"22":[["scala> val link = DynamicRelationshipType.withName(\"LIN                                   ",{}]]},"cursor":{"x":55}}],[0.096217,{"lines":{"22":[["scala> val link = DynamicRelationshipType.withName(\"LINK                                  ",{}]]},"cursor":{"x":56}}],[0.179164,{"lines":{"22":[["scala> val link = DynamicRelationshipType.withName(\"LINK\"                                 ",{}]]},"cursor":{"x":57}}],[0.172618,{"lines":{"22":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]]},"cursor":{"x":58}}],[0.320191,{"lines":{"0":[["[info] Resolving com.googlecode.concurrentlinkedhashmap#concurrentlinkedhashmap-lru;1.3.1 ",{}]],"1":[["[info] Resolving org.neo4j#neo4j-jmx;2.0.0-M06 ...                                        ",{}]],"2":[["[info] Done updating.                                                                     ",{}]],"3":[["[info] Starting scala interpreter...                                                      ",{}]],"4":[["[info]                                                                                    ",{}]],"5":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"6":[["Type in expressions to have them evaluated.                                               ",{}]],"7":[["Type :help for more information.                                                          ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"10":[["import org.neo4j.graphdb._                                                                ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"13":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> import org.neo4j.kernel._                                                          ",{}]],"16":[["import org.neo4j.kernel._                                                                 ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> import collection.JavaConverters._                                                 ",{}]],"19":[["import collection.JavaConverters._                                                        ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.959514,{"lines":{"0":[["[info] Resolving org.neo4j#neo4j-jmx;2.0.0-M06 ...                                        ",{}]],"1":[["[info] Done updating.                                                                     ",{}]],"2":[["[info] Starting scala interpreter...                                                      ",{}]],"3":[["[info]                                                                                    ",{}]],"4":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"5":[["Type in expressions to have them evaluated.                                               ",{}]],"6":[["Type :help for more information.                                                          ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"9":[["import org.neo4j.graphdb._                                                                ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"12":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> import org.neo4j.kernel._                                                          ",{}]],"15":[["import org.neo4j.kernel._                                                                 ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> import collection.JavaConverters._                                                 ",{}]],"18":[["import collection.JavaConverters._                                                        ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"21":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]]}}],[0.000268,{"lines":{"0":[["[info] Done updating.                                                                     ",{}]],"1":[["[info] Starting scala interpreter...                                                      ",{}]],"2":[["[info]                                                                                    ",{}]],"3":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"4":[["Type in expressions to have them evaluated.                                               ",{}]],"5":[["Type :help for more information.                                                          ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"8":[["import org.neo4j.graphdb._                                                                ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"11":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> import org.neo4j.kernel._                                                          ",{}]],"14":[["import org.neo4j.kernel._                                                                 ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> import collection.JavaConverters._                                                 ",{}]],"17":[["import collection.JavaConverters._                                                        ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"20":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[4.553203,{"lines":{"22":[["scala> /                                                                                  ",{}]]},"cursor":{"x":8}}],[0.14199,{"lines":{"22":[["scala> //                                                                                 ",{}]]},"cursor":{"x":9}}],[0.103652,{"cursor":{"x":10}}],[0.20803,{"lines":{"22":[["scala> // s                                                                               ",{}]]},"cursor":{"x":11}}],[0.063953,{"lines":{"22":[["scala> // so                                                                              ",{}]]},"cursor":{"x":12}}],[0.048086,{"cursor":{"x":13}}],[0.160113,{"lines":{"22":[["scala> // so I                                                                            ",{}]]},"cursor":{"x":14}}],[0.063917,{"cursor":{"x":15}}],[0.104275,{"lines":{"22":[["scala> // so I d                                                                          ",{}]]},"cursor":{"x":16}}],[0.071699,{"lines":{"22":[["scala> // so I do                                                                         ",{}]]},"cursor":{"x":17}}],[0.052294,{"lines":{"22":[["scala> // so I don                                                                        ",{}]]},"cursor":{"x":18}}],[0.011586,{"lines":{"22":[["scala> // so I don'                                                                       ",{}]]},"cursor":{"x":19}}],[0.073424,{"lines":{"22":[["scala> // so I don't                                                                      ",{}]]},"cursor":{"x":20}}],[0.06275699999999999,{"cursor":{"x":21}}],[0.152227,{"lines":{"22":[["scala> // so I don't h                                                                    ",{}]]},"cursor":{"x":22}}],[0.127704,{"lines":{"22":[["scala> // so I don't ha                                                                   ",{}]]},"cursor":{"x":23}}],[0.056098,{"lines":{"22":[["scala> // so I don't hav                                                                  ",{}]]},"cursor":{"x":24}}],[0.08805399999999999,{"cursor":{"x":25}}],[0.015761,{"lines":{"22":[["scala> // so I don't hav e                                                                ",{}]]},"cursor":{"x":26}}],[0.144237,{"lines":{"22":[["scala> // so I don't hav et                                                               ",{}]]},"cursor":{"x":27}}],[0.032219,{"lines":{"22":[["scala> // so I don't hav eto                                                              ",{}]]},"cursor":{"x":28}}],[0.071744,{"cursor":{"x":29}}],[0.11187,{"lines":{"22":[["scala> // so I don't hav eto k                                                            ",{}]]},"cursor":{"x":30}}],[0.104756,{"lines":{"22":[["scala> // so I don't hav eto ke                                                           ",{}]]},"cursor":{"x":31}}],[0.154751,{"lines":{"22":[["scala> // so I don't hav eto kee                                                          ",{}]]},"cursor":{"x":32}}],[0.124643,{"lines":{"22":[["scala> // so I don't hav eto keep                                                         ",{}]]},"cursor":{"x":33}}],[0.047875,{"cursor":{"x":34}}],[0.12887,{"lines":{"22":[["scala> // so I don't hav eto keep t                                                       ",{}]]},"cursor":{"x":35}}],[0.151831,{"lines":{"22":[["scala> // so I don't hav eto keep ty                                                      ",{}]]},"cursor":{"x":36}}],[0.039471,{"lines":{"22":[["scala> // so I don't hav eto keep typ                                                     ",{}]]},"cursor":{"x":37}}],[0.168618,{"lines":{"22":[["scala> // so I don't hav eto keep typi                                                    ",{}]]},"cursor":{"x":38}}],[0.06371300000000001,{"lines":{"22":[["scala> // so I don't hav eto keep typin                                                   ",{}]]},"cursor":{"x":39}}],[0.103653,{"lines":{"22":[["scala> // so I don't hav eto keep typing                                                  ",{}]]},"cursor":{"x":40}}],[0.063621,{"cursor":{"x":41}}],[0.168616,{"lines":{"22":[["scala> // so I don't hav eto keep typing t                                                ",{}]]},"cursor":{"x":42}}],[0.04788,{"lines":{"22":[["scala> // so I don't hav eto keep typing th                                               ",{}]]},"cursor":{"x":43}}],[0.136816,{"lines":{"22":[["scala> // so I don't hav eto keep typing the                                              ",{}]]},"cursor":{"x":44}}],[0.02359,{"cursor":{"x":45}}],[1.875784,{"lines":{"22":[["scala> // so I don't hav eto keep typing the r                                            ",{}]]},"cursor":{"x":46}}],[0.059411,{"lines":{"22":[["scala> // so I don't hav eto keep typing the re                                           ",{}]]},"cursor":{"x":47}}],[0.039883,{"lines":{"22":[["scala> // so I don't hav eto keep typing the rel                                          ",{}]]},"cursor":{"x":48}}],[0.168059,{"lines":{"22":[["scala> // so I don't hav eto keep typing the relt                                         ",{}]]},"cursor":{"x":49}}],[0.144041,{"lines":{"22":[["scala> // so I don't hav eto keep typing the reltp                                        ",{}]]},"cursor":{"x":50}}],[0.136315,{"lines":{"22":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]]},"cursor":{"x":51}}],[0.223546,{"lines":{"0":[["[info] Starting scala interpreter...                                                      ",{}]],"1":[["[info]                                                                                    ",{}]],"2":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"3":[["Type in expressions to have them evaluated.                                               ",{}]],"4":[["Type :help for more information.                                                          ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"7":[["import org.neo4j.graphdb._                                                                ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"10":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> import org.neo4j.kernel._                                                          ",{}]],"13":[["import org.neo4j.kernel._                                                                 ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> import collection.JavaConverters._                                                 ",{}]],"16":[["import collection.JavaConverters._                                                        ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"19":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.000443,{"lines":{"0":[["[info]                                                                                    ",{}]],"1":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"2":[["Type in expressions to have them evaluated.                                               ",{}]],"3":[["Type :help for more information.                                                          ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"6":[["import org.neo4j.graphdb._                                                                ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"9":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> import org.neo4j.kernel._                                                          ",{}]],"12":[["import org.neo4j.kernel._                                                                 ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> import collection.JavaConverters._                                                 ",{}]],"15":[["import collection.JavaConverters._                                                        ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"18":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[9.244859999999999,{"lines":{"22":[["scala> d                                                                                  ",{}]]},"cursor":{"x":8}}],[0.195685,{"lines":{"22":[["scala> db                                                                                 ",{}]]},"cursor":{"x":9}}],[0.055287,{"cursor":{"x":10}}],[0.592585,{"cursor":{"x":9}}],[0.000357,{}],[0.136036,{"cursor":{"x":8}}],[6.600000000000001e-05,{"lines":{"22":[["scala> d                                                                                  ",{}]]}}],[0.139575,{"cursor":{"x":7}}],[0.000242,{"lines":{"22":[["scala>                                                                                    ",{}]]}}],[0.043152,{"lines":{"22":[["scala> v                                                                                  ",{}]]},"cursor":{"x":8}}],[0.08794399999999999,{"lines":{"22":[["scala> va                                                                                 ",{}]]},"cursor":{"x":9}}],[0.09605,{"lines":{"22":[["scala> val                                                                                ",{}]]},"cursor":{"x":10}}],[0.024037,{"cursor":{"x":11}}],[0.152265,{"lines":{"22":[["scala> val d                                                                              ",{}]]},"cursor":{"x":12}}],[0.160053,{"lines":{"22":[["scala> val db                                                                             ",{}]]},"cursor":{"x":13}}],[0.112304,{"cursor":{"x":14}}],[0.096454,{"lines":{"22":[["scala> val db =                                                                           ",{}]]},"cursor":{"x":15}}],[0.079498,{"cursor":{"x":16}}],[0.228323,{"lines":{"22":[["scala> val db = n                                                                         ",{}]]},"cursor":{"x":17}}],[0.108079,{"lines":{"22":[["scala> val db = ne                                                                        ",{}]]},"cursor":{"x":18}}],[0.078739,{"lines":{"22":[["scala> val db = new                                                                       ",{}]]},"cursor":{"x":19}}],[0.097093,{"cursor":{"x":20}}],[0.231873,{"lines":{"22":[["scala> val db = new E                                                                     ",{}]]},"cursor":{"x":21}}],[0.18316,{"lines":{"22":[["scala> val db = new Em                                                                    ",{}]]},"cursor":{"x":22}}],[0.111594,{"lines":{"22":[["scala> val db = new Emb                                                                   ",{}]]},"cursor":{"x":23}}],[0.184038,{"lines":{"22":[["scala> val db = new Embe                                                                  ",{}]]},"cursor":{"x":24}}],[0.186321,{"lines":{"22":[["scala> val db = new Embed                                                                 ",{}]]},"cursor":{"x":25}}],[0.141904,{"lines":{"22":[["scala> val db = new Embedd                                                                ",{}]]},"cursor":{"x":26}}],[0.423711,{"lines":{"22":[["scala> val db = new Embedde                                                               ",{}]]},"cursor":{"x":27}}],[0.216053,{"lines":{"22":[["scala> val db = new Embedded                                                              ",{}]]},"cursor":{"x":28}}],[0.602693,{"lines":{"22":[["scala> val db = new EmbeddedG                                                             ",{}]]},"cursor":{"x":29}}],[0.189273,{"lines":{"22":[["scala> val db = new EmbeddedGr                                                            ",{}]]},"cursor":{"x":30}}],[0.07274600000000001,{"lines":{"22":[["scala> val db = new EmbeddedGra                                                           ",{}]]},"cursor":{"x":31}}],[0.039259,{"lines":{"22":[["scala> val db = new EmbeddedGrap                                                          ",{}]]},"cursor":{"x":32}}],[0.048092,{"lines":{"22":[["scala> val db = new EmbeddedGraph                                                         ",{}]]},"cursor":{"x":33}}],[0.240026,{"lines":{"22":[["scala> val db = new EmbeddedGraphD                                                        ",{}]]},"cursor":{"x":34}}],[0.199863,{"lines":{"22":[["scala> val db = new EmbeddedGraphDa                                                       ",{}]]},"cursor":{"x":35}}],[0.0727,{"lines":{"22":[["scala> val db = new EmbeddedGraphDat                                                      ",{}]]},"cursor":{"x":36}}],[0.135304,{"lines":{"22":[["scala> val db = new EmbeddedGraphData                                                     ",{}]]},"cursor":{"x":37}}],[0.161922,{"lines":{"22":[["scala> val db = new EmbeddedGraphDatab                                                    ",{}]]},"cursor":{"x":38}}],[0.08612,{"lines":{"22":[["scala> val db = new EmbeddedGraphDataba                                                   ",{}]]},"cursor":{"x":39}}],[0.104074,{"lines":{"22":[["scala> val db = new EmbeddedGraphDatabas                                                  ",{}]]},"cursor":{"x":40}}],[0.055821,{"lines":{"22":[["scala> val db = new EmbeddedGraphDatabase                                                 ",{}]]},"cursor":{"x":41}}],[0.192016,{"lines":{"22":[["scala> val db = new EmbeddedGraphDatabase(                                                ",{}]]},"cursor":{"x":42}}],[0.240164,{"lines":{"22":[["scala> val db = new EmbeddedGraphDatabase(\"                                               ",{}]]},"cursor":{"x":43}}],[0.419507,{"lines":{"22":[["scala> val db = new EmbeddedGraphDatabase(\".                                              ",{}]]},"cursor":{"x":44}}],[0.100925,{"lines":{"22":[["scala> val db = new EmbeddedGraphDatabase(\"./                                             ",{}]]},"cursor":{"x":45}}],[0.535359,{"lines":{"22":[["scala> val db = new EmbeddedGraphDatabase(\"./t                                            ",{}]]},"cursor":{"x":46}}],[0.08014300000000001,{"lines":{"22":[["scala> val db = new EmbeddedGraphDatabase(\"./te                                           ",{}]]},"cursor":{"x":47}}],[0.03992,{"lines":{"22":[["scala> val db = new EmbeddedGraphDatabase(\"./tes                                          ",{}]]},"cursor":{"x":48}}],[0.09596200000000001,{"lines":{"22":[["scala> val db = new EmbeddedGraphDatabase(\"./test                                         ",{}]]},"cursor":{"x":49}}],[0.212274,{"lines":{"22":[["scala> val db = new EmbeddedGraphDatabase(\"./test\"                                        ",{}]]},"cursor":{"x":50}}],[0.219745,{"lines":{"22":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]]},"cursor":{"x":51}}],[0.200329,{"lines":{"0":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"1":[["Type in expressions to have them evaluated.                                               ",{}]],"2":[["Type :help for more information.                                                          ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"5":[["import org.neo4j.graphdb._                                                                ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"8":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> import org.neo4j.kernel._                                                          ",{}]],"11":[["import org.neo4j.kernel._                                                                 ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> import collection.JavaConverters._                                                 ",{}]],"14":[["import collection.JavaConverters._                                                        ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"17":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.260475,{"lines":{"0":[["Type in expressions to have them evaluated.                                               ",{}]],"1":[["Type :help for more information.                                                          ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"4":[["import org.neo4j.graphdb._                                                                ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"7":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> import org.neo4j.kernel._                                                          ",{}]],"10":[["import org.neo4j.kernel._                                                                 ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> import collection.JavaConverters._                                                 ",{}]],"13":[["import collection.JavaConverters._                                                        ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"16":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"21":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]]}}],[0.815764,{"lines":{"0":[["Type :help for more information.                                                          ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"3":[["import org.neo4j.graphdb._                                                                ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"6":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> import org.neo4j.kernel._                                                          ",{}]],"9":[["import org.neo4j.kernel._                                                                 ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> import collection.JavaConverters._                                                 ",{}]],"12":[["import collection.JavaConverters._                                                        ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"15":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"20":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"21":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]]}}],[3.5e-05,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"2":[["import org.neo4j.graphdb._                                                                ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"5":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> import org.neo4j.kernel._                                                          ",{}]],"8":[["import org.neo4j.kernel._                                                                 ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> import collection.JavaConverters._                                                 ",{}]],"11":[["import collection.JavaConverters._                                                        ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"14":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"19":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"20":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.457909,{"lines":{"22":[["scala> v                                                                                  ",{}]]},"cursor":{"x":8}}],[0.090018,{"lines":{"22":[["scala> va                                                                                 ",{}]]},"cursor":{"x":9}}],[0.128552,{"lines":{"22":[["scala> val                                                                                ",{}]]},"cursor":{"x":10}}],[0.047448,{"cursor":{"x":11}}],[0.1996,{"lines":{"22":[["scala> val t                                                                              ",{}]]},"cursor":{"x":12}}],[0.200556,{"lines":{"22":[["scala> val tx                                                                             ",{}]]},"cursor":{"x":13}}],[0.119357,{"cursor":{"x":14}}],[0.113153,{"lines":{"22":[["scala> val tx =                                                                           ",{}]]},"cursor":{"x":15}}],[0.079939,{"cursor":{"x":16}}],[0.144213,{"lines":{"22":[["scala> val tx = d                                                                         ",{}]]},"cursor":{"x":17}}],[0.183839,{"lines":{"22":[["scala> val tx = db                                                                        ",{}]]},"cursor":{"x":18}}],[0.087238,{"lines":{"22":[["scala> val tx = db.                                                                       ",{}]]},"cursor":{"x":19}}],[0.400099,{"lines":{"22":[["scala> val tx = db.b                                                                      ",{}]]},"cursor":{"x":20}}],[0.191916,{"lines":{"22":[["scala> val tx = db.be                                                                     ",{}]]},"cursor":{"x":21}}],[0.087559,{"lines":{"22":[["scala> val tx = db.beg                                                                    ",{}]]},"cursor":{"x":22}}],[0.085047,{"lines":{"22":[["scala> val tx = db.begi                                                                   ",{}]]},"cursor":{"x":23}}],[0.059435,{"lines":{"22":[["scala> val tx = db.begin                                                                  ",{}]]},"cursor":{"x":24}}],[0.328227,{"lines":{"22":[["scala> val tx = db.beginT                                                                 ",{}]]},"cursor":{"x":25}}],[0.215461,{"lines":{"22":[["scala> val tx = db.beginTx                                                                ",{}]]},"cursor":{"x":26}}],[0.088029,{"lines":{"0":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"1":[["import org.neo4j.graphdb._                                                                ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"4":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> import org.neo4j.kernel._                                                          ",{}]],"7":[["import org.neo4j.kernel._                                                                 ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> import collection.JavaConverters._                                                 ",{}]],"10":[["import collection.JavaConverters._                                                        ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"13":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"18":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"19":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val tx = db.beginTx                                                                ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.229845,{"lines":{"0":[["import org.neo4j.graphdb._                                                                ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"3":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> import org.neo4j.kernel._                                                          ",{}]],"6":[["import org.neo4j.kernel._                                                                 ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> import collection.JavaConverters._                                                 ",{}]],"9":[["import collection.JavaConverters._                                                        ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"12":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"17":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"18":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> val tx = db.beginTx                                                                ",{}]],"21":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]]}}],[4.2e-05,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"2":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> import org.neo4j.kernel._                                                          ",{}]],"5":[["import org.neo4j.kernel._                                                                 ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> import collection.JavaConverters._                                                 ",{}]],"8":[["import collection.JavaConverters._                                                        ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"11":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"16":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"17":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> val tx = db.beginTx                                                                ",{}]],"20":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[3.000004,{"lines":{"22":[["scala> v                                                                                  ",{}]]},"cursor":{"x":8}}],[0.073779,{"lines":{"22":[["scala> va                                                                                 ",{}]]},"cursor":{"x":9}}],[0.09675,{"lines":{"22":[["scala> val                                                                                ",{}]]},"cursor":{"x":10}}],[0.071433,{"cursor":{"x":11}}],[0.320438,{"lines":{"22":[["scala> val r                                                                              ",{}]]},"cursor":{"x":12}}],[0.095384,{"lines":{"22":[["scala> val ro                                                                             ",{}]]},"cursor":{"x":13}}],[0.119918,{"lines":{"22":[["scala> val roo                                                                            ",{}]]},"cursor":{"x":14}}],[0.120716,{"lines":{"22":[["scala> val root                                                                           ",{}]]},"cursor":{"x":15}}],[0.087335,{"cursor":{"x":16}}],[0.122916,{"lines":{"22":[["scala> val root =                                                                         ",{}]]},"cursor":{"x":17}}],[0.084926,{"cursor":{"x":18}}],[1.091215,{"lines":{"22":[["scala> val root = d                                                                       ",{}]]},"cursor":{"x":19}}],[0.212995,{"lines":{"22":[["scala> val root = db                                                                      ",{}]]},"cursor":{"x":20}}],[0.191792,{"lines":{"22":[["scala> val root = db.                                                                     ",{}]]},"cursor":{"x":21}}],[0.42415,{"lines":{"22":[["scala> val root = db.G                                                                    ",{}]]},"cursor":{"x":22}}],[0.483542,{"cursor":{"x":21}}],[0.00016,{"lines":{"22":[["scala> val root = db.                                                                     ",{}]]}}],[0.044236,{"lines":{"22":[["scala> val root = db.g                                                                    ",{}]]},"cursor":{"x":22}}],[0.096009,{"lines":{"22":[["scala> val root = db.ge                                                                   ",{}]]},"cursor":{"x":23}}],[0.08797099999999999,{"lines":{"22":[["scala> val root = db.get                                                                  ",{}]]},"cursor":{"x":24}}],[0.7284,{"lines":{"22":[["scala> val root = db.getN                                                                 ",{}]]},"cursor":{"x":25}}],[0.153424,{"lines":{"22":[["scala> val root = db.getNo                                                                ",{}]]},"cursor":{"x":26}}],[0.070213,{"lines":{"22":[["scala> val root = db.getNod                                                               ",{}]]},"cursor":{"x":27}}],[0.143908,{"lines":{"22":[["scala> val root = db.getNode                                                              ",{}]]},"cursor":{"x":28}}],[0.247903,{"lines":{"22":[["scala> val root = db.getNodeB                                                             ",{}]]},"cursor":{"x":29}}],[0.160098,{"lines":{"22":[["scala> val root = db.getNodeBy                                                            ",{}]]},"cursor":{"x":30}}],[0.192212,{"lines":{"22":[["scala> val root = db.getNodeByI                                                           ",{}]]},"cursor":{"x":31}}],[0.176075,{"lines":{"22":[["scala> val root = db.getNodeById                                                          ",{}]]},"cursor":{"x":32}}],[0.187817,{"lines":{"22":[["scala> val root = db.getNodeById(                                                         ",{}]]},"cursor":{"x":33}}],[0.387847,{"lines":{"22":[["scala> val root = db.getNodeById(0                                                        ",{}]]},"cursor":{"x":34}}],[0.128068,{"lines":{"22":[["scala> val root = db.getNodeById(0)                                                       ",{}]]},"cursor":{"x":35}}],[0.575765,{"lines":{"0":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"1":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> import org.neo4j.kernel._                                                          ",{}]],"4":[["import org.neo4j.kernel._                                                                 ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> import collection.JavaConverters._                                                 ",{}]],"7":[["import collection.JavaConverters._                                                        ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"10":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"15":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"16":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val tx = db.beginTx                                                                ",{}]],"19":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.26558,{"lines":{"0":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> import org.neo4j.kernel._                                                          ",{}]],"3":[["import org.neo4j.kernel._                                                                 ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> import collection.JavaConverters._                                                 ",{}]],"6":[["import collection.JavaConverters._                                                        ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"9":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"14":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"15":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val tx = db.beginTx                                                                ",{}]],"18":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"21":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]]}}],[6.2e-05,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> import org.neo4j.kernel._                                                          ",{}]],"2":[["import org.neo4j.kernel._                                                                 ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> import collection.JavaConverters._                                                 ",{}]],"5":[["import collection.JavaConverters._                                                        ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"8":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"13":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"14":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val tx = db.beginTx                                                                ",{}]],"17":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"20":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.917894,{"lines":{"22":[["scala> p                                                                                  ",{}]]},"cursor":{"x":8}}],[0.08887399999999999,{"lines":{"22":[["scala> pr                                                                                 ",{}]]},"cursor":{"x":9}}],[0.055754,{"lines":{"22":[["scala> pri                                                                                ",{}]]},"cursor":{"x":10}}],[0.080262,{"lines":{"22":[["scala> prin                                                                               ",{}]]},"cursor":{"x":11}}],[0.088182,{"lines":{"22":[["scala> print                                                                              ",{}]]},"cursor":{"x":12}}],[0.120556,{"lines":{"22":[["scala> printl                                                                             ",{}]]},"cursor":{"x":13}}],[0.055633,{"lines":{"22":[["scala> println                                                                            ",{}]]},"cursor":{"x":14}}],[0.216406,{"lines":{"22":[["scala> println(                                                                           ",{}]]},"cursor":{"x":15}}],[0.20008,{"lines":{"22":[["scala> println(r                                                                          ",{}]]},"cursor":{"x":16}}],[0.07996399999999999,{"lines":{"22":[["scala> println(ro                                                                         ",{}]]},"cursor":{"x":17}}],[0.144276,{"lines":{"22":[["scala> println(roo                                                                        ",{}]]},"cursor":{"x":18}}],[0.09528499999999999,{"lines":{"22":[["scala> println(root                                                                       ",{}]]},"cursor":{"x":19}}],[0.239479,{"lines":{"22":[["scala> println(root)                                                                      ",{}]]},"cursor":{"x":20}}],[0.352975,{"lines":{"0":[["scala> import org.neo4j.kernel._                                                          ",{}]],"1":[["import org.neo4j.kernel._                                                                 ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> import collection.JavaConverters._                                                 ",{}]],"4":[["import collection.JavaConverters._                                                        ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"7":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"12":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"13":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val tx = db.beginTx                                                                ",{}]],"16":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"19":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> println(root)                                                                      ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.160869,{"lines":{"0":[["import org.neo4j.kernel._                                                                 ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> import collection.JavaConverters._                                                 ",{}]],"3":[["import collection.JavaConverters._                                                        ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"6":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"11":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"12":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val tx = db.beginTx                                                                ",{}]],"15":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"18":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> println(root)                                                                      ",{}]],"21":[["Node[0]                                                                                   ",{}]]}}],[4.3e-05,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> import collection.JavaConverters._                                                 ",{}]],"2":[["import collection.JavaConverters._                                                        ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"5":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"10":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"11":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val tx = db.beginTx                                                                ",{}]],"14":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"17":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> println(root)                                                                      ",{}]],"20":[["Node[0]                                                                                   ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[3.103232,{"lines":{"22":[["scala> r                                                                                  ",{}]]},"cursor":{"x":8}}],[0.062846,{"lines":{"22":[["scala> ro                                                                                 ",{}]]},"cursor":{"x":9}}],[0.112291,{"lines":{"22":[["scala> roo                                                                                ",{}]]},"cursor":{"x":10}}],[0.128906,{"lines":{"22":[["scala> root                                                                               ",{}]]},"cursor":{"x":11}}],[0.119796,{"lines":{"22":[["scala> root.                                                                              ",{}]]},"cursor":{"x":12}}],[0.366823,{"lines":{"22":[["scala> root.s                                                                             ",{}]]},"cursor":{"x":13}}],[0.07259,{"lines":{"22":[["scala> root.se                                                                            ",{}]]},"cursor":{"x":14}}],[0.047624,{"lines":{"22":[["scala> root.set                                                                           ",{}]]},"cursor":{"x":15}}],[0.198574,{"lines":{"22":[["scala> root.setP                                                                          ",{}]]},"cursor":{"x":16}}],[0.137279,{"lines":{"22":[["scala> root.setPr                                                                         ",{}]]},"cursor":{"x":17}}],[0.065119,{"lines":{"22":[["scala> root.setPro                                                                        ",{}]]},"cursor":{"x":18}}],[0.072131,{"lines":{"22":[["scala> root.setProp                                                                       ",{}]]},"cursor":{"x":19}}],[0.103921,{"lines":{"22":[["scala> root.setPrope                                                                      ",{}]]},"cursor":{"x":20}}],[0.055072,{"lines":{"22":[["scala> root.setProper                                                                     ",{}]]},"cursor":{"x":21}}],[0.151584,{"lines":{"22":[["scala> root.setPropert                                                                    ",{}]]},"cursor":{"x":22}}],[0.112415,{"lines":{"22":[["scala> root.setProperty                                                                   ",{}]]},"cursor":{"x":23}}],[0.231954,{"lines":{"22":[["scala> root.setProperty(                                                                  ",{}]]},"cursor":{"x":24}}],[0.346575,{"lines":{"22":[["scala> root.setProperty(\"                                                                 ",{}]]},"cursor":{"x":25}}],[0.269011,{"lines":{"22":[["scala> root.setProperty(\"n                                                                ",{}]]},"cursor":{"x":26}}],[0.111979,{"lines":{"22":[["scala> root.setProperty(\"na                                                               ",{}]]},"cursor":{"x":27}}],[0.096164,{"lines":{"22":[["scala> root.setProperty(\"nam                                                              ",{}]]},"cursor":{"x":28}}],[0.120126,{"lines":{"22":[["scala> root.setProperty(\"name                                                             ",{}]]},"cursor":{"x":29}}],[0.111748,{"lines":{"22":[["scala> root.setProperty(\"name\"                                                            ",{}]]},"cursor":{"x":30}}],[0.2242,{"lines":{"22":[["scala> root.setProperty(\"name\")                                                           ",{}]]},"cursor":{"x":31}}],[0.9314750000000001,{"cursor":{"x":30}}],[4.3e-05,{"lines":{"22":[["scala> root.setProperty(\"name\"                                                            ",{}]]}}],[0.276281,{"lines":{"22":[["scala> root.setProperty(\"name\",                                                           ",{}]]},"cursor":{"x":31}}],[0.064155,{"cursor":{"x":32}}],[0.199736,{"lines":{"22":[["scala> root.setProperty(\"name\", \"                                                         ",{}]]},"cursor":{"x":33}}],[0.232164,{"lines":{"22":[["scala> root.setProperty(\"name\", \"r                                                        ",{}]]},"cursor":{"x":34}}],[0.11213,{"lines":{"22":[["scala> root.setProperty(\"name\", \"ro                                                       ",{}]]},"cursor":{"x":35}}],[0.111974,{"lines":{"22":[["scala> root.setProperty(\"name\", \"roo                                                      ",{}]]},"cursor":{"x":36}}],[0.09952800000000001,{"lines":{"22":[["scala> root.setProperty(\"name\", \"root                                                     ",{}]]},"cursor":{"x":37}}],[0.324384,{"lines":{"22":[["scala> root.setProperty(\"name\", \"root\"                                                    ",{}]]},"cursor":{"x":38}}],[0.256077,{"lines":{"22":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]]},"cursor":{"x":39}}],[0.279632,{"lines":{"0":[["scala> import collection.JavaConverters._                                                 ",{}]],"1":[["import collection.JavaConverters._                                                        ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"4":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"9":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"10":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> val tx = db.beginTx                                                                ",{}]],"13":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"16":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> println(root)                                                                      ",{}]],"19":[["Node[0]                                                                                   ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.255182,{"lines":{"0":[["import collection.JavaConverters._                                                        ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"3":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"8":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"9":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val tx = db.beginTx                                                                ",{}]],"12":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"15":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> println(root)                                                                      ",{}]],"18":[["Node[0]                                                                                   ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.05131,{"lines":{"22":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]]},"cursor":{"x":39}}],[0.165897,{"cursor":{"x":7}}],[0.0006850000000000001,{"lines":{"22":[["scala> println(root)                                                                      ",{}]]},"cursor":{"x":20}}],[1.416501,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"2":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"7":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"8":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val tx = db.beginTx                                                                ",{}]],"11":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"14":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> println(root)                                                                      ",{}]],"17":[["Node[0]                                                                                   ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> println(root)                                                                      ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.141711,{"lines":{"0":[["scala> val link = DynamicRelationshipType.withName(\"LINK\")                                ",{}]],"1":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"6":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"7":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val tx = db.beginTx                                                                ",{}]],"10":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"13":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> println(root)                                                                      ",{}]],"16":[["Node[0]                                                                                   ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> println(root)                                                                      ",{}]],"21":[["Node[0]                                                                                   ",{}]]}}],[6.499999999999999e-05,{"lines":{"0":[["link: org.neo4j.graphdb.DynamicRelationshipType = LINK                                    ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"5":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"6":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val tx = db.beginTx                                                                ",{}]],"9":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"12":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> println(root)                                                                      ",{}]],"15":[["Node[0]                                                                                   ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> println(root)                                                                      ",{}]],"20":[["Node[0]                                                                                   ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[0.308434,{"lines":{"22":[["scala> println(root)                                                                      ",{}]]},"cursor":{"x":20}}],[0.220631,{"cursor":{"x":19}}],[0.752817,{"lines":{"22":[["scala> println(root.)                                                                     ",{}]]},"cursor":{"x":20}}],[0.313914,{"lines":{"22":[["scala> println(root.g)                                                                    ",{}]]},"cursor":{"x":21}}],[0.117298,{"lines":{"22":[["scala> println(root.ge)                                                                   ",{}]]},"cursor":{"x":22}}],[0.088504,{"lines":{"22":[["scala> println(root.get)                                                                  ",{}]]},"cursor":{"x":23}}],[0.215547,{"lines":{"22":[["scala> println(root.getP)                                                                 ",{}]]},"cursor":{"x":24}}],[0.136995,{"lines":{"22":[["scala> println(root.getPr)                                                                ",{}]]},"cursor":{"x":25}}],[0.110642,{"lines":{"22":[["scala> println(root.getPro)                                                               ",{}]]},"cursor":{"x":26}}],[0.048447,{"lines":{"22":[["scala> println(root.getProp)                                                              ",{}]]},"cursor":{"x":27}}],[0.08060199999999999,{"lines":{"22":[["scala> println(root.getPrope)                                                             ",{}]]},"cursor":{"x":28}}],[0.063917,{"lines":{"22":[["scala> println(root.getProper)                                                            ",{}]]},"cursor":{"x":29}}],[0.156522,{"lines":{"22":[["scala> println(root.getPropert)                                                           ",{}]]},"cursor":{"x":30}}],[0.099841,{"lines":{"22":[["scala> println(root.getProperty)                                                          ",{}]]},"cursor":{"x":31}}],[0.190735,{"lines":{"22":[["scala> println(root.getProperty()                                                         ",{}]]},"cursor":{"x":32}}],[0.504112,{"lines":{"22":[["scala> println(root.getProperty(\")                                                        ",{}]]},"cursor":{"x":33}}],[0.225554,{"lines":{"22":[["scala> println(root.getProperty(\"n)                                                       ",{}]]},"cursor":{"x":34}}],[0.110413,{"lines":{"22":[["scala> println(root.getProperty(\"na)                                                      ",{}]]},"cursor":{"x":35}}],[0.08180999999999999,{"lines":{"22":[["scala> println(root.getProperty(\"nam)                                                     ",{}]]},"cursor":{"x":36}}],[0.110085,{"lines":{"22":[["scala> println(root.getProperty(\"name)                                                    ",{}]]},"cursor":{"x":37}}],[0.127974,{"lines":{"22":[["scala> println(root.getProperty(\"name\")                                                   ",{}]]},"cursor":{"x":38}}],[0.184878,{"lines":{"22":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]]},"cursor":{"x":39}}],[0.263235,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"4":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"5":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val tx = db.beginTx                                                                ",{}]],"8":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"11":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> println(root)                                                                      ",{}]],"14":[["Node[0]                                                                                   ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> println(root)                                                                      ",{}]],"19":[["Node[0]                                                                                   ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.1967,{"lines":{"0":[["scala> // so I don't hav eto keep typing the reltpe                                       ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"3":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"4":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val tx = db.beginTx                                                                ",{}]],"7":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"10":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> println(root)                                                                      ",{}]],"13":[["Node[0]                                                                                   ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> println(root)                                                                      ",{}]],"18":[["Node[0]                                                                                   ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]],"21":[["root                                                                                      ",{}]]}}],[0.000369,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"2":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"3":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val tx = db.beginTx                                                                ",{}]],"6":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"9":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> println(root)                                                                      ",{}]],"12":[["Node[0]                                                                                   ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> println(root)                                                                      ",{}]],"17":[["Node[0]                                                                                   ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]],"20":[["root                                                                                      ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[2.397321,{"lines":{"22":[["scala> v                                                                                  ",{}]]},"cursor":{"x":8}}],[0.05329,{"lines":{"22":[["scala> va                                                                                 ",{}]]},"cursor":{"x":9}}],[0.056021,{"lines":{"22":[["scala> val                                                                                ",{}]]},"cursor":{"x":10}}],[0.049931,{"cursor":{"x":11}}],[0.526076,{"lines":{"22":[["scala> val n                                                                              ",{}]]},"cursor":{"x":12}}],[0.436879,{"lines":{"22":[["scala> val n=                                                                             ",{}]]},"cursor":{"x":13}}],[0.275467,{"cursor":{"x":12}}],[4.3e-05,{"lines":{"22":[["scala> val n                                                                              ",{}]]}}],[0.07163700000000001,{"cursor":{"x":13}}],[0.095961,{"lines":{"22":[["scala> val n =                                                                            ",{}]]},"cursor":{"x":14}}],[0.088046,{"cursor":{"x":15}}],[0.518257,{"lines":{"22":[["scala> val n = d                                                                          ",{}]]},"cursor":{"x":16}}],[0.145775,{"lines":{"22":[["scala> val n = db                                                                         ",{}]]},"cursor":{"x":17}}],[0.096695,{"lines":{"22":[["scala> val n = db.                                                                        ",{}]]},"cursor":{"x":18}}],[0.495152,{"lines":{"22":[["scala> val n = db.c                                                                       ",{}]]},"cursor":{"x":19}}],[0.169187,{"lines":{"22":[["scala> val n = db.cr                                                                      ",{}]]},"cursor":{"x":20}}],[0.078794,{"lines":{"22":[["scala> val n = db.cre                                                                     ",{}]]},"cursor":{"x":21}}],[0.052964,{"lines":{"22":[["scala> val n = db.crea                                                                    ",{}]]},"cursor":{"x":22}}],[0.06804200000000001,{"lines":{"22":[["scala> val n = db.creat                                                                   ",{}]]},"cursor":{"x":23}}],[0.055973,{"lines":{"22":[["scala> val n = db.create                                                                  ",{}]]},"cursor":{"x":24}}],[0.201022,{"lines":{"22":[["scala> val n = db.createN                                                                 ",{}]]},"cursor":{"x":25}}],[0.118296,{"lines":{"22":[["scala> val n = db.createNo                                                                ",{}]]},"cursor":{"x":26}}],[0.080926,{"lines":{"22":[["scala> val n = db.createNod                                                               ",{}]]},"cursor":{"x":27}}],[0.135996,{"lines":{"22":[["scala> val n = db.createNode                                                              ",{}]]},"cursor":{"x":28}}],[0.374774,{"lines":{"0":[["scala> val db = new EmbeddedGraphDatabase(\"./test\")                                       ",{}]],"1":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"2":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> val tx = db.beginTx                                                                ",{}]],"5":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"8":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> println(root)                                                                      ",{}]],"11":[["Node[0]                                                                                   ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> println(root)                                                                      ",{}]],"16":[["Node[0]                                                                                   ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]],"19":[["root                                                                                      ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val n = db.createNode                                                              ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.142676,{"lines":{"0":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"1":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val tx = db.beginTx                                                                ",{}]],"4":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"7":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> println(root)                                                                      ",{}]],"10":[["Node[0]                                                                                   ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> println(root)                                                                      ",{}]],"15":[["Node[0]                                                                                   ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]],"18":[["root                                                                                      ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> val n = db.createNode                                                              ",{}]],"21":[["n: org.neo4j.graphdb.Node = Node[1]                                                       ",{}]]}}],[0.000124,{"lines":{"0":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [./test]               ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val tx = db.beginTx                                                                ",{}]],"3":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"6":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> println(root)                                                                      ",{}]],"9":[["Node[0]                                                                                   ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> println(root)                                                                      ",{}]],"14":[["Node[0]                                                                                   ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]],"17":[["root                                                                                      ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> val n = db.createNode                                                              ",{}]],"20":[["n: org.neo4j.graphdb.Node = Node[1]                                                       ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[3.494633,{"lines":{"22":[["scala> n                                                                                  ",{}]]},"cursor":{"x":8}}],[0.171104,{"lines":{"22":[["scala> n.                                                                                 ",{}]]},"cursor":{"x":9}}],[0.552381,{"lines":{"22":[["scala> n.s                                                                                ",{}]]},"cursor":{"x":10}}],[0.063751,{"lines":{"22":[["scala> n.se                                                                               ",{}]]},"cursor":{"x":11}}],[0.041695,{"lines":{"22":[["scala> n.set                                                                              ",{}]]},"cursor":{"x":12}}],[0.634456,{"lines":{"22":[["scala> n.setP                                                                             ",{}]]},"cursor":{"x":13}}],[0.195323,{"lines":{"22":[["scala> n.setPr                                                                            ",{}]]},"cursor":{"x":14}}],[0.192693,{"lines":{"22":[["scala> n.setPro                                                                           ",{}]]},"cursor":{"x":15}}],[0.031225,{"lines":{"22":[["scala> n.setProp                                                                          ",{}]]},"cursor":{"x":16}}],[0.096277,{"lines":{"22":[["scala> n.setPrope                                                                         ",{}]]},"cursor":{"x":17}}],[0.055539,{"lines":{"22":[["scala> n.setProper                                                                        ",{}]]},"cursor":{"x":18}}],[0.160576,{"lines":{"22":[["scala> n.setPropert                                                                       ",{}]]},"cursor":{"x":19}}],[0.119334,{"lines":{"22":[["scala> n.setProperty                                                                      ",{}]]},"cursor":{"x":20}}],[0.189848,{"lines":{"22":[["scala> n.setProperty(                                                                     ",{}]]},"cursor":{"x":21}}],[0.251054,{"lines":{"22":[["scala> n.setProperty(\"                                                                    ",{}]]},"cursor":{"x":22}}],[0.183297,{"lines":{"22":[["scala> n.setProperty(\"N                                                                   ",{}]]},"cursor":{"x":23}}],[0.176258,{"lines":{"22":[["scala> n.setProperty(\"Na                                                                  ",{}]]},"cursor":{"x":24}}],[0.056456,{"lines":{"22":[["scala> n.setProperty(\"Nam                                                                 ",{}]]},"cursor":{"x":25}}],[0.120572,{"lines":{"22":[["scala> n.setProperty(\"Name                                                                ",{}]]},"cursor":{"x":26}}],[0.127053,{"lines":{"22":[["scala> n.setProperty(\"Name\"                                                               ",{}]]},"cursor":{"x":27}}],[0.404972,{"cursor":{"x":26}}],[4.6e-05,{"lines":{"22":[["scala> n.setProperty(\"Name                                                                ",{}]]}}],[0.122674,{"cursor":{"x":25}}],[0.000137,{"lines":{"22":[["scala> n.setProperty(\"Nam                                                                 ",{}]]}}],[0.14398,{"cursor":{"x":24}}],[8.2e-05,{"lines":{"22":[["scala> n.setProperty(\"Na                                                                  ",{}]]}}],[0.151894,{"cursor":{"x":23}}],[0.000188,{"lines":{"22":[["scala> n.setProperty(\"N                                                                   ",{}]]}}],[0.143972,{"cursor":{"x":22}}],[8.899999999999999e-05,{"lines":{"22":[["scala> n.setProperty(\"                                                                    ",{}]]}}],[0.199555,{"lines":{"22":[["scala> n.setProperty(\"n                                                                   ",{}]]},"cursor":{"x":23}}],[0.063982,{"lines":{"22":[["scala> n.setProperty(\"na                                                                  ",{}]]},"cursor":{"x":24}}],[0.087961,{"lines":{"22":[["scala> n.setProperty(\"nam                                                                 ",{}]]},"cursor":{"x":25}}],[0.106833,{"lines":{"22":[["scala> n.setProperty(\"name                                                                ",{}]]},"cursor":{"x":26}}],[0.117175,{"lines":{"22":[["scala> n.setProperty(\"name\"                                                               ",{}]]},"cursor":{"x":27}}],[0.767891,{"lines":{"22":[["scala> n.setProperty(\"name\",                                                              ",{}]]},"cursor":{"x":28}}],[0.08001800000000001,{"cursor":{"x":29}}],[0.513757,{"lines":{"22":[["scala> n.setProperty(\"name\", n                                                            ",{}]]},"cursor":{"x":30}}],[1.208387,{"cursor":{"x":29}}],[0.00014,{"lines":{"22":[["scala> n.setProperty(\"name\",                                                              ",{}]]}}],[0.157884,{"lines":{"22":[["scala> n.setProperty(\"name\", \"                                                            ",{}]]},"cursor":{"x":30}}],[0.199716,{"lines":{"22":[["scala> n.setProperty(\"name\", \"n                                                           ",{}]]},"cursor":{"x":31}}],[0.272008,{"lines":{"22":[["scala> n.setProperty(\"name\", \"n\"                                                          ",{}]]},"cursor":{"x":32}}],[0.296061,{"lines":{"22":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]]},"cursor":{"x":33}}],[0.599912,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> val tx = db.beginTx                                                                ",{}]],"2":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"5":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> println(root)                                                                      ",{}]],"8":[["Node[0]                                                                                   ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> println(root)                                                                      ",{}]],"13":[["Node[0]                                                                                   ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]],"16":[["root                                                                                      ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val n = db.createNode                                                              ",{}]],"19":[["n: org.neo4j.graphdb.Node = Node[1]                                                       ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.169456,{"lines":{"0":[["scala> val tx = db.beginTx                                                                ",{}]],"1":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"4":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> println(root)                                                                      ",{}]],"7":[["Node[0]                                                                                   ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> println(root)                                                                      ",{}]],"12":[["Node[0]                                                                                   ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]],"15":[["root                                                                                      ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val n = db.createNode                                                              ",{}]],"18":[["n: org.neo4j.graphdb.Node = Node[1]                                                       ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[3.868655,{"lines":{"22":[["scala> d                                                                                  ",{}]]},"cursor":{"x":8}}],[0.810003,{"lines":{"22":[["scala> db                                                                                 ",{}]]},"cursor":{"x":9}}],[0.079795,{"lines":{"22":[["scala> db.                                                                                ",{}]]},"cursor":{"x":10}}],[0.636117,{"lines":{"22":[["scala> db.g                                                                               ",{}]]},"cursor":{"x":11}}],[0.067898,{"lines":{"22":[["scala> db.ge                                                                              ",{}]]},"cursor":{"x":12}}],[0.088087,{"lines":{"22":[["scala> db.get                                                                             ",{}]]},"cursor":{"x":13}}],[0.200041,{"lines":{"22":[["scala> db.getA                                                                            ",{}]]},"cursor":{"x":14}}],[0.127847,{"lines":{"22":[["scala> db.getAl                                                                           ",{}]]},"cursor":{"x":15}}],[0.690361,{"lines":{"22":[["scala> db.getAll                                                                          ",{}]]},"cursor":{"x":16}}],[0.16561,{"lines":{"22":[["scala> db.getAllN                                                                         ",{}]]},"cursor":{"x":17}}],[0.143953,{"lines":{"22":[["scala> db.getAllNo                                                                        ",{}]]},"cursor":{"x":18}}],[0.048124,{"lines":{"22":[["scala> db.getAllNod                                                                       ",{}]]},"cursor":{"x":19}}],[0.216148,{"lines":{"22":[["scala> db.getAllNode                                                                      ",{}]]},"cursor":{"x":20}}],[0.087753,{"lines":{"22":[["scala> db.getAllNodes                                                                     ",{}]]},"cursor":{"x":21}}],[0.247975,{"lines":{"22":[["scala> db.getAllNodes(                                                                    ",{}]]},"cursor":{"x":22}}],[1.283027,{"cursor":{"x":21}}],[0.000134,{"lines":{"22":[["scala> db.getAllNodes                                                                     ",{}]]}}],[0.292868,{"lines":{"22":[["scala> db.getAllNodes.                                                                    ",{}]]},"cursor":{"x":22}}],[0.175975,{"lines":{"22":[["scala> db.getAllNodes.a                                                                   ",{}]]},"cursor":{"x":23}}],[0.08803900000000001,{"lines":{"22":[["scala> db.getAllNodes.as                                                                  ",{}]]},"cursor":{"x":24}}],[0.312024,{"lines":{"22":[["scala> db.getAllNodes.asS                                                                 ",{}]]},"cursor":{"x":25}}],[0.225831,{"lines":{"22":[["scala> db.getAllNodes.asSc                                                                ",{}]]},"cursor":{"x":26}}],[0.046245,{"lines":{"22":[["scala> db.getAllNodes.asSca                                                               ",{}]]},"cursor":{"x":27}}],[0.079806,{"lines":{"22":[["scala> db.getAllNodes.asScal                                                              ",{}]]},"cursor":{"x":28}}],[0.12806,{"lines":{"22":[["scala> db.getAllNodes.asScala                                                             ",{}]]},"cursor":{"x":29}}],[0.200682,{"lines":{"22":[["scala> db.getAllNodes.asScala.                                                            ",{}]]},"cursor":{"x":30}}],[0.816837,{"lines":{"22":[["scala> db.getAllNodes.asScala.f                                                           ",{}]]},"cursor":{"x":31}}],[0.078593,{"lines":{"22":[["scala> db.getAllNodes.asScala.fo                                                          ",{}]]},"cursor":{"x":32}}],[0.112883,{"lines":{"22":[["scala> db.getAllNodes.asScala.for                                                         ",{}]]},"cursor":{"x":33}}],[0.09540700000000001,{"lines":{"22":[["scala> db.getAllNodes.asScala.fore                                                        ",{}]]},"cursor":{"x":34}}],[0.095579,{"lines":{"22":[["scala> db.getAllNodes.asScala.forea                                                       ",{}]]},"cursor":{"x":35}}],[0.152418,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreac                                                      ",{}]]},"cursor":{"x":36}}],[0.056039,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach                                                     ",{}]]},"cursor":{"x":37}}],[0.312515,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(                                                    ",{}]]},"cursor":{"x":38}}],[1.308841,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(p                                                   ",{}]]},"cursor":{"x":39}}],[0.107683,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(pr                                                  ",{}]]},"cursor":{"x":40}}],[0.055044,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(pri                                                 ",{}]]},"cursor":{"x":41}}],[0.064427,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(prin                                                ",{}]]},"cursor":{"x":42}}],[0.103415,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(print                                               ",{}]]},"cursor":{"x":43}}],[0.112383,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(printl                                              ",{}]]},"cursor":{"x":44}}],[0.072517,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println                                             ",{}]]},"cursor":{"x":45}}],[0.295279,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(                                            ",{}]]},"cursor":{"x":46}}],[0.32057,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println()                                           ",{}]]},"cursor":{"x":47}}],[0.519231,{"cursor":{"x":46}}],[0.000209,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(                                            ",{}]]}}],[0.131961,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(_                                           ",{}]]},"cursor":{"x":47}}],[0.1954,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(__                                          ",{}]]},"cursor":{"x":48}}],[0.339432,{"cursor":{"x":47}}],[6.1e-05,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(_                                           ",{}]]}}],[0.108609,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(_)                                          ",{}]]},"cursor":{"x":48}}],[0.151987,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(_))                                         ",{}]]},"cursor":{"x":49}}],[0.31977,{"lines":{"0":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@58f23b4a         ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val root = db.getNodeById(0)                                                       ",{}]],"3":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> println(root)                                                                      ",{}]],"6":[["Node[0]                                                                                   ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> println(root)                                                                      ",{}]],"11":[["Node[0]                                                                                   ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]],"14":[["root                                                                                      ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val n = db.createNode                                                              ",{}]],"17":[["n: org.neo4j.graphdb.Node = Node[1]                                                       ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> db.getAllNodes.asScala.foreach(println(_))                                         ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[1.088689,{"lines":{"0":[["root: org.neo4j.graphdb.Node = Node[0]                                                    ",{}]],"2":[["scala> println(root)                                                                      ",{}]],"3":[["Node[0]                                                                                   ",{}]],"5":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> println(root)                                                                      ",{}]],"8":[["Node[0]                                                                                   ",{}]],"10":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]],"11":[["root                                                                                      ",{}]],"13":[["scala> val n = db.createNode                                                              ",{}]],"14":[["n: org.neo4j.graphdb.Node = Node[1]                                                       ",{}]],"16":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> db.getAllNodes.asScala.foreach(println(_))                                         ",{}]],"19":[["Node[0]                                                                                   ",{}]],"20":[["Node[1]                                                                                   ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.594157,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(_))                                         ",{}]]},"cursor":{"x":49}}],[0.077226,{"cursor":{"x":48}}],[0.480054,{"cursor":{"x":47}}],[0.457157,{"cursor":{"x":46}}],[0.000338,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println())                                          ",{}]]}}],[0.278613,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n))                                         ",{}]]},"cursor":{"x":47}}],[0.303852,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.))                                        ",{}]]},"cursor":{"x":48}}],[0.30411,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.g))                                       ",{}]]},"cursor":{"x":49}}],[0.131768,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.ge))                                      ",{}]]},"cursor":{"x":50}}],[0.052622,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.get))                                     ",{}]]},"cursor":{"x":51}}],[0.689133,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.getP))                                    ",{}]]},"cursor":{"x":52}}],[0.190322,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.getPr))                                   ",{}]]},"cursor":{"x":53}}],[0.105509,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.getPro))                                  ",{}]]},"cursor":{"x":54}}],[0.041295,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.getProp))                                 ",{}]]},"cursor":{"x":55}}],[0.093704,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.getPrope))                                ",{}]]},"cursor":{"x":56}}],[0.047564,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.getProper))                               ",{}]]},"cursor":{"x":57}}],[0.160967,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.getPropert))                              ",{}]]},"cursor":{"x":58}}],[0.135427,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.getProperty))                             ",{}]]},"cursor":{"x":59}}],[0.27198,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.getProperty())                            ",{}]]},"cursor":{"x":60}}],[0.644581,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.getProperty(\"))                           ",{}]]},"cursor":{"x":61}}],[0.163392,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.getProperty(\"n))                          ",{}]]},"cursor":{"x":62}}],[0.135798,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.getProperty(\"na))                         ",{}]]},"cursor":{"x":63}}],[0.088532,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.getProperty(\"nam))                        ",{}]]},"cursor":{"x":64}}],[0.120221,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.getProperty(\"name))                       ",{}]]},"cursor":{"x":65}}],[0.183496,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.getProperty(\"name\"))                      ",{}]]},"cursor":{"x":66}}],[0.160379,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(println(n.getProperty(\"name\")))                     ",{}]]},"cursor":{"x":67}}],[0.62905,{"cursor":{"x":66}}],[0.486546,{"cursor":{"x":65}}],[0.084022,{"cursor":{"x":64}}],[0.084135,{"cursor":{"x":63}}],[0.08383400000000001,{"cursor":{"x":62}}],[0.08366700000000001,{"cursor":{"x":61}}],[0.08329499999999999,{"cursor":{"x":60}}],[0.084408,{"cursor":{"x":59}}],[0.09715699999999999,{"cursor":{"x":58}}],[0.06995999999999999,{"cursor":{"x":57}}],[0.084019,{"cursor":{"x":56}}],[0.083939,{"cursor":{"x":55}}],[0.08555,{"cursor":{"x":54}}],[0.082482,{"cursor":{"x":53}}],[0.08430700000000001,{"cursor":{"x":52}}],[0.083757,{"cursor":{"x":51}}],[0.083815,{"cursor":{"x":50}}],[0.08411,{"cursor":{"x":49}}],[0.083897,{"cursor":{"x":48}}],[0.08429399999999999,{"cursor":{"x":47}}],[0.084227,{"cursor":{"x":46}}],[0.09471499999999999,{"cursor":{"x":45}}],[0.073522,{"cursor":{"x":44}}],[0.084352,{"cursor":{"x":43}}],[0.084173,{"cursor":{"x":42}}],[0.083566,{"cursor":{"x":41}}],[0.08394500000000001,{"cursor":{"x":40}}],[0.083272,{"cursor":{"x":39}}],[0.083898,{"cursor":{"x":38}}],[0.66933,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(nprintln(n.getProperty(\"name\")))                    ",{}]]},"cursor":{"x":39}}],[0.524284,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(n println(n.getProperty(\"name\")))                   ",{}]]},"cursor":{"x":40}}],[0.127449,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(n =println(n.getProperty(\"name\")))                  ",{}]]},"cursor":{"x":41}}],[0.320005,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(n =>println(n.getProperty(\"name\")))                 ",{}]]},"cursor":{"x":42}}],[0.024036,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\")))                ",{}]]},"cursor":{"x":43}}],[0.2024,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> println(root)                                                                      ",{}]],"2":[["Node[0]                                                                                   ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> println(root)                                                                      ",{}]],"7":[["Node[0]                                                                                   ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]],"10":[["root                                                                                      ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> val n = db.createNode                                                              ",{}]],"13":[["n: org.neo4j.graphdb.Node = Node[1]                                                       ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> db.getAllNodes.asScala.foreach(println(_))                                         ",{}]],"18":[["Node[0]                                                                                   ",{}]],"19":[["Node[1]                                                                                   ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\")))                ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.606226,{"lines":{"0":[["scala> println(root)                                                                      ",{}]],"1":[["Node[0]                                                                                   ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> println(root)                                                                      ",{}]],"6":[["Node[0]                                                                                   ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]],"9":[["root                                                                                      ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val n = db.createNode                                                              ",{}]],"12":[["n: org.neo4j.graphdb.Node = Node[1]                                                       ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> db.getAllNodes.asScala.foreach(println(_))                                         ",{}]],"17":[["Node[0]                                                                                   ",{}]],"18":[["Node[1]                                                                                   ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\")))                ",{}]],"21":[["root                                                                                      ",{}]]}}],[3.9e-05,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"3":[["scala> println(root)                                                                      ",{}]],"4":[["Node[0]                                                                                   ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]],"7":[["root                                                                                      ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val n = db.createNode                                                              ",{}]],"10":[["n: org.neo4j.graphdb.Node = Node[1]                                                       ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]],"14":[["scala> db.getAllNodes.asScala.foreach(println(_))                                         ",{}]],"15":[["Node[0]                                                                                   ",{}]],"16":[["Node[1]                                                                                   ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\")))                ",{}]],"19":[["root                                                                                      ",{}]],"20":[["n                                                                                         ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.197892,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\")))                ",{}]]},"cursor":{"x":74}}],[0.633344,{"cursor":{"x":73}}],[0.15213,{"cursor":{"x":72}}],[1.177297,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") ))               ",{}]]},"cursor":{"x":73}}],[0.246598,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") +))              ",{}]]},"cursor":{"x":74}}],[0.039959,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + ))             ",{}]]},"cursor":{"x":75}}],[0.913011,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \"))            ",{}]]},"cursor":{"x":76}}],[0.215014,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" ))           ",{}]]},"cursor":{"x":77}}],[0.216038,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \"))          ",{}]]},"cursor":{"x":78}}],[0.61546,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" ))         ",{}]]},"cursor":{"x":79}}],[0.185806,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" +))        ",{}]]},"cursor":{"x":80}}],[0.023051,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + ))       ",{}]]},"cursor":{"x":81}}],[0.535762,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]]},"cursor":{"x":82}}],[0.19971,{"lines":{"0":[["scala> root.setProperty(\"name\", \"root\")                                                   ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> println(root)                                                                      ",{}]],"3":[["Node[0]                                                                                   ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]],"6":[["root                                                                                      ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val n = db.createNode                                                              ",{}]],"9":[["n: org.neo4j.graphdb.Node = Node[1]                                                       ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> db.getAllNodes.asScala.foreach(println(_))                                         ",{}]],"14":[["Node[0]                                                                                   ",{}]],"15":[["Node[1]                                                                                   ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\")))                ",{}]],"18":[["root                                                                                      ",{}]],"19":[["n                                                                                         ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.633477,{"lines":{"22":[["root Node[0]                                                                              ",{}]]},"cursor":{"x":12}}],[0.001451,{"lines":{"0":[["Node[0]                                                                                   ",{}]],"2":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]],"3":[["root                                                                                      ",{}]],"5":[["scala> val n = db.createNode                                                              ",{}]],"6":[["n: org.neo4j.graphdb.Node = Node[1]                                                       ",{}]],"8":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> db.getAllNodes.asScala.foreach(println(_))                                         ",{}]],"11":[["Node[0]                                                                                   ",{}]],"12":[["Node[1]                                                                                   ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\")))                ",{}]],"15":[["root                                                                                      ",{}]],"16":[["n                                                                                         ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"19":[["root Node[0]                                                                              ",{}]],"20":[["n Node[1]                                                                                 ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[3.777371,{"lines":{"22":[["scala> R                                                                                  ",{}]]},"cursor":{"x":8}}],[0.123581,{"lines":{"22":[["scala> Ra                                                                                 ",{}]]},"cursor":{"x":9}}],[0.056108,{"lines":{"22":[["scala> Ran                                                                                ",{}]]},"cursor":{"x":10}}],[0.111975,{"lines":{"22":[["scala> Rang                                                                               ",{}]]},"cursor":{"x":11}}],[0.07188600000000001,{"lines":{"22":[["scala> Range                                                                              ",{}]]},"cursor":{"x":12}}],[0.176158,{"lines":{"22":[["scala> Range(                                                                             ",{}]]},"cursor":{"x":13}}],[0.263935,{"lines":{"22":[["scala> Range(0                                                                            ",{}]]},"cursor":{"x":14}}],[0.48413,{"cursor":{"x":13}}],[0.000128,{"lines":{"22":[["scala> Range(                                                                             ",{}]]}}],[0.48826,{"cursor":{"x":12}}],[0.000201,{"lines":{"22":[["scala> Range                                                                              ",{}]]}}],[0.084547,{"cursor":{"x":11}}],[0.000229,{"lines":{"22":[["scala> Rang                                                                               ",{}]]}}],[0.084107,{"cursor":{"x":10}}],[0.000331,{"lines":{"22":[["scala> Ran                                                                                ",{}]]}}],[0.082029,{"cursor":{"x":9}}],[0.00019,{"lines":{"22":[["scala> Ra                                                                                 ",{}]]}}],[0.085128,{"cursor":{"x":8}}],[0.000324,{"lines":{"22":[["scala> R                                                                                  ",{}]]}}],[0.082686,{"cursor":{"x":7}}],[0.000178,{"lines":{"22":[["scala>                                                                                    ",{}]]}}],[0.254518,{"lines":{"22":[["scala> /                                                                                  ",{}]]},"cursor":{"x":8}}],[0.129686,{"lines":{"22":[["scala> //                                                                                 ",{}]]},"cursor":{"x":9}}],[0.063502,{"cursor":{"x":10}}],[0.18469,{"lines":{"22":[["scala> // l                                                                               ",{}]]},"cursor":{"x":11}}],[0.112053,{"lines":{"22":[["scala> // le                                                                              ",{}]]},"cursor":{"x":12}}],[0.055097,{"lines":{"22":[["scala> // let                                                                             ",{}]]},"cursor":{"x":13}}],[0.15282,{"lines":{"22":[["scala> // let'                                                                            ",{}]]},"cursor":{"x":14}}],[0.143027,{"lines":{"22":[["scala> // let's                                                                           ",{}]]},"cursor":{"x":15}}],[0.032129,{"cursor":{"x":16}}],[0.104983,{"lines":{"22":[["scala> // let's m                                                                         ",{}]]},"cursor":{"x":17}}],[0.114326,{"lines":{"22":[["scala> // let's ma                                                                        ",{}]]},"cursor":{"x":18}}],[0.076566,{"lines":{"22":[["scala> // let's mak                                                                       ",{}]]},"cursor":{"x":19}}],[0.096056,{"lines":{"22":[["scala> // let's make                                                                      ",{}]]},"cursor":{"x":20}}],[0.040637,{"cursor":{"x":21}}],[0.1034,{"lines":{"22":[["scala> // let's make a                                                                    ",{}]]},"cursor":{"x":22}}],[0.055855,{"cursor":{"x":23}}],[0.144163,{"lines":{"22":[["scala> // let's make a f                                                                  ",{}]]},"cursor":{"x":24}}],[0.055994,{"lines":{"22":[["scala> // let's make a fe                                                                 ",{}]]},"cursor":{"x":25}}],[0.079906,{"lines":{"22":[["scala> // let's make a few                                                                ",{}]]},"cursor":{"x":26}}],[0.055938,{"cursor":{"x":27}}],[0.159987,{"lines":{"22":[["scala> // let's make a few m                                                              ",{}]]},"cursor":{"x":28}}],[0.112044,{"lines":{"22":[["scala> // let's make a few mo                                                             ",{}]]},"cursor":{"x":29}}],[0.338383,{"lines":{"22":[["scala> // let's make a few mor                                                            ",{}]]},"cursor":{"x":30}}],[0.037529,{"lines":{"22":[["scala> // let's make a few more                                                           ",{}]]},"cursor":{"x":31}}],[0.400219,{"lines":{"22":[["scala> // let's make a few more.                                                          ",{}]]},"cursor":{"x":32}}],[0.128596,{"lines":{"22":[["scala> // let's make a few more..                                                         ",{}]]},"cursor":{"x":33}}],[0.135256,{"lines":{"22":[["scala> // let's make a few more...                                                        ",{}]]},"cursor":{"x":34}}],[0.143861,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]],"2":[["root                                                                                      ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> val n = db.createNode                                                              ",{}]],"5":[["n: org.neo4j.graphdb.Node = Node[1]                                                       ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> db.getAllNodes.asScala.foreach(println(_))                                         ",{}]],"10":[["Node[0]                                                                                   ",{}]],"11":[["Node[1]                                                                                   ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\")))                ",{}]],"14":[["root                                                                                      ",{}]],"15":[["n                                                                                         ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"18":[["root Node[0]                                                                              ",{}]],"19":[["n Node[1]                                                                                 ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> // let's make a few more...                                                        ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.000492,{"lines":{"0":[["scala> println(root.getProperty(\"name\"))                                                  ",{}]],"1":[["root                                                                                      ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val n = db.createNode                                                              ",{}]],"4":[["n: org.neo4j.graphdb.Node = Node[1]                                                       ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> db.getAllNodes.asScala.foreach(println(_))                                         ",{}]],"9":[["Node[0]                                                                                   ",{}]],"10":[["Node[1]                                                                                   ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\")))                ",{}]],"13":[["root                                                                                      ",{}]],"14":[["n                                                                                         ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"17":[["root Node[0]                                                                              ",{}]],"18":[["n Node[1]                                                                                 ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> // let's make a few more...                                                        ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[0.827859,{"lines":{"22":[["scala> R                                                                                  ",{}]]},"cursor":{"x":8}}],[0.1477,{"lines":{"22":[["scala> Ra                                                                                 ",{}]]},"cursor":{"x":9}}],[0.08799800000000001,{"lines":{"22":[["scala> Ran                                                                                ",{}]]},"cursor":{"x":10}}],[0.072102,{"lines":{"22":[["scala> Rang                                                                               ",{}]]},"cursor":{"x":11}}],[0.056378,{"lines":{"22":[["scala> Range                                                                              ",{}]]},"cursor":{"x":12}}],[0.175785,{"lines":{"22":[["scala> Range(                                                                             ",{}]]},"cursor":{"x":13}}],[0.295752,{"lines":{"22":[["scala> Range(0                                                                            ",{}]]},"cursor":{"x":14}}],[0.417894,{"lines":{"22":[["scala> Range(0,                                                                           ",{}]]},"cursor":{"x":15}}],[0.222194,{"cursor":{"x":16}}],[0.103908,{"lines":{"22":[["scala> Range(0, 1                                                                         ",{}]]},"cursor":{"x":17}}],[0.080072,{"lines":{"22":[["scala> Range(0, 10                                                                        ",{}]]},"cursor":{"x":18}}],[0.279946,{"lines":{"22":[["scala> Range(0, 10)                                                                       ",{}]]},"cursor":{"x":19}}],[1.245006,{"lines":{"22":[["scala> Range(0, 10).                                                                      ",{}]]},"cursor":{"x":20}}],[0.299399,{"lines":{"22":[["scala> Range(0, 10).f                                                                     ",{}]]},"cursor":{"x":21}}],[0.055729,{"lines":{"22":[["scala> Range(0, 10).fo                                                                    ",{}]]},"cursor":{"x":22}}],[0.12024,{"lines":{"22":[["scala> Range(0, 10).for                                                                   ",{}]]},"cursor":{"x":23}}],[0.088129,{"lines":{"22":[["scala> Range(0, 10).fore                                                                  ",{}]]},"cursor":{"x":24}}],[0.09586,{"lines":{"22":[["scala> Range(0, 10).forea                                                                 ",{}]]},"cursor":{"x":25}}],[0.112452,{"lines":{"22":[["scala> Range(0, 10).foreac                                                                ",{}]]},"cursor":{"x":26}}],[0.103741,{"lines":{"22":[["scala> Range(0, 10).foreach                                                               ",{}]]},"cursor":{"x":27}}],[0.335141,{"lines":{"22":[["scala> Range(0, 10).foreach(                                                              ",{}]]},"cursor":{"x":28}}],[0.920676,{"lines":{"22":[["scala> Range(0, 10).foreach(e                                                             ",{}]]},"cursor":{"x":29}}],[0.120397,{"cursor":{"x":30}}],[0.47221,{"lines":{"22":[["scala> Range(0, 10).foreach(e =                                                           ",{}]]},"cursor":{"x":31}}],[0.287388,{"lines":{"22":[["scala> Range(0, 10).foreach(e =>                                                          ",{}]]},"cursor":{"x":32}}],[0.039649,{"cursor":{"x":33}}],[1.353563,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {                                                        ",{}]]},"cursor":{"x":34}}],[0.846302,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {v                                                       ",{}]]},"cursor":{"x":35}}],[0.063897,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {va                                                      ",{}]]},"cursor":{"x":36}}],[0.039986,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val                                                     ",{}]]},"cursor":{"x":37}}],[0.08160100000000001,{"cursor":{"x":38}}],[0.134517,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n                                                   ",{}]]},"cursor":{"x":39}}],[0.399861,{"cursor":{"x":40}}],[0.112179,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n =                                                 ",{}]]},"cursor":{"x":41}}],[0.103864,{"cursor":{"x":42}}],[1.826913,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = d                                               ",{}]]},"cursor":{"x":43}}],[0.189203,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db                                              ",{}]]},"cursor":{"x":44}}],[0.09608700000000001,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.                                             ",{}]]},"cursor":{"x":45}}],[0.423757,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.c                                            ",{}]]},"cursor":{"x":46}}],[0.207947,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.cr                                           ",{}]]},"cursor":{"x":47}}],[0.07198,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.cre                                          ",{}]]},"cursor":{"x":48}}],[0.082525,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.crea                                         ",{}]]},"cursor":{"x":49}}],[0.061704,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.creat                                        ",{}]]},"cursor":{"x":50}}],[0.055882,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.create                                       ",{}]]},"cursor":{"x":51}}],[0.200649,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createN                                      ",{}]]},"cursor":{"x":52}}],[0.128368,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNo                                     ",{}]]},"cursor":{"x":53}}],[0.07134500000000001,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNod                                    ",{}]]},"cursor":{"x":54}}],[0.15999,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode                                   ",{}]]},"cursor":{"x":55}}],[0.415534,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode;                                  ",{}]]},"cursor":{"x":56}}],[0.048016,{"cursor":{"x":57}}],[2.098122,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n                                ",{}]]},"cursor":{"x":58}}],[0.181883,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.                               ",{}]]},"cursor":{"x":59}}],[0.152127,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.s                              ",{}]]},"cursor":{"x":60}}],[0.080915,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.se                             ",{}]]},"cursor":{"x":61}}],[0.055821,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.set                            ",{}]]},"cursor":{"x":62}}],[0.191356,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setP                           ",{}]]},"cursor":{"x":63}}],[0.273069,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setPo                          ",{}]]},"cursor":{"x":64}}],[0.039037,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setPop                         ",{}]]},"cursor":{"x":65}}],[0.076122,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setPopr                        ",{}]]},"cursor":{"x":66}}],[0.276326,{"cursor":{"x":65}}],[0.000261,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setPop                         ",{}]]}}],[0.120389,{"cursor":{"x":64}}],[0.00022,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setPo                          ",{}]]}}],[0.135739,{"cursor":{"x":63}}],[0.000313,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setP                           ",{}]]}}],[0.079553,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setPr                          ",{}]]},"cursor":{"x":64}}],[0.103505,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setPro                         ",{}]]},"cursor":{"x":65}}],[0.063531,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProp                        ",{}]]},"cursor":{"x":66}}],[0.063587,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setPrope                       ",{}]]},"cursor":{"x":67}}],[0.048214,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProper                      ",{}]]},"cursor":{"x":68}}],[0.14745,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setPropert                     ",{}]]},"cursor":{"x":69}}],[0.100782,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty                    ",{}]]},"cursor":{"x":70}}],[0.800363,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(                   ",{}]]},"cursor":{"x":71}}],[0.488787,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"                  ",{}]]},"cursor":{"x":72}}],[0.190566,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"n                 ",{}]]},"cursor":{"x":73}}],[0.095918,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"na                ",{}]]},"cursor":{"x":74}}],[0.08802699999999999,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"nam               ",{}]]},"cursor":{"x":75}}],[0.103961,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name              ",{}]]},"cursor":{"x":76}}],[0.152078,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\"             ",{}]]},"cursor":{"x":77}}],[0.722618,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\",            ",{}]]},"cursor":{"x":78}}],[0.093406,{"cursor":{"x":79}}],[0.279764,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"          ",{}]]},"cursor":{"x":80}}],[0.328033,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n         ",{}]]},"cursor":{"x":81}}],[0.232126,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"        ",{}]]},"cursor":{"x":82}}],[0.609152,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+       ",{}]]},"cursor":{"x":83}}],[0.630841,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+e      ",{}]]},"cursor":{"x":84}}],[1.124526,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+e)     ",{}]]},"cursor":{"x":85}}],[1.16037,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+e)}    ",{}]]},"cursor":{"x":86}}],[1.095776,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+e)})   ",{}]]},"cursor":{"x":87}}],[0.339935,{"lines":{"0":[["root                                                                                      ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val n = db.createNode                                                              ",{}]],"3":[["n: org.neo4j.graphdb.Node = Node[1]                                                       ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> db.getAllNodes.asScala.foreach(println(_))                                         ",{}]],"8":[["Node[0]                                                                                   ",{}]],"9":[["Node[1]                                                                                   ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\")))                ",{}]],"12":[["root                                                                                      ",{}]],"13":[["n                                                                                         ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"16":[["root Node[0]                                                                              ",{}]],"17":[["n Node[1]                                                                                 ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> // let's make a few more...                                                        ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+e)})   ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.495906,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> val n = db.createNode                                                              ",{}]],"2":[["n: org.neo4j.graphdb.Node = Node[1]                                                       ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> db.getAllNodes.asScala.foreach(println(_))                                         ",{}]],"7":[["Node[0]                                                                                   ",{}]],"8":[["Node[1]                                                                                   ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\")))                ",{}]],"11":[["root                                                                                      ",{}]],"12":[["n                                                                                         ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"15":[["root Node[0]                                                                              ",{}]],"16":[["n Node[1]                                                                                 ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> // let's make a few more...                                                        ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+e)})   ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.756131,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+e)})   ",{}]]},"cursor":{"x":87}}],[0.171469,{"cursor":{"x":7}}],[0.000379,{"lines":{"22":[["scala> // let's make a few more...                                                        ",{}]]},"cursor":{"x":34}}],[0.543739,{"lines":{"0":[["scala> val n = db.createNode                                                              ",{}]],"1":[["n: org.neo4j.graphdb.Node = Node[1]                                                       ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> db.getAllNodes.asScala.foreach(println(_))                                         ",{}]],"6":[["Node[0]                                                                                   ",{}]],"7":[["Node[1]                                                                                   ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\")))                ",{}]],"10":[["root                                                                                      ",{}]],"11":[["n                                                                                         ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"14":[["root Node[0]                                                                              ",{}]],"15":[["n Node[1]                                                                                 ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> // let's make a few more...                                                        ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+e)})   ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> // let's make a few more...                                                        ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[9.500000000000001e-05,{"lines":{"0":[["n: org.neo4j.graphdb.Node = Node[1]                                                       ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> db.getAllNodes.asScala.foreach(println(_))                                         ",{}]],"5":[["Node[0]                                                                                   ",{}]],"6":[["Node[1]                                                                                   ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\")))                ",{}]],"9":[["root                                                                                      ",{}]],"10":[["n                                                                                         ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"13":[["root Node[0]                                                                              ",{}]],"14":[["n Node[1]                                                                                 ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> // let's make a few more...                                                        ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+e)})   ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> // let's make a few more...                                                        ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[0.627346,{"lines":{"22":[["scala> // let's make a few more...                                                        ",{}]]},"cursor":{"x":34}}],[0.140233,{"cursor":{"x":7}}],[0.000482,{"lines":{"22":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+e)})   ",{}]]},"cursor":{"x":87}}],[0.127477,{"cursor":{"x":7}}],[0.000319,{"lines":{"22":[["scala> // let's make a few more...                                                        ",{}]]},"cursor":{"x":34}}],[0.119704,{"cursor":{"x":7}}],[0.000616,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]]},"cursor":{"x":84}}],[0.463327,{"cursor":{"x":7}}],[0.000414,{"lines":{"22":[["scala> // let's make a few more...                                                        ",{}]]},"cursor":{"x":34}}],[0.776975,{"cursor":{"x":7}}],[0.000335,{"lines":{"22":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]]},"cursor":{"x":84}}],[0.702076,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> db.getAllNodes.asScala.foreach(println(_))                                         ",{}]],"4":[["Node[0]                                                                                   ",{}]],"5":[["Node[1]                                                                                   ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\")))                ",{}]],"8":[["root                                                                                      ",{}]],"9":[["n                                                                                         ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"12":[["root Node[0]                                                                              ",{}]],"13":[["n Node[1]                                                                                 ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> // let's make a few more...                                                        ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+e)})   ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> // let's make a few more...                                                        ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.31691,{"lines":{"0":[["scala> n.setProperty(\"name\", \"n\")                                                         ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> db.getAllNodes.asScala.foreach(println(_))                                         ",{}]],"3":[["Node[0]                                                                                   ",{}]],"4":[["Node[1]                                                                                   ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\")))                ",{}]],"7":[["root                                                                                      ",{}]],"8":[["n                                                                                         ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"11":[["root Node[0]                                                                              ",{}]],"12":[["n Node[1]                                                                                 ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> // let's make a few more...                                                        ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+e)})   ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> // let's make a few more...                                                        ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"21":[["root Node[0]                                                                              ",{}]]}}],[0.0006669999999999999,{"lines":{"0":[["n Node[1]                                                                                 ",{}]],"2":[["scala> // let's make a few more...                                                        ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+e)})   ",{}]],"6":[["scala> // let's make a few more...                                                        ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"9":[["root Node[0]                                                                              ",{}]],"10":[["n Node[1]                                                                                 ",{}]],"11":[["n0 Node[2]                                                                                ",{}]],"12":[["n1 Node[3]                                                                                ",{}]],"13":[["n2 Node[4]                                                                                ",{}]],"14":[["n3 Node[5]                                                                                ",{}]],"15":[["n4 Node[6]                                                                                ",{}]],"16":[["n5 Node[7]                                                                                ",{}]],"17":[["n6 Node[8]                                                                                ",{}]],"18":[["n7 Node[9]                                                                                ",{}]],"19":[["n8 Node[10]                                                                               ",{}]],"20":[["n9 Node[11]                                                                               ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[5.563599,{"lines":{"22":[["scala> /                                                                                  ",{}]]},"cursor":{"x":8}}],[0.135331,{"lines":{"22":[["scala> //                                                                                 ",{}]]},"cursor":{"x":9}}],[0.07235900000000001,{"cursor":{"x":10}}],[0.191521,{"lines":{"22":[["scala> // l                                                                               ",{}]]},"cursor":{"x":11}}],[0.128116,{"lines":{"22":[["scala> // le                                                                              ",{}]]},"cursor":{"x":12}}],[0.04768,{"lines":{"22":[["scala> // let                                                                             ",{}]]},"cursor":{"x":13}}],[0.088578,{"lines":{"22":[["scala> // let'                                                                            ",{}]]},"cursor":{"x":14}}],[0.103136,{"lines":{"22":[["scala> // let's                                                                           ",{}]]},"cursor":{"x":15}}],[0.105171,{"cursor":{"x":16}}],[0.09490700000000001,{"lines":{"22":[["scala> // let's c                                                                         ",{}]]},"cursor":{"x":17}}],[0.132244,{"lines":{"22":[["scala> // let's co                                                                        ",{}]]},"cursor":{"x":18}}],[0.043722,{"lines":{"22":[["scala> // let's con                                                                       ",{}]]},"cursor":{"x":19}}],[0.112,{"lines":{"22":[["scala> // let's conn                                                                      ",{}]]},"cursor":{"x":20}}],[0.159996,{"lines":{"22":[["scala> // let's conne                                                                     ",{}]]},"cursor":{"x":21}}],[0.06411699999999999,{"lines":{"22":[["scala> // let's connec                                                                    ",{}]]},"cursor":{"x":22}}],[0.255745,{"lines":{"22":[["scala> // let's connect                                                                   ",{}]]},"cursor":{"x":23}}],[0.072211,{"cursor":{"x":24}}],[0.127894,{"lines":{"22":[["scala> // let's connect t                                                                 ",{}]]},"cursor":{"x":25}}],[0.063904,{"lines":{"22":[["scala> // let's connect th                                                                ",{}]]},"cursor":{"x":26}}],[0.137909,{"lines":{"22":[["scala> // let's connect the                                                               ",{}]]},"cursor":{"x":27}}],[0.102058,{"lines":{"22":[["scala> // let's connect them                                                              ",{}]]},"cursor":{"x":28}}],[0.376139,{"lines":{"22":[["scala> // let's connect them.                                                             ",{}]]},"cursor":{"x":29}}],[0.135864,{"lines":{"22":[["scala> // let's connect them..                                                            ",{}]]},"cursor":{"x":30}}],[0.152119,{"lines":{"22":[["scala> // let's connect them...                                                           ",{}]]},"cursor":{"x":31}}],[0.311843,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> // let's make a few more...                                                        ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+e)})   ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> // let's make a few more...                                                        ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"8":[["root Node[0]                                                                              ",{}]],"9":[["n Node[1]                                                                                 ",{}]],"10":[["n0 Node[2]                                                                                ",{}]],"11":[["n1 Node[3]                                                                                ",{}]],"12":[["n2 Node[4]                                                                                ",{}]],"13":[["n3 Node[5]                                                                                ",{}]],"14":[["n4 Node[6]                                                                                ",{}]],"15":[["n5 Node[7]                                                                                ",{}]],"16":[["n6 Node[8]                                                                                ",{}]],"17":[["n7 Node[9]                                                                                ",{}]],"18":[["n8 Node[10]                                                                               ",{}]],"19":[["n9 Node[11]                                                                               ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> // let's connect them...                                                           ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.000348,{"lines":{"0":[["scala> // let's make a few more...                                                        ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+e)})   ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> // let's make a few more...                                                        ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"7":[["root Node[0]                                                                              ",{}]],"8":[["n Node[1]                                                                                 ",{}]],"9":[["n0 Node[2]                                                                                ",{}]],"10":[["n1 Node[3]                                                                                ",{}]],"11":[["n2 Node[4]                                                                                ",{}]],"12":[["n3 Node[5]                                                                                ",{}]],"13":[["n4 Node[6]                                                                                ",{}]],"14":[["n5 Node[7]                                                                                ",{}]],"15":[["n6 Node[8]                                                                                ",{}]],"16":[["n7 Node[9]                                                                                ",{}]],"17":[["n8 Node[10]                                                                               ",{}]],"18":[["n9 Node[11]                                                                               ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> // let's connect them...                                                           ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.969377,{"lines":{"22":[["scala> r                                                                                  ",{}]]},"cursor":{"x":8}}],[0.078431,{"lines":{"22":[["scala> ro                                                                                 ",{}]]},"cursor":{"x":9}}],[0.127952,{"lines":{"22":[["scala> roo                                                                                ",{}]]},"cursor":{"x":10}}],[0.095957,{"lines":{"22":[["scala> root                                                                               ",{}]]},"cursor":{"x":11}}],[1.131613,{"lines":{"22":[["scala> root.                                                                              ",{}]]},"cursor":{"x":12}}],[0.220674,{"lines":{"22":[["scala> root.c                                                                             ",{}]]},"cursor":{"x":13}}],[0.248123,{"lines":{"22":[["scala> root.cr                                                                            ",{}]]},"cursor":{"x":14}}],[0.08007400000000001,{"lines":{"22":[["scala> root.cre                                                                           ",{}]]},"cursor":{"x":15}}],[0.58329,{"cursor":{"x":14}}],[0.001022,{"lines":{"22":[["scala> root.createRelationshipTo                                                          ",{}]]},"cursor":{"x":32}}],[0.9595939999999999,{"lines":{"22":[["scala> root.createRelationshipTo(                                                         ",{}]]},"cursor":{"x":33}}],[1.06721,{"lines":{"22":[["scala> root.createRelationshipTo(n                                                        ",{}]]},"cursor":{"x":34}}],[0.444361,{"lines":{"22":[["scala> root.createRelationshipTo(n)                                                       ",{}]]},"cursor":{"x":35}}],[0.440058,{"cursor":{"x":34}}],[0.00014,{"lines":{"22":[["scala> root.createRelationshipTo(n                                                        ",{}]]}}],[0.25672,{"lines":{"22":[["scala> root.createRelationshipTo(n,                                                       ",{}]]},"cursor":{"x":35}}],[0.030981,{"cursor":{"x":36}}],[0.144487,{"lines":{"22":[["scala> root.createRelationshipTo(n, l                                                     ",{}]]},"cursor":{"x":37}}],[0.071642,{"lines":{"22":[["scala> root.createRelationshipTo(n, li                                                    ",{}]]},"cursor":{"x":38}}],[0.063968,{"lines":{"22":[["scala> root.createRelationshipTo(n, lin                                                   ",{}]]},"cursor":{"x":39}}],[0.10385,{"lines":{"22":[["scala> root.createRelationshipTo(n, link                                                  ",{}]]},"cursor":{"x":40}}],[0.263865,{"lines":{"22":[["scala> root.createRelationshipTo(n, link)                                                 ",{}]]},"cursor":{"x":41}}],[0.264312,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+e)})   ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> // let's make a few more...                                                        ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"6":[["root Node[0]                                                                              ",{}]],"7":[["n Node[1]                                                                                 ",{}]],"8":[["n0 Node[2]                                                                                ",{}]],"9":[["n1 Node[3]                                                                                ",{}]],"10":[["n2 Node[4]                                                                                ",{}]],"11":[["n3 Node[5]                                                                                ",{}]],"12":[["n4 Node[6]                                                                                ",{}]],"13":[["n5 Node[7]                                                                                ",{}]],"14":[["n6 Node[8]                                                                                ",{}]],"15":[["n7 Node[9]                                                                                ",{}]],"16":[["n8 Node[10]                                                                               ",{}]],"17":[["n9 Node[11]                                                                               ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> // let's connect them...                                                           ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> root.createRelationshipTo(n, link)                                                 ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.231821,{"lines":{"0":[["scala> Range(0, 10).foreach(e => {val n = db.createNode; n.setProperty(\"name\", \"n\"+e)})   ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> // let's make a few more...                                                        ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"5":[["root Node[0]                                                                              ",{}]],"6":[["n Node[1]                                                                                 ",{}]],"7":[["n0 Node[2]                                                                                ",{}]],"8":[["n1 Node[3]                                                                                ",{}]],"9":[["n2 Node[4]                                                                                ",{}]],"10":[["n3 Node[5]                                                                                ",{}]],"11":[["n4 Node[6]                                                                                ",{}]],"12":[["n5 Node[7]                                                                                ",{}]],"13":[["n6 Node[8]                                                                                ",{}]],"14":[["n7 Node[9]                                                                                ",{}]],"15":[["n8 Node[10]                                                                               ",{}]],"16":[["n9 Node[11]                                                                               ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> // let's connect them...                                                           ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> root.createRelationshipTo(n, link)                                                 ",{}]],"21":[["res10: org.neo4j.graphdb.Relationship = Relationship[0]                                   ",{}]]}}],[5.3e-05,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> // let's make a few more...                                                        ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"4":[["root Node[0]                                                                              ",{}]],"5":[["n Node[1]                                                                                 ",{}]],"6":[["n0 Node[2]                                                                                ",{}]],"7":[["n1 Node[3]                                                                                ",{}]],"8":[["n2 Node[4]                                                                                ",{}]],"9":[["n3 Node[5]                                                                                ",{}]],"10":[["n4 Node[6]                                                                                ",{}]],"11":[["n5 Node[7]                                                                                ",{}]],"12":[["n6 Node[8]                                                                                ",{}]],"13":[["n7 Node[9]                                                                                ",{}]],"14":[["n8 Node[10]                                                                               ",{}]],"15":[["n9 Node[11]                                                                               ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> // let's connect them...                                                           ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> root.createRelationshipTo(n, link)                                                 ",{}]],"20":[["res10: org.neo4j.graphdb.Relationship = Relationship[0]                                   ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[7.060826,{"lines":{"22":[["scala> v                                                                                  ",{}]]},"cursor":{"x":8}}],[0.083159,{"lines":{"22":[["scala> va                                                                                 ",{}]]},"cursor":{"x":9}}],[0.111861,{"lines":{"22":[["scala> val                                                                                ",{}]]},"cursor":{"x":10}}],[0.08794200000000001,{"cursor":{"x":11}}],[1.22661,{"lines":{"22":[["scala> val t                                                                              ",{}]]},"cursor":{"x":12}}],[0.309387,{"lines":{"22":[["scala> val td                                                                             ",{}]]},"cursor":{"x":13}}],[0.407981,{"cursor":{"x":14}}],[0.255924,{"lines":{"22":[["scala> val td =                                                                           ",{}]]},"cursor":{"x":15}}],[0.074322,{"cursor":{"x":16}}],[0.477771,{"lines":{"22":[["scala> val td = T                                                                         ",{}]]},"cursor":{"x":17}}],[0.416041,{"lines":{"22":[["scala> val td = Tr                                                                        ",{}]]},"cursor":{"x":18}}],[0.138605,{"lines":{"22":[["scala> val td = Tra                                                                       ",{}]]},"cursor":{"x":19}}],[0.149297,{"lines":{"22":[["scala> val td = Trav                                                                      ",{}]]},"cursor":{"x":20}}],[0.175951,{"lines":{"22":[["scala> val td = Trave                                                                     ",{}]]},"cursor":{"x":21}}],[0.07198,{"lines":{"22":[["scala> val td = Traver                                                                    ",{}]]},"cursor":{"x":22}}],[0.144096,{"lines":{"22":[["scala> val td = Travers                                                                   ",{}]]},"cursor":{"x":23}}],[0.819234,{"lines":{"22":[["scala> val td = Traversa                                                                  ",{}]]},"cursor":{"x":24}}],[0.028651,{"lines":{"22":[["scala> val td = Traversal                                                                 ",{}]]},"cursor":{"x":25}}],[0.281263,{"lines":{"22":[["scala> val td = TraversalD                                                                ",{}]]},"cursor":{"x":26}}],[0.191011,{"lines":{"22":[["scala> val td = TraversalDe                                                               ",{}]]},"cursor":{"x":27}}],[0.056665,{"lines":{"22":[["scala> val td = TraversalDes                                                              ",{}]]},"cursor":{"x":28}}],[0.120859,{"lines":{"22":[["scala> val td = TraversalDesc                                                             ",{}]]},"cursor":{"x":29}}],[0.214211,{"lines":{"22":[["scala> val td = TraversalDescr                                                            ",{}]]},"cursor":{"x":30}}],[0.056568,{"lines":{"22":[["scala> val td = TraversalDescri                                                           ",{}]]},"cursor":{"x":31}}],[0.076816,{"lines":{"22":[["scala> val td = TraversalDescrip                                                          ",{}]]},"cursor":{"x":32}}],[0.083814,{"lines":{"22":[["scala> val td = TraversalDescript                                                         ",{}]]},"cursor":{"x":33}}],[0.10334,{"lines":{"22":[["scala> val td = TraversalDescripti                                                        ",{}]]},"cursor":{"x":34}}],[0.06544,{"lines":{"22":[["scala> val td = TraversalDescriptio                                                       ",{}]]},"cursor":{"x":35}}],[0.046507,{"lines":{"22":[["scala> val td = TraversalDescription                                                      ",{}]]},"cursor":{"x":36}}],[0.31963,{"lines":{"22":[["scala> val td = TraversalDescription.                                                     ",{}]]},"cursor":{"x":37}}],[2.246177,{"cursor":{"x":36}}],[0.000157,{"lines":{"22":[["scala> val td = TraversalDescription                                                      ",{}]]}}],[4.702794,{"lines":{"22":[["scala> val td = TraversalDescription.                                                     ",{}]]},"cursor":{"x":37}}],[0.410594,{"lines":{"22":[["scala> val td = TraversalDescription.t                                                    ",{}]]},"cursor":{"x":38}}],[0.391994,{"lines":{"22":[["scala> val td = TraversalDescription.tr                                                   ",{}]]},"cursor":{"x":39}}],[0.160144,{"lines":{"22":[["scala> val td = TraversalDescription.tra                                                  ",{}]]},"cursor":{"x":40}}],[0.162122,{"lines":{"22":[["scala> val td = TraversalDescription.trav                                                 ",{}]]},"cursor":{"x":41}}],[0.133837,{"lines":{"22":[["scala> val td = TraversalDescription.trave                                                ",{}]]},"cursor":{"x":42}}],[0.079885,{"lines":{"22":[["scala> val td = TraversalDescription.traver                                               ",{}]]},"cursor":{"x":43}}],[0.496089,{"lines":{"22":[["scala> val td = TraversalDescription.travere                                              ",{}]]},"cursor":{"x":44}}],[0.491479,{"cursor":{"x":43}}],[4.1e-05,{"lines":{"22":[["scala> val td = TraversalDescription.traver                                               ",{}]]}}],[0.060371,{"lines":{"22":[["scala> val td = TraversalDescription.travers                                              ",{}]]},"cursor":{"x":44}}],[0.055949,{"lines":{"22":[["scala> val td = TraversalDescription.traverse                                             ",{}]]},"cursor":{"x":45}}],[0.664946,{"lines":{"22":[["scala> val td = TraversalDescription.traverse(                                            ",{}]]},"cursor":{"x":46}}],[1.754471,{"lines":{"22":[["scala> val td = TraversalDescription.traverse()                                           ",{}]]},"cursor":{"x":47}}],[0.365098,{"lines":{"0":[["scala> // let's make a few more...                                                        ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> db.getAllNodes.asScala.foreach(n => println(n.getProperty(\"name\") + \" \" + n))      ",{}]],"3":[["root Node[0]                                                                              ",{}]],"4":[["n Node[1]                                                                                 ",{}]],"5":[["n0 Node[2]                                                                                ",{}]],"6":[["n1 Node[3]                                                                                ",{}]],"7":[["n2 Node[4]                                                                                ",{}]],"8":[["n3 Node[5]                                                                                ",{}]],"9":[["n4 Node[6]                                                                                ",{}]],"10":[["n5 Node[7]                                                                                ",{}]],"11":[["n6 Node[8]                                                                                ",{}]],"12":[["n7 Node[9]                                                                                ",{}]],"13":[["n8 Node[10]                                                                               ",{}]],"14":[["n9 Node[11]                                                                               ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> // let's connect them...                                                           ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> root.createRelationshipTo(n, link)                                                 ",{}]],"19":[["res10: org.neo4j.graphdb.Relationship = Relationship[0]                                   ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val td = TraversalDescription.traverse()                                           ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.024737,{"lines":{"0":[["n Node[1]                                                                                 ",{}]],"1":[["n0 Node[2]                                                                                ",{}]],"2":[["n1 Node[3]                                                                                ",{}]],"3":[["n2 Node[4]                                                                                ",{}]],"4":[["n3 Node[5]                                                                                ",{}]],"5":[["n4 Node[6]                                                                                ",{}]],"6":[["n5 Node[7]                                                                                ",{}]],"7":[["n6 Node[8]                                                                                ",{}]],"8":[["n7 Node[9]                                                                                ",{}]],"9":[["n8 Node[10]                                                                               ",{}]],"10":[["n9 Node[11]                                                                               ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> // let's connect them...                                                           ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> root.createRelationshipTo(n, link)                                                 ",{}]],"15":[["res10: org.neo4j.graphdb.Relationship = Relationship[0]                                   ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val td = TraversalDescription.traverse()                                           ",{}]],"18":[["<console>:19: error: value traverse is not a member of object org.neo4j.graphdb.traversal.",{}]],"19":[["TraversalDescription                                                                      ",{}]],"20":[["       val td = TraversalDescription.traverse()                                           ",{}]],"21":[["                                     ^                                                    ",{}]]}}],[0.002616,{"lines":{"0":[["n0 Node[2]                                                                                ",{}]],"1":[["n1 Node[3]                                                                                ",{}]],"2":[["n2 Node[4]                                                                                ",{}]],"3":[["n3 Node[5]                                                                                ",{}]],"4":[["n4 Node[6]                                                                                ",{}]],"5":[["n5 Node[7]                                                                                ",{}]],"6":[["n6 Node[8]                                                                                ",{}]],"7":[["n7 Node[9]                                                                                ",{}]],"8":[["n8 Node[10]                                                                               ",{}]],"9":[["n9 Node[11]                                                                               ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> // let's connect them...                                                           ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> root.createRelationshipTo(n, link)                                                 ",{}]],"14":[["res10: org.neo4j.graphdb.Relationship = Relationship[0]                                   ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val td = TraversalDescription.traverse()                                           ",{}]],"17":[["<console>:19: error: value traverse is not a member of object org.neo4j.graphdb.traversal.",{}]],"18":[["TraversalDescription                                                                      ",{}]],"19":[["       val td = TraversalDescription.traverse()                                           ",{}]],"20":[["                                     ^                                                    ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.228345,{"lines":{"22":[["scala> val td = TraversalDescription.traverse()                                           ",{}]]},"cursor":{"x":47}}],[0.375947,{"cursor":{"x":46}}],[0.000146,{"lines":{"22":[["scala> val td = TraversalDescription.traverse(                                            ",{}]]}}],[0.500715,{"cursor":{"x":45}}],[0.00015,{"lines":{"22":[["scala> val td = TraversalDescription.traverse                                             ",{}]]}}],[0.083984,{"cursor":{"x":44}}],[4.2e-05,{"lines":{"22":[["scala> val td = TraversalDescription.travers                                              ",{}]]}}],[0.094572,{"cursor":{"x":43}}],[0.00013,{"lines":{"22":[["scala> val td = TraversalDescription.traver                                               ",{}]]}}],[0.07285,{"cursor":{"x":42}}],[0.000254,{"lines":{"22":[["scala> val td = TraversalDescription.trave                                                ",{}]]}}],[0.084049,{"cursor":{"x":41}}],[0.000165,{"lines":{"22":[["scala> val td = TraversalDescription.trav                                                 ",{}]]}}],[0.083375,{"cursor":{"x":40}}],[0.000174,{"lines":{"22":[["scala> val td = TraversalDescription.tra                                                  ",{}]]}}],[0.08448700000000001,{"cursor":{"x":39}}],[0.000199,{"lines":{"22":[["scala> val td = TraversalDescription.tr                                                   ",{}]]}}],[0.083297,{"cursor":{"x":38}}],[0.000148,{"lines":{"22":[["scala> val td = TraversalDescription.t                                                    ",{}]]}}],[0.083421,{"cursor":{"x":37}}],[0.000206,{"lines":{"22":[["scala> val td = TraversalDescription.                                                     ",{}]]}}],[0.084133,{"cursor":{"x":36}}],[0.000317,{"lines":{"22":[["scala> val td = TraversalDescription                                                      ",{}]]}}],[0.737773,{"lines":{"22":[["scala> val td = TraversalDescriptionI                                                     ",{}]]},"cursor":{"x":37}}],[0.21313,{"lines":{"22":[["scala> val td = TraversalDescriptionIm                                                    ",{}]]},"cursor":{"x":38}}],[0.064085,{"lines":{"22":[["scala> val td = TraversalDescriptionImp                                                   ",{}]]},"cursor":{"x":39}}],[0.167928,{"lines":{"22":[["scala> val td = TraversalDescriptionImpl                                                  ",{}]]},"cursor":{"x":40}}],[45.265528,{"cursor":{"x":39}}],[7.3e-05,{"lines":{"22":[["scala> val td = TraversalDescriptionImp                                                   ",{}]]}}],[0.482711,{"cursor":{"x":38}}],[0.000266,{"lines":{"22":[["scala> val td = TraversalDescriptionIm                                                    ",{}]]}}],[0.083352,{"cursor":{"x":37}}],[0.000201,{"lines":{"22":[["scala> val td = TraversalDescriptionI                                                     ",{}]]}}],[0.08366999999999999,{"cursor":{"x":36}}],[0.000189,{"lines":{"22":[["scala> val td = TraversalDescription                                                      ",{}]]}}],[0.08357199999999999,{"cursor":{"x":35}}],[0.000174,{"lines":{"22":[["scala> val td = TraversalDescriptio                                                       ",{}]]}}],[0.086059,{"lines":{"22":[["scala> val td = TraversalDescripti                                                        ",{}]]},"cursor":{"x":34}}],[0.084998,{"cursor":{"x":33}}],[4.6e-05,{"lines":{"22":[["scala> val td = TraversalDescript                                                         ",{}]]}}],[0.08200300000000001,{"cursor":{"x":32}}],[0.00014,{"lines":{"22":[["scala> val td = TraversalDescrip                                                          ",{}]]}}],[0.094875,{"cursor":{"x":31}}],[0.000123,{"lines":{"22":[["scala> val td = TraversalDescri                                                           ",{}]]}}],[0.073925,{"cursor":{"x":30}}],[0.000419,{"lines":{"22":[["scala> val td = TraversalDescr                                                            ",{}]]}}],[0.08282399999999999,{"cursor":{"x":29}}],[0.00033,{"lines":{"22":[["scala> val td = TraversalDesc                                                             ",{}]]}}],[0.083007,{"cursor":{"x":28}}],[9.6e-05,{"lines":{"22":[["scala> val td = TraversalDes                                                              ",{}]]}}],[0.084025,{"cursor":{"x":27}}],[0.000171,{"lines":{"22":[["scala> val td = TraversalDe                                                               ",{}]]}}],[0.083646,{"cursor":{"x":26}}],[0.000117,{"lines":{"22":[["scala> val td = TraversalD                                                                ",{}]]}}],[0.084032,{"cursor":{"x":25}}],[0.000215,{"lines":{"22":[["scala> val td = Traversal                                                                 ",{}]]}}],[0.08359,{"cursor":{"x":24}}],[0.000318,{"lines":{"22":[["scala> val td = Traversa                                                                  ",{}]]}}],[0.08310099999999999,{"cursor":{"x":23}}],[0.000125,{"lines":{"22":[["scala> val td = Travers                                                                   ",{}]]}}],[0.083455,{"cursor":{"x":22}}],[0.00011,{"lines":{"22":[["scala> val td = Traver                                                                    ",{}]]}}],[0.08439199999999999,{"cursor":{"x":21}}],[0.000118,{"lines":{"22":[["scala> val td = Trave                                                                     ",{}]]}}],[0.084206,{"cursor":{"x":20}}],[0.000195,{"lines":{"22":[["scala> val td = Trav                                                                      ",{}]]}}],[0.08444599999999999,{"cursor":{"x":19}}],[8.500000000000001e-05,{"lines":{"22":[["scala> val td = Tra                                                                       ",{}]]}}],[0.093667,{"cursor":{"x":18}}],[0.000146,{"lines":{"22":[["scala> val td = Tr                                                                        ",{}]]}}],[0.074543,{"cursor":{"x":17}}],[0.000137,{"lines":{"22":[["scala> val td = T                                                                         ",{}]]}}],[0.083042,{"cursor":{"x":16}}],[0.000122,{"lines":{"22":[["scala> val td =                                                                           ",{}]]}}],[0.09209000000000001,{"lines":{"22":[["scala> val td = d                                                                         ",{}]]},"cursor":{"x":17}}],[0.31934,{"lines":{"22":[["scala> val td = db                                                                        ",{}]]},"cursor":{"x":18}}],[0.032492,{"lines":{"22":[["scala> val td = db.                                                                       ",{}]]},"cursor":{"x":19}}],[0.408819,{"lines":{"22":[["scala> val td = db.t                                                                      ",{}]]},"cursor":{"x":20}}],[0.159234,{"lines":{"22":[["scala> val td = db.tr                                                                     ",{}]]},"cursor":{"x":21}}],[0.054281,{"lines":{"22":[["scala> val td = db.tra                                                                    ",{}]]},"cursor":{"x":22}}],[0.152171,{"lines":{"22":[["scala> val td = db.trav                                                                   ",{}]]},"cursor":{"x":23}}],[0.137216,{"lines":{"22":[["scala> val td = db.trave                                                                  ",{}]]},"cursor":{"x":24}}],[0.078789,{"lines":{"22":[["scala> val td = db.traver                                                                 ",{}]]},"cursor":{"x":25}}],[0.793955,{"cursor":{"x":24}}],[0.003362,{"lines":{"22":[["scala> val td = db.traversalDescription                                                   ",{}]]},"cursor":{"x":39}}],[1.298703,{"lines":{"22":[["scala> val td = db.traversalDescription(                                                  ",{}]]},"cursor":{"x":40}}],[0.057633,{"lines":{"22":[["scala> val td = db.traversalDescription()                                                 ",{}]]},"cursor":{"x":41}}],[2.646457,{"lines":{"0":[["n1 Node[3]                                                                                ",{}]],"1":[["n2 Node[4]                                                                                ",{}]],"2":[["n3 Node[5]                                                                                ",{}]],"3":[["n4 Node[6]                                                                                ",{}]],"4":[["n5 Node[7]                                                                                ",{}]],"5":[["n6 Node[8]                                                                                ",{}]],"6":[["n7 Node[9]                                                                                ",{}]],"7":[["n8 Node[10]                                                                               ",{}]],"8":[["n9 Node[11]                                                                               ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> // let's connect them...                                                           ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> root.createRelationshipTo(n, link)                                                 ",{}]],"13":[["res10: org.neo4j.graphdb.Relationship = Relationship[0]                                   ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val td = TraversalDescription.traverse()                                           ",{}]],"16":[["<console>:19: error: value traverse is not a member of object org.neo4j.graphdb.traversal.",{}]],"17":[["TraversalDescription                                                                      ",{}]],"18":[["       val td = TraversalDescription.traverse()                                           ",{}]],"19":[["                                     ^                                                    ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val td = db.traversalDescription()                                                 ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.198608,{"lines":{"0":[["n3 Node[5]                                                                                ",{}]],"1":[["n4 Node[6]                                                                                ",{}]],"2":[["n5 Node[7]                                                                                ",{}]],"3":[["n6 Node[8]                                                                                ",{}]],"4":[["n7 Node[9]                                                                                ",{}]],"5":[["n8 Node[10]                                                                               ",{}]],"6":[["n9 Node[11]                                                                               ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> // let's connect them...                                                           ",{}]],"10":[["scala> root.createRelationshipTo(n, link)                                                 ",{}]],"11":[["res10: org.neo4j.graphdb.Relationship = Relationship[0]                                   ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val td = TraversalDescription.traverse()                                           ",{}]],"14":[["<console>:19: error: value traverse is not a member of object org.neo4j.graphdb.traversal.",{}]],"15":[["TraversalDescription                                                                      ",{}]],"16":[["       val td = TraversalDescription.traverse()                                           ",{}]],"17":[["                                     ^                                                    ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> val td = db.traversalDescription()                                                 ",{}]],"20":[["td: org.neo4j.graphdb.traversal.TraversalDescription = org.neo4j.kernel.impl.traversal.Tra",{}]],"21":[["versalDescriptionImpl@1cbc165f                                                            ",{}]]}}],[9.3e-05,{"lines":{"0":[["n4 Node[6]                                                                                ",{}]],"1":[["n5 Node[7]                                                                                ",{}]],"2":[["n6 Node[8]                                                                                ",{}]],"3":[["n7 Node[9]                                                                                ",{}]],"4":[["n8 Node[10]                                                                               ",{}]],"5":[["n9 Node[11]                                                                               ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> // let's connect them...                                                           ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> root.createRelationshipTo(n, link)                                                 ",{}]],"10":[["res10: org.neo4j.graphdb.Relationship = Relationship[0]                                   ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> val td = TraversalDescription.traverse()                                           ",{}]],"13":[["<console>:19: error: value traverse is not a member of object org.neo4j.graphdb.traversal.",{}]],"14":[["TraversalDescription                                                                      ",{}]],"15":[["       val td = TraversalDescription.traverse()                                           ",{}]],"16":[["                                     ^                                                    ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val td = db.traversalDescription()                                                 ",{}]],"19":[["td: org.neo4j.graphdb.traversal.TraversalDescription = org.neo4j.kernel.impl.traversal.Tra",{}]],"20":[["versalDescriptionImpl@1cbc165f                                                            ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[2.11211,{"lines":{"22":[["scala> t                                                                                  ",{}]]},"cursor":{"x":8}}],[0.073118,{"lines":{"22":[["scala> td                                                                                 ",{}]]},"cursor":{"x":9}}],[0.120246,{"lines":{"22":[["scala> td.                                                                                ",{}]]},"cursor":{"x":10}}],[0.519519,{"lines":{"22":[["scala> td.t                                                                               ",{}]]},"cursor":{"x":11}}],[0.15435,{"lines":{"22":[["scala> td.tr                                                                              ",{}]]},"cursor":{"x":12}}],[0.061713,{"lines":{"22":[["scala> td.tra                                                                             ",{}]]},"cursor":{"x":13}}],[0.182715,{"lines":{"22":[["scala> td.trav                                                                            ",{}]]},"cursor":{"x":14}}],[0.12918,{"lines":{"22":[["scala> td.trave                                                                           ",{}]]},"cursor":{"x":15}}],[0.104488,{"lines":{"22":[["scala> td.traver                                                                          ",{}]]},"cursor":{"x":16}}],[0.111623,{"lines":{"22":[["scala> td.travers                                                                         ",{}]]},"cursor":{"x":17}}],[0.08815099999999999,{"lines":{"22":[["scala> td.traverse                                                                        ",{}]]},"cursor":{"x":18}}],[0.240332,{"lines":{"22":[["scala> td.traverse(                                                                       ",{}]]},"cursor":{"x":19}}],[0.401748,{"lines":{"22":[["scala> td.traverse(r                                                                      ",{}]]},"cursor":{"x":20}}],[0.054502,{"lines":{"22":[["scala> td.traverse(ro                                                                     ",{}]]},"cursor":{"x":21}}],[0.119176,{"lines":{"22":[["scala> td.traverse(roo                                                                    ",{}]]},"cursor":{"x":22}}],[0.08787,{"lines":{"22":[["scala> td.traverse(root                                                                   ",{}]]},"cursor":{"x":23}}],[0.160502,{"lines":{"22":[["scala> td.traverse(root)                                                                  ",{}]]},"cursor":{"x":24}}],[0.167575,{"lines":{"0":[["n5 Node[7]                                                                                ",{}]],"1":[["n6 Node[8]                                                                                ",{}]],"2":[["n7 Node[9]                                                                                ",{}]],"3":[["n8 Node[10]                                                                               ",{}]],"4":[["n9 Node[11]                                                                               ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> // let's connect them...                                                           ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> root.createRelationshipTo(n, link)                                                 ",{}]],"9":[["res10: org.neo4j.graphdb.Relationship = Relationship[0]                                   ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val td = TraversalDescription.traverse()                                           ",{}]],"12":[["<console>:19: error: value traverse is not a member of object org.neo4j.graphdb.traversal.",{}]],"13":[["TraversalDescription                                                                      ",{}]],"14":[["       val td = TraversalDescription.traverse()                                           ",{}]],"15":[["                                     ^                                                    ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val td = db.traversalDescription()                                                 ",{}]],"18":[["td: org.neo4j.graphdb.traversal.TraversalDescription = org.neo4j.kernel.impl.traversal.Tra",{}]],"19":[["versalDescriptionImpl@1cbc165f                                                            ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> td.traverse(root)                                                                  ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.200936,{"lines":{"0":[["n7 Node[9]                                                                                ",{}]],"1":[["n8 Node[10]                                                                               ",{}]],"2":[["n9 Node[11]                                                                               ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> // let's connect them...                                                           ",{}]],"6":[["scala> root.createRelationshipTo(n, link)                                                 ",{}]],"7":[["res10: org.neo4j.graphdb.Relationship = Relationship[0]                                   ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val td = TraversalDescription.traverse()                                           ",{}]],"10":[["<console>:19: error: value traverse is not a member of object org.neo4j.graphdb.traversal.",{}]],"11":[["TraversalDescription                                                                      ",{}]],"12":[["       val td = TraversalDescription.traverse()                                           ",{}]],"13":[["                                     ^                                                    ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val td = db.traversalDescription()                                                 ",{}]],"16":[["td: org.neo4j.graphdb.traversal.TraversalDescription = org.neo4j.kernel.impl.traversal.Tra",{}]],"17":[["versalDescriptionImpl@1cbc165f                                                            ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> td.traverse(root)                                                                  ",{}]],"20":[["res11: org.neo4j.graphdb.traversal.Traverser = org.neo4j.kernel.impl.traversal.TraverserIm",{}]],"21":[["pl@83cf055                                                                                ",{}]]}}],[0.000106,{"lines":{"0":[["n8 Node[10]                                                                               ",{}]],"1":[["n9 Node[11]                                                                               ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> // let's connect them...                                                           ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> root.createRelationshipTo(n, link)                                                 ",{}]],"6":[["res10: org.neo4j.graphdb.Relationship = Relationship[0]                                   ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val td = TraversalDescription.traverse()                                           ",{}]],"9":[["<console>:19: error: value traverse is not a member of object org.neo4j.graphdb.traversal.",{}]],"10":[["TraversalDescription                                                                      ",{}]],"11":[["       val td = TraversalDescription.traverse()                                           ",{}]],"12":[["                                     ^                                                    ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val td = db.traversalDescription()                                                 ",{}]],"15":[["td: org.neo4j.graphdb.traversal.TraversalDescription = org.neo4j.kernel.impl.traversal.Tra",{}]],"16":[["versalDescriptionImpl@1cbc165f                                                            ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> td.traverse(root)                                                                  ",{}]],"19":[["res11: org.neo4j.graphdb.traversal.Traverser = org.neo4j.kernel.impl.traversal.TraverserIm",{}]],"20":[["pl@83cf055                                                                                ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.6498,{"lines":{"22":[["scala> td.traverse(root)                                                                  ",{}]]},"cursor":{"x":24}}],[0.461118,{"lines":{"22":[["scala> td.traverse(root).                                                                 ",{}]]},"cursor":{"x":25}}],[0.5212329999999999,{"lines":{"22":[["scala> td.traverse(root).a                                                                ",{}]]},"cursor":{"x":26}}],[0.08909499999999999,{"lines":{"22":[["scala> td.traverse(root).as                                                               ",{}]]},"cursor":{"x":27}}],[0.333594,{"lines":{"22":[["scala> td.traverse(root).asS                                                              ",{}]]},"cursor":{"x":28}}],[0.191971,{"lines":{"22":[["scala> td.traverse(root).asSc                                                             ",{}]]},"cursor":{"x":29}}],[0.088209,{"lines":{"22":[["scala> td.traverse(root).asSca                                                            ",{}]]},"cursor":{"x":30}}],[0.119843,{"lines":{"22":[["scala> td.traverse(root).asScal                                                           ",{}]]},"cursor":{"x":31}}],[0.080174,{"lines":{"22":[["scala> td.traverse(root).asScala                                                          ",{}]]},"cursor":{"x":32}}],[2.220296,{"lines":{"22":[["scala> td.traverse(root).asScala.                                                         ",{}]]},"cursor":{"x":33}}],[0.580716,{"lines":{"22":[["scala> td.traverse(root).asScala.f                                                        ",{}]]},"cursor":{"x":34}}],[0.095317,{"lines":{"22":[["scala> td.traverse(root).asScala.fo                                                       ",{}]]},"cursor":{"x":35}}],[0.09582300000000001,{"lines":{"22":[["scala> td.traverse(root).asScala.for                                                      ",{}]]},"cursor":{"x":36}}],[0.08008,{"lines":{"22":[["scala> td.traverse(root).asScala.fore                                                     ",{}]]},"cursor":{"x":37}}],[0.087952,{"lines":{"22":[["scala> td.traverse(root).asScala.forea                                                    ",{}]]},"cursor":{"x":38}}],[0.129398,{"lines":{"22":[["scala> td.traverse(root).asScala.foreac                                                   ",{}]]},"cursor":{"x":39}}],[0.079912,{"lines":{"22":[["scala> td.traverse(root).asScala.foreach                                                  ",{}]]},"cursor":{"x":40}}],[0.455083,{"lines":{"22":[["scala> td.traverse(root).asScala.foreach(                                                 ",{}]]},"cursor":{"x":41}}],[2.693769,{"cursor":{"x":40}}],[0.485957,{"cursor":{"x":39}}],[0.08413,{"cursor":{"x":38}}],[0.083602,{"cursor":{"x":37}}],[0.083992,{"cursor":{"x":36}}],[0.084134,{"cursor":{"x":35}}],[0.083456,{"cursor":{"x":34}}],[0.08336399999999999,{"cursor":{"x":33}}],[0.09454600000000001,{"cursor":{"x":32}}],[0.072658,{"cursor":{"x":31}}],[0.084055,{"cursor":{"x":30}}],[0.08308,{"cursor":{"x":29}}],[0.084024,{"cursor":{"x":28}}],[0.083424,{"cursor":{"x":27}}],[0.08348800000000001,{"cursor":{"x":26}}],[0.083857,{"cursor":{"x":25}}],[0.587564,{"lines":{"22":[["scala> td.traverse(root).iasScala.foreach(                                                ",{}]]},"cursor":{"x":26}}],[0.045155,{"lines":{"22":[["scala> td.traverse(root).itasScala.foreach(                                               ",{}]]},"cursor":{"x":27}}],[0.17639,{"lines":{"22":[["scala> td.traverse(root).iteasScala.foreach(                                              ",{}]]},"cursor":{"x":28}}],[0.054416,{"lines":{"22":[["scala> td.traverse(root).iterasScala.foreach(                                             ",{}]]},"cursor":{"x":29}}],[0.129446,{"lines":{"22":[["scala> td.traverse(root).iteraasScala.foreach(                                            ",{}]]},"cursor":{"x":30}}],[0.070684,{"lines":{"22":[["scala> td.traverse(root).iteratasScala.foreach(                                           ",{}]]},"cursor":{"x":31}}],[0.071837,{"lines":{"22":[["scala> td.traverse(root).iteratoasScala.foreach(                                          ",{}]]},"cursor":{"x":32}}],[0.112021,{"lines":{"22":[["scala> td.traverse(root).iteratorasScala.foreach(                                         ",{}]]},"cursor":{"x":33}}],[0.313672,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(                                        ",{}]]},"cursor":{"x":34}}],[0.5491470000000001,{"cursor":{"x":50}}],[1.828399,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(p                                       ",{}]]},"cursor":{"x":51}}],[0.077418,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(pr                                      ",{}]]},"cursor":{"x":52}}],[0.087504,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(pri                                     ",{}]]},"cursor":{"x":53}}],[0.049866,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(prin                                    ",{}]]},"cursor":{"x":54}}],[0.085845,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(print                                   ",{}]]},"cursor":{"x":55}}],[0.072951,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(printl                                  ",{}]]},"cursor":{"x":56}}],[0.088325,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println                                 ",{}]]},"cursor":{"x":57}}],[0.222837,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(                                ",{}]]},"cursor":{"x":58}}],[0.394618,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_                               ",{}]]},"cursor":{"x":59}}],[0.38175,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_)                              ",{}]]},"cursor":{"x":60}}],[0.152568,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.270962,{"lines":{"0":[["n9 Node[11]                                                                               ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> // let's connect them...                                                           ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> root.createRelationshipTo(n, link)                                                 ",{}]],"5":[["res10: org.neo4j.graphdb.Relationship = Relationship[0]                                   ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val td = TraversalDescription.traverse()                                           ",{}]],"8":[["<console>:19: error: value traverse is not a member of object org.neo4j.graphdb.traversal.",{}]],"9":[["TraversalDescription                                                                      ",{}]],"10":[["       val td = TraversalDescription.traverse()                                           ",{}]],"11":[["                                     ^                                                    ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val td = db.traversalDescription()                                                 ",{}]],"14":[["td: org.neo4j.graphdb.traversal.TraversalDescription = org.neo4j.kernel.impl.traversal.Tra",{}]],"15":[["versalDescriptionImpl@1cbc165f                                                            ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> td.traverse(root)                                                                  ",{}]],"18":[["res11: org.neo4j.graphdb.traversal.Traverser = org.neo4j.kernel.impl.traversal.TraverserIm",{}]],"19":[["pl@83cf055                                                                                ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.223622,{"lines":{"22":[["(0)                                                                                       ",{}]]},"cursor":{"x":3}}],[0.006852,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> root.createRelationshipTo(n, link)                                                 ",{}]],"2":[["res10: org.neo4j.graphdb.Relationship = Relationship[0]                                   ",{}]],"4":[["scala> val td = TraversalDescription.traverse()                                           ",{}]],"5":[["<console>:19: error: value traverse is not a member of object org.neo4j.graphdb.traversal.",{}]],"6":[["TraversalDescription                                                                      ",{}]],"7":[["       val td = TraversalDescription.traverse()                                           ",{}]],"8":[["                                     ^                                                    ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val td = db.traversalDescription()                                                 ",{}]],"11":[["td: org.neo4j.graphdb.traversal.TraversalDescription = org.neo4j.kernel.impl.traversal.Tra",{}]],"12":[["versalDescriptionImpl@1cbc165f                                                            ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> td.traverse(root)                                                                  ",{}]],"15":[["res11: org.neo4j.graphdb.traversal.Traverser = org.neo4j.kernel.impl.traversal.TraverserIm",{}]],"16":[["pl@83cf055                                                                                ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"19":[["(0)                                                                                       ",{}]],"20":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[5.323243,{"lines":{"22":[["scala> /                                                                                  ",{}]]},"cursor":{"x":8}}],[0.119436,{"lines":{"22":[["scala> //                                                                                 ",{}]]},"cursor":{"x":9}}],[0.087021,{"cursor":{"x":10}}],[0.407662,{"lines":{"22":[["scala> // c                                                                               ",{}]]},"cursor":{"x":11}}],[0.079905,{"lines":{"22":[["scala> // co                                                                              ",{}]]},"cursor":{"x":12}}],[0.120197,{"lines":{"22":[["scala> // coo                                                                             ",{}]]},"cursor":{"x":13}}],[0.201934,{"lines":{"22":[["scala> // cool                                                                            ",{}]]},"cursor":{"x":14}}],[0.174487,{"lines":{"22":[["scala> // cool.                                                                           ",{}]]},"cursor":{"x":15}}],[0.053282,{"cursor":{"x":16}}],[0.146802,{"lines":{"22":[["scala> // cool. l                                                                         ",{}]]},"cursor":{"x":17}}],[0.087496,{"lines":{"22":[["scala> // cool. le                                                                        ",{}]]},"cursor":{"x":18}}],[0.048972,{"lines":{"22":[["scala> // cool. let                                                                       ",{}]]},"cursor":{"x":19}}],[0.071018,{"lines":{"22":[["scala> // cool. let'                                                                      ",{}]]},"cursor":{"x":20}}],[0.105327,{"lines":{"22":[["scala> // cool. let's                                                                     ",{}]]},"cursor":{"x":21}}],[0.056236,{"cursor":{"x":22}}],[0.09513000000000001,{"lines":{"22":[["scala> // cool. let's l                                                                   ",{}]]},"cursor":{"x":23}}],[0.08829099999999999,{"lines":{"22":[["scala> // cool. let's li                                                                  ",{}]]},"cursor":{"x":24}}],[0.101663,{"lines":{"22":[["scala> // cool. let's lin                                                                 ",{}]]},"cursor":{"x":25}}],[0.057624,{"lines":{"22":[["scala> // cool. let's link                                                                ",{}]]},"cursor":{"x":26}}],[0.127759,{"cursor":{"x":27}}],[0.008645,{"lines":{"22":[["scala> // cool. let's link a                                                              ",{}]]},"cursor":{"x":28}}],[0.143224,{"cursor":{"x":29}}],[0.047688,{"lines":{"22":[["scala> // cool. let's link a f                                                            ",{}]]},"cursor":{"x":30}}],[0.056833,{"lines":{"22":[["scala> // cool. let's link a fe                                                           ",{}]]},"cursor":{"x":31}}],[0.07958,{"lines":{"22":[["scala> // cool. let's link a few                                                          ",{}]]},"cursor":{"x":32}}],[0.047988,{"cursor":{"x":33}}],[0.114207,{"lines":{"22":[["scala> // cool. let's link a few m                                                        ",{}]]},"cursor":{"x":34}}],[0.053801,{"lines":{"22":[["scala> // cool. let's link a few mo                                                       ",{}]]},"cursor":{"x":35}}],[0.096385,{"lines":{"22":[["scala> // cool. let's link a few mor                                                      ",{}]]},"cursor":{"x":36}}],[0.063403,{"lines":{"22":[["scala> // cool. let's link a few more                                                     ",{}]]},"cursor":{"x":37}}],[0.140421,{"lines":{"22":[["scala> // cool. let's link a few more.                                                    ",{}]]},"cursor":{"x":38}}],[0.116149,{"lines":{"22":[["scala> // cool. let's link a few more..                                                   ",{}]]},"cursor":{"x":39}}],[0.223686,{"lines":{"0":[["scala> root.createRelationshipTo(n, link)                                                 ",{}]],"1":[["res10: org.neo4j.graphdb.Relationship = Relationship[0]                                   ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val td = TraversalDescription.traverse()                                           ",{}]],"4":[["<console>:19: error: value traverse is not a member of object org.neo4j.graphdb.traversal.",{}]],"5":[["TraversalDescription                                                                      ",{}]],"6":[["       val td = TraversalDescription.traverse()                                           ",{}]],"7":[["                                     ^                                                    ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val td = db.traversalDescription()                                                 ",{}]],"10":[["td: org.neo4j.graphdb.traversal.TraversalDescription = org.neo4j.kernel.impl.traversal.Tra",{}]],"11":[["versalDescriptionImpl@1cbc165f                                                            ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> td.traverse(root)                                                                  ",{}]],"14":[["res11: org.neo4j.graphdb.traversal.Traverser = org.neo4j.kernel.impl.traversal.TraverserIm",{}]],"15":[["pl@83cf055                                                                                ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"18":[["(0)                                                                                       ",{}]],"19":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> // cool. let's link a few more..                                                   ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.000468,{"lines":{"0":[["res10: org.neo4j.graphdb.Relationship = Relationship[0]                                   ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val td = TraversalDescription.traverse()                                           ",{}]],"3":[["<console>:19: error: value traverse is not a member of object org.neo4j.graphdb.traversal.",{}]],"4":[["TraversalDescription                                                                      ",{}]],"5":[["       val td = TraversalDescription.traverse()                                           ",{}]],"6":[["                                     ^                                                    ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val td = db.traversalDescription()                                                 ",{}]],"9":[["td: org.neo4j.graphdb.traversal.TraversalDescription = org.neo4j.kernel.impl.traversal.Tra",{}]],"10":[["versalDescriptionImpl@1cbc165f                                                            ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> td.traverse(root)                                                                  ",{}]],"13":[["res11: org.neo4j.graphdb.traversal.Traverser = org.neo4j.kernel.impl.traversal.TraverserIm",{}]],"14":[["pl@83cf055                                                                                ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"17":[["(0)                                                                                       ",{}]],"18":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> // cool. let's link a few more..                                                   ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[0.591772,{"lines":{"22":[["scala> // cool. let's link a few more..                                                   ",{}]]},"cursor":{"x":39}}],[0.155586,{"cursor":{"x":7}}],[0.000313,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.451898,{"cursor":{"x":24}}],[0.00016,{"lines":{"22":[["scala> td.traverse(root)                                                                  ",{}]]}}],[0.143927,{"cursor":{"x":7}}],[0.000349,{"lines":{"22":[["scala> val td = db.traversalDescription()                                                 ",{}]]},"cursor":{"x":41}}],[0.160727,{"cursor":{"x":16}}],[0.000246,{"lines":{"22":[["scala> val td = TraversalDescription.traverse()                                           ",{}]]},"cursor":{"x":47}}],[0.626127,{"cursor":{"x":16}}],[0.000198,{"lines":{"22":[["scala> val td = db.traversalDescription()                                                 ",{}]]},"cursor":{"x":41}}],[0.332528,{"cursor":{"x":16}}],[0.000335,{"lines":{"22":[["scala> val td = TraversalDescription.traverse()                                           ",{}]]},"cursor":{"x":47}}],[0.127203,{"cursor":{"x":7}}],[0.000354,{"lines":{"22":[["scala> root.createRelationshipTo(n, link)                                                 ",{}]]},"cursor":{"x":41}}],[1.514088,{"cursor":{"x":40}}],[0.490026,{"cursor":{"x":39}}],[0.083841,{"cursor":{"x":38}}],[0.08345900000000001,{"cursor":{"x":37}}],[0.083052,{"cursor":{"x":36}}],[0.08455500000000001,{"cursor":{"x":35}}],[0.08318,{"cursor":{"x":34}}],[0.5955780000000001,{"cursor":{"x":33}}],[0.000226,{"lines":{"22":[["scala> root.createRelationshipTo(, link)                                                  ",{}]]}}],[0.09425500000000001,{"lines":{"22":[["scala> root.createRelationshipTo(d, link)                                                 ",{}]]},"cursor":{"x":34}}],[0.1756,{"lines":{"22":[["scala> root.createRelationshipTo(db, link)                                                ",{}]]},"cursor":{"x":35}}],[0.06364599999999999,{"lines":{"22":[["scala> root.createRelationshipTo(db., link)                                               ",{}]]},"cursor":{"x":36}}],[0.945901,{"lines":{"22":[["scala> root.createRelationshipTo(db.g, link)                                              ",{}]]},"cursor":{"x":37}}],[0.1341,{"lines":{"22":[["scala> root.createRelationshipTo(db.ge, link)                                             ",{}]]},"cursor":{"x":38}}],[0.056229,{"lines":{"22":[["scala> root.createRelationshipTo(db.get, link)                                            ",{}]]},"cursor":{"x":39}}],[0.225763,{"lines":{"22":[["scala> root.createRelationshipTo(db.getN, link)                                           ",{}]]},"cursor":{"x":40}}],[0.110434,{"lines":{"22":[["scala> root.createRelationshipTo(db.getNo, link)                                          ",{}]]},"cursor":{"x":41}}],[0.088898,{"lines":{"22":[["scala> root.createRelationshipTo(db.getNod, link)                                         ",{}]]},"cursor":{"x":42}}],[0.160045,{"lines":{"22":[["scala> root.createRelationshipTo(db.getNode, link)                                        ",{}]]},"cursor":{"x":43}}],[0.223751,{"lines":{"22":[["scala> root.createRelationshipTo(db.getNodeB, link)                                       ",{}]]},"cursor":{"x":44}}],[0.161038,{"lines":{"22":[["scala> root.createRelationshipTo(db.getNodeBy, link)                                      ",{}]]},"cursor":{"x":45}}],[0.208327,{"lines":{"22":[["scala> root.createRelationshipTo(db.getNodeByI, link)                                     ",{}]]},"cursor":{"x":46}}],[0.157835,{"lines":{"22":[["scala> root.createRelationshipTo(db.getNodeById, link)                                    ",{}]]},"cursor":{"x":47}}],[0.168854,{"lines":{"22":[["scala> root.createRelationshipTo(db.getNodeById(, link)                                   ",{}]]},"cursor":{"x":48}}],[0.7883250000000001,{"lines":{"22":[["scala> root.createRelationshipTo(db.getNodeById(2, link)                                  ",{}]]},"cursor":{"x":49}}],[0.388117,{"lines":{"22":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]]},"cursor":{"x":50}}],[0.534832,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> val td = TraversalDescription.traverse()                                           ",{}]],"2":[["<console>:19: error: value traverse is not a member of object org.neo4j.graphdb.traversal.",{}]],"3":[["TraversalDescription                                                                      ",{}]],"4":[["       val td = TraversalDescription.traverse()                                           ",{}]],"5":[["                                     ^                                                    ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val td = db.traversalDescription()                                                 ",{}]],"8":[["td: org.neo4j.graphdb.traversal.TraversalDescription = org.neo4j.kernel.impl.traversal.Tra",{}]],"9":[["versalDescriptionImpl@1cbc165f                                                            ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> td.traverse(root)                                                                  ",{}]],"12":[["res11: org.neo4j.graphdb.traversal.Traverser = org.neo4j.kernel.impl.traversal.TraverserIm",{}]],"13":[["pl@83cf055                                                                                ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"16":[["(0)                                                                                       ",{}]],"17":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> // cool. let's link a few more..                                                   ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.210719,{"lines":{"0":[["<console>:19: error: value traverse is not a member of object org.neo4j.graphdb.traversal.",{}]],"1":[["TraversalDescription                                                                      ",{}]],"2":[["       val td = TraversalDescription.traverse()                                           ",{}]],"3":[["                                     ^                                                    ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val td = db.traversalDescription()                                                 ",{}]],"6":[["td: org.neo4j.graphdb.traversal.TraversalDescription = org.neo4j.kernel.impl.traversal.Tra",{}]],"7":[["versalDescriptionImpl@1cbc165f                                                            ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> td.traverse(root)                                                                  ",{}]],"10":[["res11: org.neo4j.graphdb.traversal.Traverser = org.neo4j.kernel.impl.traversal.TraverserIm",{}]],"11":[["pl@83cf055                                                                                ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"14":[["(0)                                                                                       ",{}]],"15":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> // cool. let's link a few more..                                                   ",{}]],"19":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]],"20":[["res13: org.neo4j.graphdb.Relationship = Relationship[1]                                   ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[0.919632,{"lines":{"22":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]]},"cursor":{"x":57}}],[0.277159,{"cursor":{"x":56}}],[0.161304,{"cursor":{"x":55}}],[0.118743,{"cursor":{"x":54}}],[0.135985,{"cursor":{"x":53}}],[0.135889,{"cursor":{"x":52}}],[0.136039,{"cursor":{"x":51}}],[0.147052,{"cursor":{"x":50}}],[0.132934,{"cursor":{"x":49}}],[0.336221,{"cursor":{"x":48}}],[0.000203,{"lines":{"22":[["scala> root.createRelationshipTo(db.getNodeById(), link)                                  ",{}]]}}],[0.095626,{"lines":{"22":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]]},"cursor":{"x":49}}],[0.452224,{"lines":{"0":[["TraversalDescription                                                                      ",{}]],"1":[["       val td = TraversalDescription.traverse()                                           ",{}]],"2":[["                                     ^                                                    ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> val td = db.traversalDescription()                                                 ",{}]],"5":[["td: org.neo4j.graphdb.traversal.TraversalDescription = org.neo4j.kernel.impl.traversal.Tra",{}]],"6":[["versalDescriptionImpl@1cbc165f                                                            ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> td.traverse(root)                                                                  ",{}]],"9":[["res11: org.neo4j.graphdb.traversal.Traverser = org.neo4j.kernel.impl.traversal.TraverserIm",{}]],"10":[["pl@83cf055                                                                                ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"13":[["(0)                                                                                       ",{}]],"14":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> // cool. let's link a few more..                                                   ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]],"19":[["res13: org.neo4j.graphdb.Relationship = Relationship[1]                                   ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.182475,{"lines":{"0":[["scala> val td = db.traversalDescription()                                                 ",{}]],"1":[["td: org.neo4j.graphdb.traversal.TraversalDescription = org.neo4j.kernel.impl.traversal.Tra",{}]],"2":[["versalDescriptionImpl@1cbc165f                                                            ",{}]],"4":[["scala> td.traverse(root)                                                                  ",{}]],"5":[["res11: org.neo4j.graphdb.traversal.Traverser = org.neo4j.kernel.impl.traversal.TraverserIm",{}]],"6":[["pl@83cf055                                                                                ",{}]],"8":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"9":[["(0)                                                                                       ",{}]],"10":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"12":[["scala> // cool. let's link a few more..                                                   ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]],"15":[["res13: org.neo4j.graphdb.Relationship = Relationship[1]                                   ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]],"18":[["res14: org.neo4j.graphdb.Relationship = Relationship[2]                                   ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala>                                                                                    ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[0.477749,{"lines":{"22":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]]},"cursor":{"x":57}}],[0.136927,{"cursor":{"x":48}}],[0.000554,{"lines":{"22":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]]},"cursor":{"x":57}}],[0.308913,{"lines":{"22":[["scala> // cool. let's link a few more..                                                   ",{}]]},"cursor":{"x":39}}],[0.393495,{"cursor":{"x":7}}],[0.000382,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.711371,{"lines":{"0":[["td: org.neo4j.graphdb.traversal.TraversalDescription = org.neo4j.kernel.impl.traversal.Tra",{}]],"1":[["versalDescriptionImpl@1cbc165f                                                            ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> td.traverse(root)                                                                  ",{}]],"4":[["res11: org.neo4j.graphdb.traversal.Traverser = org.neo4j.kernel.impl.traversal.TraverserIm",{}]],"5":[["pl@83cf055                                                                                ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"8":[["(0)                                                                                       ",{}]],"9":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> // cool. let's link a few more..                                                   ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]],"14":[["res13: org.neo4j.graphdb.Relationship = Relationship[1]                                   ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]],"17":[["res14: org.neo4j.graphdb.Relationship = Relationship[2]                                   ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala>                                                                                    ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.231323,{"lines":{"0":[["versalDescriptionImpl@1cbc165f                                                            ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> td.traverse(root)                                                                  ",{}]],"3":[["res11: org.neo4j.graphdb.traversal.Traverser = org.neo4j.kernel.impl.traversal.TraverserIm",{}]],"4":[["pl@83cf055                                                                                ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"7":[["(0)                                                                                       ",{}]],"8":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> // cool. let's link a few more..                                                   ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]],"13":[["res13: org.neo4j.graphdb.Relationship = Relationship[1]                                   ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]],"16":[["res14: org.neo4j.graphdb.Relationship = Relationship[2]                                   ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala>                                                                                    ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"21":[["(0)                                                                                       ",{}]]}}],[0.000453,{"lines":{"0":[["pl@83cf055                                                                                ",{}]],"2":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"3":[["(0)                                                                                       ",{}]],"4":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"6":[["scala> // cool. let's link a few more..                                                   ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]],"9":[["res13: org.neo4j.graphdb.Relationship = Relationship[1]                                   ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]],"12":[["res14: org.neo4j.graphdb.Relationship = Relationship[2]                                   ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala>                                                                                    ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"17":[["(0)                                                                                       ",{}]],"18":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"19":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"20":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.771594,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.109168,{"cursor":{"x":7}}],[0.000357,{"lines":{"22":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]]},"cursor":{"x":57}}],[2.192386,{"cursor":{"x":7}}],[0.000874,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.110848,{"cursor":{"x":7}}],[0.000173,{"lines":{"22":[["scala>                                                                                    ",{}]]}}],[0.616023,{"lines":{"22":[["scala> v                                                                                  ",{}]]},"cursor":{"x":8}}],[0.094724,{"lines":{"22":[["scala> va                                                                                 ",{}]]},"cursor":{"x":9}}],[0.095635,{"lines":{"22":[["scala> val                                                                                ",{}]]},"cursor":{"x":10}}],[0.024017,{"cursor":{"x":11}}],[0.331908,{"lines":{"22":[["scala> val n                                                                              ",{}]]},"cursor":{"x":12}}],[0.924855,{"lines":{"22":[["scala> val n3                                                                             ",{}]]},"cursor":{"x":13}}],[0.715834,{"cursor":{"x":14}}],[0.131486,{"lines":{"22":[["scala> val n3 =                                                                           ",{}]]},"cursor":{"x":15}}],[0.055525,{"cursor":{"x":16}}],[1.051833,{"lines":{"22":[["scala> val n3 = d                                                                         ",{}]]},"cursor":{"x":17}}],[0.188777,{"lines":{"22":[["scala> val n3 = db                                                                        ",{}]]},"cursor":{"x":18}}],[0.095702,{"lines":{"22":[["scala> val n3 = db.                                                                       ",{}]]},"cursor":{"x":19}}],[0.321289,{"lines":{"22":[["scala> val n3 = db.g                                                                      ",{}]]},"cursor":{"x":20}}],[0.111246,{"lines":{"22":[["scala> val n3 = db.ge                                                                     ",{}]]},"cursor":{"x":21}}],[0.079572,{"lines":{"22":[["scala> val n3 = db.get                                                                    ",{}]]},"cursor":{"x":22}}],[0.200002,{"lines":{"22":[["scala> val n3 = db.getN                                                                   ",{}]]},"cursor":{"x":23}}],[0.129616,{"lines":{"22":[["scala> val n3 = db.getNo                                                                  ",{}]]},"cursor":{"x":24}}],[0.070766,{"lines":{"22":[["scala> val n3 = db.getNod                                                                 ",{}]]},"cursor":{"x":25}}],[0.143607,{"lines":{"22":[["scala> val n3 = db.getNode                                                                ",{}]]},"cursor":{"x":26}}],[0.224332,{"lines":{"22":[["scala> val n3 = db.getNodeB                                                               ",{}]]},"cursor":{"x":27}}],[0.128023,{"lines":{"22":[["scala> val n3 = db.getNodeBy                                                              ",{}]]},"cursor":{"x":28}}],[0.208692,{"lines":{"22":[["scala> val n3 = db.getNodeByI                                                             ",{}]]},"cursor":{"x":29}}],[0.127198,{"lines":{"22":[["scala> val n3 = db.getNodeById                                                            ",{}]]},"cursor":{"x":30}}],[0.315194,{"lines":{"22":[["scala> val n3 = db.getNodeById(                                                           ",{}]]},"cursor":{"x":31}}],[0.916867,{"lines":{"22":[["scala> val n3 = db.getNodeById(3                                                          ",{}]]},"cursor":{"x":32}}],[0.289381,{"lines":{"22":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]]},"cursor":{"x":33}}],[0.93496,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"2":[["(0)                                                                                       ",{}]],"3":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> // cool. let's link a few more..                                                   ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]],"8":[["res13: org.neo4j.graphdb.Relationship = Relationship[1]                                   ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]],"11":[["res14: org.neo4j.graphdb.Relationship = Relationship[2]                                   ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala>                                                                                    ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"16":[["(0)                                                                                       ",{}]],"17":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"18":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"19":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.177421,{"lines":{"0":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"1":[["(0)                                                                                       ",{}]],"2":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> // cool. let's link a few more..                                                   ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]],"7":[["res13: org.neo4j.graphdb.Relationship = Relationship[1]                                   ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]],"10":[["res14: org.neo4j.graphdb.Relationship = Relationship[2]                                   ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala>                                                                                    ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"15":[["(0)                                                                                       ",{}]],"16":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"17":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"18":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]],"21":[["n3: org.neo4j.graphdb.Node = Node[3]                                                      ",{}]]}}],[8.1e-05,{"lines":{"0":[["(0)                                                                                       ",{}]],"1":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> // cool. let's link a few more..                                                   ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]],"6":[["res13: org.neo4j.graphdb.Relationship = Relationship[1]                                   ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]],"9":[["res14: org.neo4j.graphdb.Relationship = Relationship[2]                                   ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala>                                                                                    ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"14":[["(0)                                                                                       ",{}]],"15":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"16":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"17":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]],"20":[["n3: org.neo4j.graphdb.Node = Node[3]                                                      ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.729537,{"lines":{"22":[["scala> n                                                                                  ",{}]]},"cursor":{"x":8}}],[0.188362,{"lines":{"22":[["scala> n3                                                                                 ",{}]]},"cursor":{"x":9}}],[0.120186,{"lines":{"22":[["scala> n3.                                                                                ",{}]]},"cursor":{"x":10}}],[0.272416,{"lines":{"22":[["scala> n3.c                                                                               ",{}]]},"cursor":{"x":11}}],[0.168385,{"lines":{"22":[["scala> n3.cr                                                                              ",{}]]},"cursor":{"x":12}}],[0.07521799999999999,{"lines":{"22":[["scala> n3.cre                                                                             ",{}]]},"cursor":{"x":13}}],[0.714048,{"lines":{"22":[["scala> n3.cr                                                                              ",{}]]},"cursor":{"x":11}}],[0.000507,{"lines":{"22":[["scala> n3.createRelationshipTo                                                            ",{}]]},"cursor":{"x":30}}],[0.9772,{"lines":{"22":[["scala> n3.createRelationshipTo(                                                           ",{}]]},"cursor":{"x":31}}],[1.262275,{"lines":{"22":[["scala> n3.createRelationshipTo(d                                                          ",{}]]},"cursor":{"x":32}}],[0.153246,{"lines":{"22":[["scala> n3.createRelationshipTo(db                                                         ",{}]]},"cursor":{"x":33}}],[0.113451,{"lines":{"22":[["scala> n3.createRelationshipTo(db.                                                        ",{}]]},"cursor":{"x":34}}],[1.003285,{"lines":{"22":[["scala> n3.createRelationshipTo(db.g                                                       ",{}]]},"cursor":{"x":35}}],[0.115889,{"lines":{"22":[["scala> n3.createRelationshipTo(db.ge                                                      ",{}]]},"cursor":{"x":36}}],[0.08751299999999999,{"lines":{"22":[["scala> n3.createRelationshipTo(db.get                                                     ",{}]]},"cursor":{"x":37}}],[0.175878,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getN                                                    ",{}]]},"cursor":{"x":38}}],[0.128058,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNo                                                   ",{}]]},"cursor":{"x":39}}],[0.160509,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNod                                                  ",{}]]},"cursor":{"x":40}}],[0.176165,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNode                                                 ",{}]]},"cursor":{"x":41}}],[0.276731,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeB                                                ",{}]]},"cursor":{"x":42}}],[0.115048,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeBy                                               ",{}]]},"cursor":{"x":43}}],[0.249036,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeByI                                              ",{}]]},"cursor":{"x":44}}],[0.15074,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById                                             ",{}]]},"cursor":{"x":45}}],[0.216252,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById(                                            ",{}]]},"cursor":{"x":46}}],[0.476428,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById(4                                           ",{}]]},"cursor":{"x":47}}],[0.339105,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById(4)                                          ",{}]]},"cursor":{"x":48}}],[1.009679,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById(4),                                         ",{}]]},"cursor":{"x":49}}],[0.048579,{"cursor":{"x":50}}],[0.158151,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById(4), l                                       ",{}]]},"cursor":{"x":51}}],[0.056902,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById(4), li                                      ",{}]]},"cursor":{"x":52}}],[0.070738,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById(4), lin                                     ",{}]]},"cursor":{"x":53}}],[0.096508,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById(4), link                                    ",{}]]},"cursor":{"x":54}}],[0.233621,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]]},"cursor":{"x":55}}],[0.238534,{"lines":{"0":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> // cool. let's link a few more..                                                   ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]],"5":[["res13: org.neo4j.graphdb.Relationship = Relationship[1]                                   ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]],"8":[["res14: org.neo4j.graphdb.Relationship = Relationship[2]                                   ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala>                                                                                    ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"13":[["(0)                                                                                       ",{}]],"14":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"15":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"16":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]],"19":[["n3: org.neo4j.graphdb.Node = Node[3]                                                      ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.305487,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> // cool. let's link a few more..                                                   ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]],"4":[["res13: org.neo4j.graphdb.Relationship = Relationship[1]                                   ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]],"7":[["res14: org.neo4j.graphdb.Relationship = Relationship[2]                                   ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala>                                                                                    ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"12":[["(0)                                                                                       ",{}]],"13":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"14":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"15":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]],"18":[["n3: org.neo4j.graphdb.Node = Node[3]                                                      ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]],"21":[["res16: org.neo4j.graphdb.Relationship = Relationship[3]                                   ",{}]]}}],[0.000114,{"lines":{"0":[["scala> // cool. let's link a few more..                                                   ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]],"3":[["res13: org.neo4j.graphdb.Relationship = Relationship[1]                                   ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]],"6":[["res14: org.neo4j.graphdb.Relationship = Relationship[2]                                   ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala>                                                                                    ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"11":[["(0)                                                                                       ",{}]],"12":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"13":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"14":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]],"17":[["n3: org.neo4j.graphdb.Node = Node[3]                                                      ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]],"20":[["res16: org.neo4j.graphdb.Relationship = Relationship[3]                                   ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[0.562681,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]]},"cursor":{"x":55}}],[0.048998,{"cursor":{"x":54}}],[0.486368,{"cursor":{"x":53}}],[0.083972,{"cursor":{"x":52}}],[0.08436299999999999,{"cursor":{"x":51}}],[0.08390400000000001,{"cursor":{"x":50}}],[0.08376400000000001,{"cursor":{"x":49}}],[0.08447399999999999,{"cursor":{"x":48}}],[0.094529,{"cursor":{"x":47}}],[0.320695,{"cursor":{"x":46}}],[0.000249,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById(), link)                                    ",{}]]}}],[0.104021,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]]},"cursor":{"x":47}}],[0.152685,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]],"2":[["res13: org.neo4j.graphdb.Relationship = Relationship[1]                                   ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]],"5":[["res14: org.neo4j.graphdb.Relationship = Relationship[2]                                   ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala>                                                                                    ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"10":[["(0)                                                                                       ",{}]],"11":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"12":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"13":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]],"16":[["n3: org.neo4j.graphdb.Node = Node[3]                                                      ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]],"19":[["res16: org.neo4j.graphdb.Relationship = Relationship[3]                                   ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.238608,{"lines":{"0":[["scala> root.createRelationshipTo(db.getNodeById(2), link)                                 ",{}]],"1":[["res13: org.neo4j.graphdb.Relationship = Relationship[1]                                   ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]],"4":[["res14: org.neo4j.graphdb.Relationship = Relationship[2]                                   ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala>                                                                                    ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"9":[["(0)                                                                                       ",{}]],"10":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"11":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"12":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]],"15":[["n3: org.neo4j.graphdb.Node = Node[3]                                                      ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]],"18":[["res16: org.neo4j.graphdb.Relationship = Relationship[3]                                   ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]],"21":[["res17: org.neo4j.graphdb.Relationship = Relationship[4]                                   ",{}]]}}],[4e-05,{"lines":{"0":[["res13: org.neo4j.graphdb.Relationship = Relationship[1]                                   ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]],"3":[["res14: org.neo4j.graphdb.Relationship = Relationship[2]                                   ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala>                                                                                    ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"8":[["(0)                                                                                       ",{}]],"9":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"10":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"11":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]],"14":[["n3: org.neo4j.graphdb.Node = Node[3]                                                      ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]],"17":[["res16: org.neo4j.graphdb.Relationship = Relationship[3]                                   ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]],"20":[["res17: org.neo4j.graphdb.Relationship = Relationship[4]                                   ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.198994,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]]},"cursor":{"x":55}}],[0.121598,{"cursor":{"x":46}}],[0.000256,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]]},"cursor":{"x":55}}],[0.159714,{"cursor":{"x":7}}],[0.000206,{"lines":{"22":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]]},"cursor":{"x":33}}],[1.2678,{"cursor":{"x":7}}],[0.000298,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.476253,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]],"2":[["res14: org.neo4j.graphdb.Relationship = Relationship[2]                                   ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala>                                                                                    ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"7":[["(0)                                                                                       ",{}]],"8":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"9":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"10":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]],"13":[["n3: org.neo4j.graphdb.Node = Node[3]                                                      ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]],"16":[["res16: org.neo4j.graphdb.Relationship = Relationship[3]                                   ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]],"19":[["res17: org.neo4j.graphdb.Relationship = Relationship[4]                                   ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.194093,{"lines":{"0":[["scala> root.createRelationshipTo(db.getNodeById(3), link)                                 ",{}]],"1":[["res14: org.neo4j.graphdb.Relationship = Relationship[2]                                   ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala>                                                                                    ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"6":[["(0)                                                                                       ",{}]],"7":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"8":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"9":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]],"12":[["n3: org.neo4j.graphdb.Node = Node[3]                                                      ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]],"15":[["res16: org.neo4j.graphdb.Relationship = Relationship[3]                                   ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]],"18":[["res17: org.neo4j.graphdb.Relationship = Relationship[4]                                   ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"21":[["(0)                                                                                       ",{}]]}}],[0.0008799999999999999,{"lines":{"0":[["(0)                                                                                       ",{}]],"1":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"2":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"3":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"5":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]],"6":[["n3: org.neo4j.graphdb.Node = Node[3]                                                      ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]],"9":[["res16: org.neo4j.graphdb.Relationship = Relationship[3]                                   ",{}]],"11":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]],"12":[["res17: org.neo4j.graphdb.Relationship = Relationship[4]                                   ",{}]],"14":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"15":[["(0)                                                                                       ",{}]],"16":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"17":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"18":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"19":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"20":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)                                                       ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[3.494097,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.110747,{"cursor":{"x":7}}],[0.000597,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]]},"cursor":{"x":55}}],[4.491262,{"cursor":{"x":46}}],[0.000665,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]]},"cursor":{"x":55}}],[0.314898,{"cursor":{"x":46}}],[0.000349,{"lines":{"22":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]]},"cursor":{"x":55}}],[0.111467,{"cursor":{"x":7}}],[0.000312,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.127846,{"cursor":{"x":7}}],[0.000174,{"lines":{"22":[["scala>                                                                                    ",{}]]}}],[0.555602,{"lines":{"22":[["scala> v                                                                                  ",{}]]},"cursor":{"x":8}}],[0.050278,{"lines":{"22":[["scala> va                                                                                 ",{}]]},"cursor":{"x":9}}],[0.105519,{"lines":{"22":[["scala> val                                                                                ",{}]]},"cursor":{"x":10}}],[0.016018,{"cursor":{"x":11}}],[0.845702,{"lines":{"22":[["scala> val n                                                                              ",{}]]},"cursor":{"x":12}}],[2.377841,{"lines":{"22":[["scala> val n4                                                                             ",{}]]},"cursor":{"x":13}}],[0.128776,{"cursor":{"x":14}}],[0.199988,{"lines":{"22":[["scala> val n4 =                                                                           ",{}]]},"cursor":{"x":15}}],[0.051577,{"cursor":{"x":16}}],[0.752341,{"lines":{"22":[["scala> val n4 = n                                                                         ",{}]]},"cursor":{"x":17}}],[0.029247,{"lines":{"22":[["scala> val n4 = no                                                                        ",{}]]},"cursor":{"x":18}}],[0.054433,{"lines":{"22":[["scala> val n4 = nod                                                                       ",{}]]},"cursor":{"x":19}}],[0.191964,{"lines":{"22":[["scala> val n4 = node                                                                      ",{}]]},"cursor":{"x":20}}],[1.148855,{"cursor":{"x":19}}],[0.000144,{"lines":{"22":[["scala> val n4 = nod                                                                       ",{}]]}}],[0.107381,{"cursor":{"x":18}}],[0.000194,{"lines":{"22":[["scala> val n4 = no                                                                        ",{}]]}}],[0.144025,{"cursor":{"x":17}}],[0.000655,{"lines":{"22":[["scala> val n4 = n                                                                         ",{}]]}}],[0.135012,{"cursor":{"x":16}}],[0.000182,{"lines":{"22":[["scala> val n4 =                                                                           ",{}]]}}],[0.10406,{"lines":{"22":[["scala> val n4 = d                                                                         ",{}]]},"cursor":{"x":17}}],[0.128005,{"lines":{"22":[["scala> val n4 = db                                                                        ",{}]]},"cursor":{"x":18}}],[0.073014,{"lines":{"22":[["scala> val n4 = db.                                                                       ",{}]]},"cursor":{"x":19}}],[0.264229,{"lines":{"22":[["scala> val n4 = db.g                                                                      ",{}]]},"cursor":{"x":20}}],[0.146076,{"lines":{"22":[["scala> val n4 = db.ge                                                                     ",{}]]},"cursor":{"x":21}}],[0.052679,{"lines":{"22":[["scala> val n4 = db.get                                                                    ",{}]]},"cursor":{"x":22}}],[0.151497,{"lines":{"22":[["scala> val n4 = db.getN                                                                   ",{}]]},"cursor":{"x":23}}],[0.112009,{"lines":{"22":[["scala> val n4 = db.getNo                                                                  ",{}]]},"cursor":{"x":24}}],[0.495968,{"lines":{"22":[["scala> val n4 = db.getNod                                                                 ",{}]]},"cursor":{"x":25}}],[0.144411,{"lines":{"22":[["scala> val n4 = db.getNode                                                                ",{}]]},"cursor":{"x":26}}],[0.38873,{"lines":{"22":[["scala> val n4 = db.getNodeB                                                               ",{}]]},"cursor":{"x":27}}],[0.186972,{"lines":{"22":[["scala> val n4 = db.getNodeBy                                                              ",{}]]},"cursor":{"x":28}}],[0.256477,{"lines":{"22":[["scala> val n4 = db.getNodeByI                                                             ",{}]]},"cursor":{"x":29}}],[0.159358,{"lines":{"22":[["scala> val n4 = db.getNodeById                                                            ",{}]]},"cursor":{"x":30}}],[0.264542,{"lines":{"22":[["scala> val n4 = db.getNodeById(                                                           ",{}]]},"cursor":{"x":31}}],[0.838723,{"lines":{"22":[["scala> val n4 = db.getNodeById(4                                                          ",{}]]},"cursor":{"x":32}}],[0.257177,{"lines":{"22":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]]},"cursor":{"x":33}}],[0.168164,{"lines":{"0":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"1":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"2":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]],"5":[["n3: org.neo4j.graphdb.Node = Node[3]                                                      ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]],"8":[["res16: org.neo4j.graphdb.Relationship = Relationship[3]                                   ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]],"11":[["res17: org.neo4j.graphdb.Relationship = Relationship[4]                                   ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"14":[["(0)                                                                                       ",{}]],"15":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"16":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"17":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"18":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"19":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)                                                       ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.18927,{"lines":{"0":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"1":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]],"4":[["n3: org.neo4j.graphdb.Node = Node[3]                                                      ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]],"7":[["res16: org.neo4j.graphdb.Relationship = Relationship[3]                                   ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]],"10":[["res17: org.neo4j.graphdb.Relationship = Relationship[4]                                   ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"13":[["(0)                                                                                       ",{}]],"14":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"15":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"16":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"17":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"18":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)                                                       ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]],"21":[["n4: org.neo4j.graphdb.Node = Node[4]                                                      ",{}]]}}],[6.8e-05,{"lines":{"0":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]],"3":[["n3: org.neo4j.graphdb.Node = Node[3]                                                      ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]],"6":[["res16: org.neo4j.graphdb.Relationship = Relationship[3]                                   ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]],"9":[["res17: org.neo4j.graphdb.Relationship = Relationship[4]                                   ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"12":[["(0)                                                                                       ",{}]],"13":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"14":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"15":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"16":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"17":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)                                                       ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]],"20":[["n4: org.neo4j.graphdb.Node = Node[4]                                                      ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[6.383742,{"lines":{"22":[["scala> n                                                                                  ",{}]]},"cursor":{"x":8}}],[0.290586,{"lines":{"22":[["scala> n4                                                                                 ",{}]]},"cursor":{"x":9}}],[0.119515,{"lines":{"22":[["scala> n4.                                                                                ",{}]]},"cursor":{"x":10}}],[0.216147,{"lines":{"22":[["scala> n4.c                                                                               ",{}]]},"cursor":{"x":11}}],[0.208045,{"lines":{"22":[["scala> n4.cr                                                                              ",{}]]},"cursor":{"x":12}}],[0.071877,{"lines":{"22":[["scala> n4.cre                                                                             ",{}]]},"cursor":{"x":13}}],[0.6121450000000001,{"cursor":{"x":12}}],[0.00118,{"lines":{"22":[["scala> n4.createRelationshipTo                                                            ",{}]]},"cursor":{"x":30}}],[1.018903,{"lines":{"22":[["scala> n4.createRelationshipTo(                                                           ",{}]]},"cursor":{"x":31}}],[0.719813,{"lines":{"22":[["scala> n4.createRelationshipTo(d                                                          ",{}]]},"cursor":{"x":32}}],[0.16125,{"lines":{"22":[["scala> n4.createRelationshipTo(db                                                         ",{}]]},"cursor":{"x":33}}],[0.111128,{"lines":{"22":[["scala> n4.createRelationshipTo(db.                                                        ",{}]]},"cursor":{"x":34}}],[0.398252,{"lines":{"22":[["scala> n4.createRelationshipTo(db.g                                                       ",{}]]},"cursor":{"x":35}}],[0.145642,{"lines":{"22":[["scala> n4.createRelationshipTo(db.ge                                                      ",{}]]},"cursor":{"x":36}}],[0.063861,{"lines":{"22":[["scala> n4.createRelationshipTo(db.get                                                     ",{}]]},"cursor":{"x":37}}],[0.22426,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getN                                                    ",{}]]},"cursor":{"x":38}}],[0.143758,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNo                                                   ",{}]]},"cursor":{"x":39}}],[0.088174,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNod                                                  ",{}]]},"cursor":{"x":40}}],[0.143659,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNode                                                 ",{}]]},"cursor":{"x":41}}],[0.339326,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeB                                                ",{}]]},"cursor":{"x":42}}],[0.19733,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeBy                                               ",{}]]},"cursor":{"x":43}}],[0.199234,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeByI                                              ",{}]]},"cursor":{"x":44}}],[0.152624,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeById                                             ",{}]]},"cursor":{"x":45}}],[0.9709,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeById(                                            ",{}]]},"cursor":{"x":46}}],[0.80472,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeById(7                                           ",{}]]},"cursor":{"x":47}}],[0.423465,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeById(7)                                          ",{}]]},"cursor":{"x":48}}],[0.554162,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeById(7))                                         ",{}]]},"cursor":{"x":49}}],[0.987033,{"cursor":{"x":48}}],[0.000114,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeById(7)                                          ",{}]]}}],[0.1948,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeById(7),                                         ",{}]]},"cursor":{"x":49}}],[0.065692,{"cursor":{"x":50}}],[0.134732,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeById(7), l                                       ",{}]]},"cursor":{"x":51}}],[0.095834,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeById(7), li                                      ",{}]]},"cursor":{"x":52}}],[0.047758,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeById(7), lin                                     ",{}]]},"cursor":{"x":53}}],[0.08837,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeById(7), link                                    ",{}]]},"cursor":{"x":54}}],[0.22399,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]]},"cursor":{"x":55}}],[0.144011,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]],"2":[["n3: org.neo4j.graphdb.Node = Node[3]                                                      ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]],"5":[["res16: org.neo4j.graphdb.Relationship = Relationship[3]                                   ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]],"8":[["res17: org.neo4j.graphdb.Relationship = Relationship[4]                                   ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"11":[["(0)                                                                                       ",{}]],"12":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"13":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"14":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"15":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"16":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)                                                       ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]],"19":[["n4: org.neo4j.graphdb.Node = Node[4]                                                      ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.214913,{"lines":{"0":[["scala> val n3 = db.getNodeById(3)                                                         ",{}]],"1":[["n3: org.neo4j.graphdb.Node = Node[3]                                                      ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]],"4":[["res16: org.neo4j.graphdb.Relationship = Relationship[3]                                   ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]],"7":[["res17: org.neo4j.graphdb.Relationship = Relationship[4]                                   ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"10":[["(0)                                                                                       ",{}]],"11":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"12":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"13":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"14":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"15":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)                                                       ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]],"18":[["n4: org.neo4j.graphdb.Node = Node[4]                                                      ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"21":[["res19: org.neo4j.graphdb.Relationship = Relationship[5]                                   ",{}]]}}],[0.000175,{"lines":{"0":[["n3: org.neo4j.graphdb.Node = Node[3]                                                      ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]],"3":[["res16: org.neo4j.graphdb.Relationship = Relationship[3]                                   ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]],"6":[["res17: org.neo4j.graphdb.Relationship = Relationship[4]                                   ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"9":[["(0)                                                                                       ",{}]],"10":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"11":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"12":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"13":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"14":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)                                                       ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]],"17":[["n4: org.neo4j.graphdb.Node = Node[4]                                                      ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"20":[["res19: org.neo4j.graphdb.Relationship = Relationship[5]                                   ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[0.50431,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]]},"cursor":{"x":55}}],[0.072507,{"cursor":{"x":54}}],[0.501296,{"cursor":{"x":53}}],[0.083518,{"cursor":{"x":52}}],[0.084342,{"cursor":{"x":51}}],[0.084079,{"cursor":{"x":50}}],[0.084263,{"cursor":{"x":49}}],[0.084372,{"cursor":{"x":48}}],[0.09553300000000001,{"cursor":{"x":47}}],[0.072602,{"cursor":{"x":46}}],[0.6143420000000001,{"cursor":{"x":7}}],[0.000586,{"lines":{"22":[["scala>                                                                                    ",{}]]}}],[0.412468,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]]},"cursor":{"x":55}}],[0.106537,{"cursor":{"x":7}}],[0.000321,{"lines":{"22":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]]},"cursor":{"x":33}}],[0.703441,{"cursor":{"x":32}}],[0.485454,{"cursor":{"x":31}}],[0.000191,{"lines":{"22":[["scala> val n4 = db.getNodeById()                                                          ",{}]]}}],[0.122828,{"lines":{"22":[["scala> val n4 = db.getNodeById(5)                                                         ",{}]]},"cursor":{"x":32}}],[0.343554,{"cursor":{"x":31}}],[0.378306,{"cursor":{"x":7}}],[0.174566,{"cursor":{"x":8}}],[0.104421,{"cursor":{"x":9}}],[0.158853,{"cursor":{"x":10}}],[0.136262,{"cursor":{"x":11}}],[0.130845,{"cursor":{"x":12}}],[0.132775,{"cursor":{"x":13}}],[0.288654,{"cursor":{"x":12}}],[4.7e-05,{"lines":{"22":[["scala> val n = db.getNodeById(5)                                                          ",{}]]}}],[0.106267,{"lines":{"22":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]]},"cursor":{"x":13}}],[0.205033,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]],"2":[["res16: org.neo4j.graphdb.Relationship = Relationship[3]                                   ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]],"5":[["res17: org.neo4j.graphdb.Relationship = Relationship[4]                                   ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"8":[["(0)                                                                                       ",{}]],"9":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"10":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"11":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"12":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"13":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)                                                       ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]],"16":[["n4: org.neo4j.graphdb.Node = Node[4]                                                      ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"19":[["res19: org.neo4j.graphdb.Relationship = Relationship[5]                                   ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.166202,{"lines":{"0":[["scala> n3.createRelationshipTo(db.getNodeById(4), link)                                   ",{}]],"1":[["res16: org.neo4j.graphdb.Relationship = Relationship[3]                                   ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]],"4":[["res17: org.neo4j.graphdb.Relationship = Relationship[4]                                   ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"7":[["(0)                                                                                       ",{}]],"8":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"9":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"10":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"11":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"12":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)                                                       ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]],"15":[["n4: org.neo4j.graphdb.Node = Node[4]                                                      ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"18":[["res19: org.neo4j.graphdb.Relationship = Relationship[5]                                   ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]],"21":[["n5: org.neo4j.graphdb.Node = Node[5]                                                      ",{}]]}}],[0.0001,{"lines":{"0":[["res16: org.neo4j.graphdb.Relationship = Relationship[3]                                   ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]],"3":[["res17: org.neo4j.graphdb.Relationship = Relationship[4]                                   ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"6":[["(0)                                                                                       ",{}]],"7":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"8":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"9":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"10":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"11":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)                                                       ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]],"14":[["n4: org.neo4j.graphdb.Node = Node[4]                                                      ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"17":[["res19: org.neo4j.graphdb.Relationship = Relationship[5]                                   ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]],"20":[["n5: org.neo4j.graphdb.Node = Node[5]                                                      ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[0.740588,{"lines":{"22":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]]},"cursor":{"x":33}}],[0.117551,{"cursor":{"x":7}}],[0.00034,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]]},"cursor":{"x":55}}],[0.671461,{"cursor":{"x":54}}],[0.151805,{"cursor":{"x":53}}],[0.149428,{"cursor":{"x":52}}],[0.122745,{"cursor":{"x":51}}],[0.208717,{"cursor":{"x":7}}],[0.159168,{"cursor":{"x":55}}],[0.89163,{"cursor":{"x":7}}],[0.316365,{"cursor":{"x":8}}],[0.120275,{"cursor":{"x":9}}],[0.385042,{"cursor":{"x":8}}],[8.3e-05,{"lines":{"22":[["scala> n.createRelationshipTo(db.getNodeById(7), link)                                    ",{}]]}}],[0.110691,{"lines":{"22":[["scala> n5.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]]},"cursor":{"x":9}}],[0.173524,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]],"2":[["res17: org.neo4j.graphdb.Relationship = Relationship[4]                                   ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"5":[["(0)                                                                                       ",{}]],"6":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"7":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"8":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"9":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"10":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)                                                       ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]],"13":[["n4: org.neo4j.graphdb.Node = Node[4]                                                      ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"16":[["res19: org.neo4j.graphdb.Relationship = Relationship[5]                                   ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]],"19":[["n5: org.neo4j.graphdb.Node = Node[5]                                                      ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> n5.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.153911,{"lines":{"0":[["scala> n3.createRelationshipTo(db.getNodeById(5), link)                                   ",{}]],"1":[["res17: org.neo4j.graphdb.Relationship = Relationship[4]                                   ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"4":[["(0)                                                                                       ",{}]],"5":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"6":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"7":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"8":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"9":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)                                                       ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]],"12":[["n4: org.neo4j.graphdb.Node = Node[4]                                                      ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"15":[["res19: org.neo4j.graphdb.Relationship = Relationship[5]                                   ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]],"18":[["n5: org.neo4j.graphdb.Node = Node[5]                                                      ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> n5.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"21":[["res20: org.neo4j.graphdb.Relationship = Relationship[6]                                   ",{}]]}}],[6.499999999999999e-05,{"lines":{"0":[["res17: org.neo4j.graphdb.Relationship = Relationship[4]                                   ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"3":[["(0)                                                                                       ",{}]],"4":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"5":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"6":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"7":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"8":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)                                                       ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]],"11":[["n4: org.neo4j.graphdb.Node = Node[4]                                                      ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"14":[["res19: org.neo4j.graphdb.Relationship = Relationship[5]                                   ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]],"17":[["n5: org.neo4j.graphdb.Node = Node[5]                                                      ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> n5.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"20":[["res20: org.neo4j.graphdb.Relationship = Relationship[6]                                   ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[0.376367,{"lines":{"22":[["scala> n5.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]]},"cursor":{"x":55}}],[0.135987,{"cursor":{"x":7}}],[0.000326,{"lines":{"22":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]]},"cursor":{"x":33}}],[0.311916,{"cursor":{"x":7}}],[3.9e-05,{"lines":{"22":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]]},"cursor":{"x":55}}],[0.684203,{"cursor":{"x":7}}],[0.000308,{"lines":{"22":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]]},"cursor":{"x":33}}],[0.611361,{"cursor":{"x":7}}],[0.00021,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.671561,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"2":[["(0)                                                                                       ",{}]],"3":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"4":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"5":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"6":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"7":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)                                                       ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]],"10":[["n4: org.neo4j.graphdb.Node = Node[4]                                                      ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"13":[["res19: org.neo4j.graphdb.Relationship = Relationship[5]                                   ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]],"16":[["n5: org.neo4j.graphdb.Node = Node[5]                                                      ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> n5.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"19":[["res20: org.neo4j.graphdb.Relationship = Relationship[6]                                   ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.286349,{"lines":{"0":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"1":[["(0)                                                                                       ",{}]],"2":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"3":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"4":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"5":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"6":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)                                                       ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]],"9":[["n4: org.neo4j.graphdb.Node = Node[4]                                                      ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"12":[["res19: org.neo4j.graphdb.Relationship = Relationship[5]                                   ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]],"15":[["n5: org.neo4j.graphdb.Node = Node[5]                                                      ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> n5.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"18":[["res20: org.neo4j.graphdb.Relationship = Relationship[6]                                   ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"21":[["(0)                                                                                       ",{}]]}}],[0.001157,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]],"2":[["n4: org.neo4j.graphdb.Node = Node[4]                                                      ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"5":[["res19: org.neo4j.graphdb.Relationship = Relationship[5]                                   ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]],"8":[["n5: org.neo4j.graphdb.Node = Node[5]                                                      ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> n5.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"11":[["res20: org.neo4j.graphdb.Relationship = Relationship[6]                                   ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"14":[["(0)                                                                                       ",{}]],"15":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"16":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"17":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"18":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"19":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"20":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[13.860359,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.076013,{"cursor":{"x":7}}],[0.000334,{"lines":{"22":[["scala> n5.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]]},"cursor":{"x":55}}],[1.451867,{"lines":{"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[0.000555,{"lines":{"22":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]]},"cursor":{"x":33}}],[2.111455,{"cursor":{"x":7}}],[0.000216,{"lines":{"22":[["scala> n5.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]]},"cursor":{"x":55}}],[0.116102,{"cursor":{"x":7}}],[0.0005510000000000001,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.150736,{"cursor":{"x":7}}],[0.000288,{"lines":{"22":[["scala>                                                                                    ",{}]]}}],[2.616779,{"lines":{"22":[["scala> r                                                                                  ",{}]]},"cursor":{"x":8}}],[0.06254700000000001,{"lines":{"22":[["scala> ro                                                                                 ",{}]]},"cursor":{"x":9}}],[0.120141,{"lines":{"22":[["scala> roo                                                                                ",{}]]},"cursor":{"x":10}}],[0.111919,{"lines":{"22":[["scala> root                                                                               ",{}]]},"cursor":{"x":11}}],[0.162651,{"lines":{"22":[["scala> root.                                                                              ",{}]]},"cursor":{"x":12}}],[0.205585,{"lines":{"22":[["scala> root.c                                                                             ",{}]]},"cursor":{"x":13}}],[0.183621,{"lines":{"22":[["scala> root.cr                                                                            ",{}]]},"cursor":{"x":14}}],[0.080168,{"lines":{"22":[["scala> root.cre                                                                           ",{}]]},"cursor":{"x":15}}],[0.562323,{"cursor":{"x":14}}],[0.001208,{"lines":{"22":[["scala> root.createRelationshipTo                                                          ",{}]]},"cursor":{"x":32}}],[0.948258,{"lines":{"22":[["scala> root.createRelationshipTo(                                                         ",{}]]},"cursor":{"x":33}}],[0.603545,{"lines":{"22":[["scala> root.createRelationshipTo(5                                                        ",{}]]},"cursor":{"x":34}}],[0.37274,{"lines":{"22":[["scala> root.createRelationshipTo(5)                                                       ",{}]]},"cursor":{"x":35}}],[0.667138,{"cursor":{"x":34}}],[0.000113,{"lines":{"22":[["scala> root.createRelationshipTo(5                                                        ",{}]]}}],[0.12579,{"cursor":{"x":33}}],[5.5e-05,{"lines":{"22":[["scala> root.createRelationshipTo(                                                         ",{}]]}}],[0.641072,{"lines":{"22":[["scala> root.createRelationshipTo(n                                                        ",{}]]},"cursor":{"x":34}}],[0.205702,{"lines":{"22":[["scala> root.createRelationshipTo(n5                                                       ",{}]]},"cursor":{"x":35}}],[0.582172,{"lines":{"22":[["scala> root.createRelationshipTo(n5,                                                      ",{}]]},"cursor":{"x":36}}],[0.057866,{"cursor":{"x":37}}],[0.143923,{"lines":{"22":[["scala> root.createRelationshipTo(n5, l                                                    ",{}]]},"cursor":{"x":38}}],[0.063967,{"lines":{"22":[["scala> root.createRelationshipTo(n5, li                                                   ",{}]]},"cursor":{"x":39}}],[0.049901,{"lines":{"22":[["scala> root.createRelationshipTo(n5, lin                                                  ",{}]]},"cursor":{"x":40}}],[0.102072,{"lines":{"22":[["scala> root.createRelationshipTo(n5, link                                                 ",{}]]},"cursor":{"x":41}}],[0.248301,{"lines":{"22":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]]},"cursor":{"x":42}}],[0.183654,{"lines":{"0":[["scala> val n4 = db.getNodeById(4)                                                         ",{}]],"1":[["n4: org.neo4j.graphdb.Node = Node[4]                                                      ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"4":[["res19: org.neo4j.graphdb.Relationship = Relationship[5]                                   ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]],"7":[["n5: org.neo4j.graphdb.Node = Node[5]                                                      ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> n5.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"10":[["res20: org.neo4j.graphdb.Relationship = Relationship[6]                                   ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"13":[["(0)                                                                                       ",{}]],"14":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"15":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"16":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"17":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"18":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"19":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.350154,{"lines":{"0":[["n4: org.neo4j.graphdb.Node = Node[4]                                                      ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"3":[["res19: org.neo4j.graphdb.Relationship = Relationship[5]                                   ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]],"6":[["n5: org.neo4j.graphdb.Node = Node[5]                                                      ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> n5.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"9":[["res20: org.neo4j.graphdb.Relationship = Relationship[6]                                   ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"12":[["(0)                                                                                       ",{}]],"13":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"14":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"15":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"16":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"17":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"18":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"21":[["res22: org.neo4j.graphdb.Relationship = Relationship[7]                                   ",{}]]}}],[4.5e-05,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"2":[["res19: org.neo4j.graphdb.Relationship = Relationship[5]                                   ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]],"5":[["n5: org.neo4j.graphdb.Node = Node[5]                                                      ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> n5.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"8":[["res20: org.neo4j.graphdb.Relationship = Relationship[6]                                   ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"11":[["(0)                                                                                       ",{}]],"12":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"13":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"14":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"15":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"16":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"17":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"20":[["res22: org.neo4j.graphdb.Relationship = Relationship[7]                                   ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[0.336478,{"lines":{"22":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]]},"cursor":{"x":42}}],[0.138123,{"cursor":{"x":7}}],[0.0006630000000000001,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.766501,{"lines":{"0":[["scala> n4.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"1":[["res19: org.neo4j.graphdb.Relationship = Relationship[5]                                   ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]],"4":[["n5: org.neo4j.graphdb.Node = Node[5]                                                      ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> n5.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"7":[["res20: org.neo4j.graphdb.Relationship = Relationship[6]                                   ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"10":[["(0)                                                                                       ",{}]],"11":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"12":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"13":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"14":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"15":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"16":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"19":[["res22: org.neo4j.graphdb.Relationship = Relationship[7]                                   ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.290409,{"lines":{"0":[["scala> val n5 = db.getNodeById(5)                                                         ",{}]],"1":[["n5: org.neo4j.graphdb.Node = Node[5]                                                      ",{}]],"3":[["scala> n5.createRelationshipTo(db.getNodeById(7), link)                                   ",{}]],"4":[["res20: org.neo4j.graphdb.Relationship = Relationship[6]                                   ",{}]],"6":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"7":[["(0)                                                                                       ",{}]],"8":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"9":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"10":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"11":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"12":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"13":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"16":[["res22: org.neo4j.graphdb.Relationship = Relationship[7]                                   ",{}]],"18":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"19":[["(0)                                                                                       ",{}]],"20":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"21":[["(0)--[LINK,1]-->(2)                                                                       ",{}]]}}],[0.0007590000000000001,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"2":[["(0)                                                                                       ",{}]],"3":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"4":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"5":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"6":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"7":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"8":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"11":[["res22: org.neo4j.graphdb.Relationship = Relationship[7]                                   ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"14":[["(0)                                                                                       ",{}]],"15":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"16":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"17":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"18":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"19":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"20":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[15.57677,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.46007,{"cursor":{"x":7}}],[0.000241,{"lines":{"22":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]]},"cursor":{"x":42}}],[1.124417,{"cursor":{"x":7}}],[0.000223,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[1.680254,{"cursor":{"x":7}}],[0.000324,{"lines":{"22":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]]},"cursor":{"x":42}}],[0.115619,{"cursor":{"x":7}}],[0.000313,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.279564,{"cursor":{"x":7}}],[0.000413,{"lines":{"22":[["scala>                                                                                    ",{}]]}}],[2.373368,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.137265,{"cursor":{"x":7}}],[0.000404,{"lines":{"22":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]]},"cursor":{"x":42}}],[3.488613,{"cursor":{"x":7}}],[0.000223,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.702504,{"cursor":{"x":7}}],[0.000209,{"lines":{"22":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]]},"cursor":{"x":42}}],[1.966172,{"cursor":{"x":41}}],[0.161339,{"cursor":{"x":40}}],[0.5007470000000001,{"cursor":{"x":39}}],[0.08360099999999999,{"cursor":{"x":38}}],[0.084006,{"cursor":{"x":37}}],[0.084423,{"cursor":{"x":36}}],[0.084079,{"cursor":{"x":35}}],[3.01111,{"cursor":{"x":7}}],[0.000468,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.127569,{"cursor":{"x":7}}],[0.000184,{"lines":{"22":[["scala>                                                                                    ",{}]]}}],[0.695636,{"lines":{"22":[["scala> n                                                                                  ",{}]]},"cursor":{"x":8}}],[0.234987,{"lines":{"22":[["scala> n5                                                                                 ",{}]]},"cursor":{"x":9}}],[0.109529,{"lines":{"0":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"1":[["(0)                                                                                       ",{}]],"2":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"3":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"4":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"5":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"6":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"7":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"10":[["res22: org.neo4j.graphdb.Relationship = Relationship[7]                                   ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"13":[["(0)                                                                                       ",{}]],"14":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"15":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"16":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"17":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"18":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"19":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> n5                                                                                 ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.172563,{"lines":{"0":[["(0)                                                                                       ",{}]],"1":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"2":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"3":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"4":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"5":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"6":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"9":[["res22: org.neo4j.graphdb.Relationship = Relationship[7]                                   ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"12":[["(0)                                                                                       ",{}]],"13":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"14":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"15":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"16":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"17":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"18":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> n5                                                                                 ",{}]],"21":[["res24: org.neo4j.graphdb.Node = Node[5]                                                   ",{}]]}}],[5.8e-05,{"lines":{"0":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"1":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"2":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"3":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"4":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"5":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"8":[["res22: org.neo4j.graphdb.Relationship = Relationship[7]                                   ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"11":[["(0)                                                                                       ",{}]],"12":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"13":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"14":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"15":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"16":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"17":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> n5                                                                                 ",{}]],"20":[["res24: org.neo4j.graphdb.Node = Node[5]                                                   ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.749378,{"lines":{"22":[["scala> n5                                                                                 ",{}]]},"cursor":{"x":9}}],[0.150072,{"cursor":{"x":7}}],[0.000464,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[3.106971,{"cursor":{"x":7}}],[0.000254,{"lines":{"22":[["scala> n5                                                                                 ",{}]]},"cursor":{"x":9}}],[0.487948,{"cursor":{"x":7}}],[0.000153,{"lines":{"22":[["scala>                                                                                    ",{}]]}}],[4.255391,{"lines":{"22":[["scala> n5                                                                                 ",{}]]},"cursor":{"x":9}}],[0.101724,{"cursor":{"x":7}}],[0.000406,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.205781,{"cursor":{"x":7}}],[0.000294,{"lines":{"22":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]]},"cursor":{"x":42}}],[1.95158,{"lines":{"0":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"1":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"2":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"3":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"4":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"7":[["res22: org.neo4j.graphdb.Relationship = Relationship[7]                                   ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"10":[["(0)                                                                                       ",{}]],"11":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"12":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"13":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"14":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"15":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"16":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> n5                                                                                 ",{}]],"19":[["res24: org.neo4j.graphdb.Node = Node[5]                                                   ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.107363,{"lines":{"0":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"1":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"2":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"3":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"6":[["res22: org.neo4j.graphdb.Relationship = Relationship[7]                                   ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"9":[["(0)                                                                                       ",{}]],"10":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"11":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"12":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"13":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"14":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"15":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> n5                                                                                 ",{}]],"18":[["res24: org.neo4j.graphdb.Node = Node[5]                                                   ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"21":[["res25: org.neo4j.graphdb.Relationship = Relationship[8]                                   ",{}]]}}],[8.899999999999999e-05,{"lines":{"0":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"1":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"2":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"5":[["res22: org.neo4j.graphdb.Relationship = Relationship[7]                                   ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"8":[["(0)                                                                                       ",{}]],"9":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"10":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"11":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"12":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"13":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"14":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> n5                                                                                 ",{}]],"17":[["res24: org.neo4j.graphdb.Node = Node[5]                                                   ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"20":[["res25: org.neo4j.graphdb.Relationship = Relationship[8]                                   ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[0.553658,{"lines":{"22":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]]},"cursor":{"x":42}}],[0.147403,{"cursor":{"x":7}}],[0.000329,{"lines":{"22":[["scala> n5                                                                                 ",{}]]},"cursor":{"x":9}}],[0.970939,{"cursor":{"x":7}}],[0.000273,{"lines":{"22":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]]},"cursor":{"x":42}}],[0.6850889999999999,{"cursor":{"x":7}}],[0.000446,{"lines":{"22":[["scala> n5                                                                                 ",{}]]},"cursor":{"x":9}}],[0.143042,{"cursor":{"x":7}}],[0.000209,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.530662,{"lines":{"0":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"1":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"4":[["res22: org.neo4j.graphdb.Relationship = Relationship[7]                                   ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"7":[["(0)                                                                                       ",{}]],"8":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"9":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"10":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"11":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"12":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"13":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> n5                                                                                 ",{}]],"16":[["res24: org.neo4j.graphdb.Node = Node[5]                                                   ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"19":[["res25: org.neo4j.graphdb.Relationship = Relationship[8]                                   ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.231717,{"lines":{"0":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"3":[["res22: org.neo4j.graphdb.Relationship = Relationship[7]                                   ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"6":[["(0)                                                                                       ",{}]],"7":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"8":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"9":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"10":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"11":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"12":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> n5                                                                                 ",{}]],"15":[["res24: org.neo4j.graphdb.Node = Node[5]                                                   ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"18":[["res25: org.neo4j.graphdb.Relationship = Relationship[8]                                   ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"21":[["(0)                                                                                       ",{}]]}}],[0.001367,{"lines":{"0":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"1":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"2":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"3":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"4":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"5":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> n5                                                                                 ",{}]],"8":[["res24: org.neo4j.graphdb.Node = Node[5]                                                   ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"11":[["res25: org.neo4j.graphdb.Relationship = Relationship[8]                                   ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"14":[["(0)                                                                                       ",{}]],"15":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"16":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"17":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"18":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"19":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"20":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[8.238479,{"lines":{"22":[["scala> /                                                                                  ",{}]]},"cursor":{"x":8}}],[0.133107,{"lines":{"22":[["scala> //                                                                                 ",{}]]},"cursor":{"x":9}}],[0.095981,{"cursor":{"x":10}}],[0.207849,{"lines":{"22":[["scala> // o                                                                               ",{}]]},"cursor":{"x":11}}],[0.104443,{"lines":{"22":[["scala> // ok                                                                              ",{}]]},"cursor":{"x":12}}],[0.263537,{"lines":{"22":[["scala> // ok.                                                                             ",{}]]},"cursor":{"x":13}}],[0.144148,{"lines":{"22":[["scala> // ok..                                                                            ",{}]]},"cursor":{"x":14}}],[0.10824,{"cursor":{"x":15}}],[1.310769,{"lines":{"22":[["scala> // ok.. s                                                                          ",{}]]},"cursor":{"x":16}}],[0.092899,{"lines":{"22":[["scala> // ok.. so                                                                         ",{}]]},"cursor":{"x":17}}],[0.063767,{"cursor":{"x":18}}],[1.590841,{"cursor":{"x":17}}],[0.000198,{}],[0.817646,{"cursor":{"x":18}}],[0.143381,{"lines":{"22":[["scala> // ok.. so l                                                                       ",{}]]},"cursor":{"x":19}}],[0.115073,{"lines":{"22":[["scala> // ok.. so le                                                                      ",{}]]},"cursor":{"x":20}}],[0.049021,{"lines":{"22":[["scala> // ok.. so let                                                                     ",{}]]},"cursor":{"x":21}}],[0.123846,{"lines":{"22":[["scala> // ok.. so let'                                                                    ",{}]]},"cursor":{"x":22}}],[0.169215,{"lines":{"22":[["scala> // ok.. so let's                                                                   ",{}]]},"cursor":{"x":23}}],[0.063514,{"cursor":{"x":24}}],[0.167186,{"lines":{"22":[["scala> // ok.. so let's t                                                                 ",{}]]},"cursor":{"x":25}}],[0.167877,{"lines":{"22":[["scala> // ok.. so let's tr                                                                ",{}]]},"cursor":{"x":26}}],[0.057726,{"lines":{"22":[["scala> // ok.. so let's try                                                               ",{}]]},"cursor":{"x":27}}],[0.078765,{"cursor":{"x":28}}],[0.111537,{"lines":{"22":[["scala> // ok.. so let's try s                                                             ",{}]]},"cursor":{"x":29}}],[0.100569,{"lines":{"22":[["scala> // ok.. so let's try so                                                            ",{}]]},"cursor":{"x":30}}],[0.08369,{"lines":{"22":[["scala> // ok.. so let's try som                                                           ",{}]]},"cursor":{"x":31}}],[0.088314,{"lines":{"22":[["scala> // ok.. so let's try some                                                          ",{}]]},"cursor":{"x":32}}],[0.079933,{"cursor":{"x":33}}],[0.135765,{"lines":{"22":[["scala> // ok.. so let's try some s                                                        ",{}]]},"cursor":{"x":34}}],[0.079736,{"lines":{"22":[["scala> // ok.. so let's try some sh                                                       ",{}]]},"cursor":{"x":35}}],[0.055934,{"lines":{"22":[["scala> // ok.. so let's try some sho                                                      ",{}]]},"cursor":{"x":36}}],[0.06485100000000001,{"lines":{"22":[["scala> // ok.. so let's try some shor                                                     ",{}]]},"cursor":{"x":37}}],[0.160069,{"lines":{"22":[["scala> // ok.. so let's try some short                                                    ",{}]]},"cursor":{"x":38}}],[0.08086599999999999,{"lines":{"22":[["scala> // ok.. so let's try some shorte                                                   ",{}]]},"cursor":{"x":39}}],[0.054458,{"lines":{"22":[["scala> // ok.. so let's try some shortes                                                  ",{}]]},"cursor":{"x":40}}],[0.089285,{"lines":{"22":[["scala> // ok.. so let's try some shortest                                                 ",{}]]},"cursor":{"x":41}}],[0.07248599999999999,{"cursor":{"x":42}}],[0.053328,{"lines":{"22":[["scala> // ok.. so let's try some shortest p                                               ",{}]]},"cursor":{"x":43}}],[0.073783,{"lines":{"22":[["scala> // ok.. so let's try some shortest pa                                              ",{}]]},"cursor":{"x":44}}],[0.07445,{"lines":{"22":[["scala> // ok.. so let's try some shortest pat                                             ",{}]]},"cursor":{"x":45}}],[0.052475,{"lines":{"22":[["scala> // ok.. so let's try some shortest path                                            ",{}]]},"cursor":{"x":46}}],[0.120914,{"cursor":{"x":47}}],[0.13529,{"lines":{"22":[["scala> // ok.. so let's try some shortest path s                                          ",{}]]},"cursor":{"x":48}}],[0.047881,{"lines":{"22":[["scala> // ok.. so let's try some shortest path st                                         ",{}]]},"cursor":{"x":49}}],[0.07996,{"lines":{"22":[["scala> // ok.. so let's try some shortest path stu                                        ",{}]]},"cursor":{"x":50}}],[0.136382,{"lines":{"22":[["scala> // ok.. so let's try some shortest path stuf                                       ",{}]]},"cursor":{"x":51}}],[0.120064,{"lines":{"22":[["scala> // ok.. so let's try some shortest path stuff                                      ",{}]]},"cursor":{"x":52}}],[0.119598,{"lines":{"0":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"1":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"2":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"3":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"4":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> n5                                                                                 ",{}]],"7":[["res24: org.neo4j.graphdb.Node = Node[5]                                                   ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"10":[["res25: org.neo4j.graphdb.Relationship = Relationship[8]                                   ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"13":[["(0)                                                                                       ",{}]],"14":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"15":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"16":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"17":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"18":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"19":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> // ok.. so let's try some shortest path stuff                                      ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.000501,{"lines":{"0":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"1":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"2":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"3":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> n5                                                                                 ",{}]],"6":[["res24: org.neo4j.graphdb.Node = Node[5]                                                   ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"9":[["res25: org.neo4j.graphdb.Relationship = Relationship[8]                                   ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"12":[["(0)                                                                                       ",{}]],"13":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"14":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"15":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"16":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"17":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"18":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> // ok.. so let's try some shortest path stuff                                      ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[5.875086,{"lines":{"22":[["scala> // ok.. so let's try some shortest path stuff                                      ",{}]]},"cursor":{"x":52}}],[0.125442,{"cursor":{"x":7}}],[0.000462,{"lines":{"22":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]]},"cursor":{"x":61}}],[0.822354,{"cursor":{"x":7}}],[0.000308,{"lines":{"22":[["scala> // ok.. so let's try some shortest path stuff                                      ",{}]]},"cursor":{"x":52}}],[0.140505,{"cursor":{"x":7}}],[0.000128,{"lines":{"22":[["scala>                                                                                    ",{}]]}}],[1.666518,{"lines":{"22":[["scala> v                                                                                  ",{}]]},"cursor":{"x":8}}],[0.088464,{"lines":{"22":[["scala> va                                                                                 ",{}]]},"cursor":{"x":9}}],[0.057944,{"lines":{"22":[["scala> val                                                                                ",{}]]},"cursor":{"x":10}}],[0.022874,{"cursor":{"x":11}}],[1.241404,{"lines":{"22":[["scala> val e                                                                              ",{}]]},"cursor":{"x":12}}],[0.206158,{"lines":{"22":[["scala> val ex                                                                             ",{}]]},"cursor":{"x":13}}],[0.071495,{"lines":{"22":[["scala> val exp                                                                            ",{}]]},"cursor":{"x":14}}],[0.104017,{"lines":{"22":[["scala> val expa                                                                           ",{}]]},"cursor":{"x":15}}],[0.080403,{"lines":{"22":[["scala> val expan                                                                          ",{}]]},"cursor":{"x":16}}],[0.088793,{"lines":{"22":[["scala> val expand                                                                         ",{}]]},"cursor":{"x":17}}],[0.159224,{"lines":{"22":[["scala> val expande                                                                        ",{}]]},"cursor":{"x":18}}],[0.071654,{"lines":{"22":[["scala> val expander                                                                       ",{}]]},"cursor":{"x":19}}],[0.032097,{"cursor":{"x":20}}],[0.143791,{"lines":{"22":[["scala> val expander =                                                                     ",{}]]},"cursor":{"x":21}}],[0.058439,{"cursor":{"x":22}}],[3.939367,{"lines":{"22":[["scala> val expander = T                                                                   ",{}]]},"cursor":{"x":23}}],[0.170192,{"lines":{"22":[["scala> val expander = Tr                                                                  ",{}]]},"cursor":{"x":24}}],[0.104139,{"lines":{"22":[["scala> val expander = Tra                                                                 ",{}]]},"cursor":{"x":25}}],[0.152193,{"lines":{"22":[["scala> val expander = Trav                                                                ",{}]]},"cursor":{"x":26}}],[0.159759,{"lines":{"22":[["scala> val expander = Trave                                                               ",{}]]},"cursor":{"x":27}}],[0.079924,{"lines":{"22":[["scala> val expander = Traver                                                              ",{}]]},"cursor":{"x":28}}],[0.104416,{"lines":{"22":[["scala> val expander = Travers                                                             ",{}]]},"cursor":{"x":29}}],[0.079862,{"lines":{"22":[["scala> val expander = Traverse                                                            ",{}]]},"cursor":{"x":30}}],[0.043735,{"lines":{"22":[["scala> val expander = Traverser                                                           ",{}]]},"cursor":{"x":31}}],[0.19254,{"lines":{"22":[["scala> val expander = Traverser.                                                          ",{}]]},"cursor":{"x":32}}],[0.643425,{"lines":{"22":[["scala> val expander = Traverser.e                                                         ",{}]]},"cursor":{"x":33}}],[0.224331,{"lines":{"22":[["scala> val expander = Traverser.em                                                        ",{}]]},"cursor":{"x":34}}],[0.071769,{"lines":{"22":[["scala> val expander = Traverser.emp                                                       ",{}]]},"cursor":{"x":35}}],[0.193347,{"lines":{"22":[["scala> val expander = Traverser.empt                                                      ",{}]]},"cursor":{"x":36}}],[0.078861,{"lines":{"22":[["scala> val expander = Traverser.empty                                                     ",{}]]},"cursor":{"x":37}}],[0.199582,{"lines":{"22":[["scala> val expander = Traverser.emptyE                                                    ",{}]]},"cursor":{"x":38}}],[0.240593,{"lines":{"22":[["scala> val expander = Traverser.emptyEx                                                   ",{}]]},"cursor":{"x":39}}],[0.06351999999999999,{"lines":{"22":[["scala> val expander = Traverser.emptyExp                                                  ",{}]]},"cursor":{"x":40}}],[0.1042,{"lines":{"22":[["scala> val expander = Traverser.emptyExpa                                                 ",{}]]},"cursor":{"x":41}}],[0.072863,{"lines":{"22":[["scala> val expander = Traverser.emptyExpan                                                ",{}]]},"cursor":{"x":42}}],[0.111015,{"lines":{"22":[["scala> val expander = Traverser.emptyExpand                                               ",{}]]},"cursor":{"x":43}}],[0.16872,{"lines":{"22":[["scala> val expander = Traverser.emptyExpande                                              ",{}]]},"cursor":{"x":44}}],[0.057935,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander                                             ",{}]]},"cursor":{"x":45}}],[0.149178,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander(                                            ",{}]]},"cursor":{"x":46}}],[1.237241,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander()                                           ",{}]]},"cursor":{"x":47}}],[0.242638,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().                                          ",{}]]},"cursor":{"x":48}}],[0.10501,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().a                                         ",{}]]},"cursor":{"x":49}}],[0.127111,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().ad                                        ",{}]]},"cursor":{"x":50}}],[0.121304,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add                                       ",{}]]},"cursor":{"x":51}}],[0.302873,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(                                      ",{}]]},"cursor":{"x":52}}],[0.349041,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(\"                                     ",{}]]},"cursor":{"x":53}}],[1.510178,{"cursor":{"x":52}}],[8.1e-05,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(                                      ",{}]]}}],[0.404943,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(l                                     ",{}]]},"cursor":{"x":53}}],[0.056497,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(li                                    ",{}]]},"cursor":{"x":54}}],[0.071036,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(lin                                   ",{}]]},"cursor":{"x":55}}],[0.10397,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link                                  ",{}]]},"cursor":{"x":56}}],[0.241702,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link,                                 ",{}]]},"cursor":{"x":57}}],[0.053424,{"cursor":{"x":58}}],[0.733254,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link, D                               ",{}]]},"cursor":{"x":59}}],[0.149611,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link, Di                              ",{}]]},"cursor":{"x":60}}],[0.101927,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link, Dir                             ",{}]]},"cursor":{"x":61}}],[0.056189,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link, Dire                            ",{}]]},"cursor":{"x":62}}],[0.136476,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link, Direc                           ",{}]]},"cursor":{"x":63}}],[0.231241,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link, Direct                          ",{}]]},"cursor":{"x":64}}],[0.032067,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link, Directi                         ",{}]]},"cursor":{"x":65}}],[0.056889,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link, Directio                        ",{}]]},"cursor":{"x":66}}],[0.057015,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link, Direction                       ",{}]]},"cursor":{"x":67}}],[0.226742,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.                      ",{}]]},"cursor":{"x":68}}],[0.307321,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.B                     ",{}]]},"cursor":{"x":69}}],[0.072257,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BO                    ",{}]]},"cursor":{"x":70}}],[0.159729,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOT                   ",{}]]},"cursor":{"x":71}}],[0.07206600000000001,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOTH                  ",{}]]},"cursor":{"x":72}}],[0.199869,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]]},"cursor":{"x":73}}],[0.393722,{"lines":{"0":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"1":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"2":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> n5                                                                                 ",{}]],"5":[["res24: org.neo4j.graphdb.Node = Node[5]                                                   ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"8":[["res25: org.neo4j.graphdb.Relationship = Relationship[8]                                   ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"11":[["(0)                                                                                       ",{}]],"12":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"13":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"14":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"15":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"16":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"17":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> // ok.. so let's try some shortest path stuff                                      ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.038748,{"lines":{"0":[["res24: org.neo4j.graphdb.Node = Node[5]                                                   ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"3":[["res25: org.neo4j.graphdb.Relationship = Relationship[8]                                   ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"6":[["(0)                                                                                       ",{}]],"7":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"8":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"9":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"10":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"11":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"12":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> // ok.. so let's try some shortest path stuff                                      ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"17":[["<console>:20: error: value emptyExpander is not a member of object org.neo4j.graphdb.trave",{}]],"18":[["rsal.Traverser                                                                            ",{}]],"19":[["       val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"20":[["                                ^                                                         ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.738423,{"lines":{"22":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]]},"cursor":{"x":73}}],[0.021604,{"cursor":{"x":72}}],[0.500566,{"cursor":{"x":71}}],[0.084249,{"cursor":{"x":70}}],[0.08394600000000001,{"cursor":{"x":69}}],[0.083263,{"cursor":{"x":68}}],[0.0834,{"cursor":{"x":67}}],[0.083992,{"cursor":{"x":66}}],[0.10193,{"cursor":{"x":65}}],[0.065752,{"cursor":{"x":64}}],[0.083319,{"cursor":{"x":63}}],[0.083539,{"cursor":{"x":62}}],[0.08337600000000001,{"cursor":{"x":61}}],[0.08357100000000001,{"cursor":{"x":60}}],[0.084242,{"cursor":{"x":59}}],[0.08459999999999999,{"cursor":{"x":58}}],[0.08572200000000001,{"cursor":{"x":57}}],[0.084963,{"cursor":{"x":56}}],[0.0849,{"cursor":{"x":55}}],[0.082246,{"cursor":{"x":54}}],[0.08210000000000001,{"cursor":{"x":53}}],[0.093764,{"cursor":{"x":52}}],[0.074145,{"cursor":{"x":51}}],[0.083498,{"cursor":{"x":50}}],[0.084051,{"cursor":{"x":49}}],[0.083213,{"cursor":{"x":48}}],[0.084069,{"cursor":{"x":47}}],[0.08362,{"cursor":{"x":46}}],[0.08359,{"cursor":{"x":45}}],[0.08423,{"cursor":{"x":44}}],[0.083652,{"cursor":{"x":43}}],[0.083394,{"cursor":{"x":42}}],[0.08433,{"cursor":{"x":41}}],[0.083715,{"cursor":{"x":40}}],[0.09382699999999999,{"cursor":{"x":39}}],[0.074007,{"cursor":{"x":38}}],[0.083967,{"cursor":{"x":37}}],[0.08376400000000001,{"cursor":{"x":36}}],[0.083589,{"cursor":{"x":35}}],[0.083855,{"cursor":{"x":34}}],[0.083437,{"cursor":{"x":33}}],[0.084121,{"cursor":{"x":32}}],[0.084491,{"cursor":{"x":31}}],[0.084838,{"cursor":{"x":30}}],[0.630548,{"cursor":{"x":31}}],[0.342171,{"cursor":{"x":30}}],[0.000318,{"lines":{"22":[["scala> val expander = Traverse.emptyExpander().add(link, Direction.BOTH)                  ",{}]]}}],[0.127954,{"cursor":{"x":29}}],[0.000105,{"lines":{"22":[["scala> val expander = Travers.emptyExpander().add(link, Direction.BOTH)                   ",{}]]}}],[0.128106,{"lines":{"22":[["scala> val expander = Traversa.emptyExpander().add(link, Direction.BOTH)                  ",{}]]},"cursor":{"x":30}}],[0.16023,{"lines":{"22":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]]},"cursor":{"x":31}}],[0.207398,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"2":[["res25: org.neo4j.graphdb.Relationship = Relationship[8]                                   ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"5":[["(0)                                                                                       ",{}]],"6":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"7":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"8":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"9":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"10":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"11":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> // ok.. so let's try some shortest path stuff                                      ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"16":[["<console>:20: error: value emptyExpander is not a member of object org.neo4j.graphdb.trave",{}]],"17":[["rsal.Traverser                                                                            ",{}]],"18":[["       val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"19":[["                                ^                                                         ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.211583,{"lines":{"0":[["scala> root.createRelationshipTo(n5, link)                                                ",{}]],"1":[["res25: org.neo4j.graphdb.Relationship = Relationship[8]                                   ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"4":[["(0)                                                                                       ",{}]],"5":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"6":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"7":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"8":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"9":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"10":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> // ok.. so let's try some shortest path stuff                                      ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"15":[["<console>:20: error: value emptyExpander is not a member of object org.neo4j.graphdb.trave",{}]],"16":[["rsal.Traverser                                                                            ",{}]],"17":[["       val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"18":[["                                ^                                                         ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"21":[["warning: there were 2 deprecation warning(s); re-run with -deprecation for details        ",{}]]}}],[0.06506199999999999,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"2":[["(0)                                                                                       ",{}]],"3":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"4":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"5":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"6":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"7":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"8":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> // ok.. so let's try some shortest path stuff                                      ",{}]],"12":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"13":[["<console>:20: error: value emptyExpander is not a member of object org.neo4j.graphdb.trave",{}]],"14":[["rsal.Traverser                                                                            ",{}]],"15":[["       val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"16":[["                                ^                                                         ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"19":[["warning: there were 2 deprecation warning(s); re-run with -deprecation for details        ",{}]],"20":[["expander: org.neo4j.graphdb.Expander = Expander[{BOTH=[Lorg.neo4j.graphdb.RelationshipType",{}]],"21":[[";@3757c175}]                                                                              ",{}]]}}],[0.000136,{"lines":{"0":[["scala> td.traverse(root).iterator.asScala.foreach(println(_))                             ",{}]],"1":[["(0)                                                                                       ",{}]],"2":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"3":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"4":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"5":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"6":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"7":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> // ok.. so let's try some shortest path stuff                                      ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"12":[["<console>:20: error: value emptyExpander is not a member of object org.neo4j.graphdb.trave",{}]],"13":[["rsal.Traverser                                                                            ",{}]],"14":[["       val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"15":[["                                ^                                                         ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"18":[["warning: there were 2 deprecation warning(s); re-run with -deprecation for details        ",{}]],"19":[["expander: org.neo4j.graphdb.Expander = Expander[{BOTH=[Lorg.neo4j.graphdb.RelationshipType",{}]],"20":[[";@3757c175}]                                                                              ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[4.216957,{"lines":{"22":[["scala> e                                                                                  ",{}]]},"cursor":{"x":8}}],[0.337989,{"lines":{"22":[["scala> ex                                                                                 ",{}]]},"cursor":{"x":9}}],[0.063834,{"lines":{"22":[["scala> exp                                                                                ",{}]]},"cursor":{"x":10}}],[0.120264,{"lines":{"22":[["scala> expa                                                                               ",{}]]},"cursor":{"x":11}}],[0.112056,{"lines":{"22":[["scala> expan                                                                              ",{}]]},"cursor":{"x":12}}],[0.128474,{"lines":{"22":[["scala> expand                                                                             ",{}]]},"cursor":{"x":13}}],[0.979808,{"cursor":{"x":12}}],[4.4e-05,{"lines":{"22":[["scala> expan                                                                              ",{}]]}}],[0.489144,{"cursor":{"x":11}}],[0.000273,{"lines":{"22":[["scala> expa                                                                               ",{}]]}}],[0.08275,{"cursor":{"x":10}}],[0.00015,{"lines":{"22":[["scala> exp                                                                                ",{}]]}}],[0.08376,{"cursor":{"x":9}}],[0.000134,{"lines":{"22":[["scala> ex                                                                                 ",{}]]}}],[0.083435,{"cursor":{"x":8}}],[0.000138,{"lines":{"22":[["scala> e                                                                                  ",{}]]}}],[0.084149,{"cursor":{"x":7}}],[0.000117,{"lines":{"22":[["scala>                                                                                    ",{}]]}}],[0.37337,{"lines":{"22":[["scala> v                                                                                  ",{}]]},"cursor":{"x":8}}],[0.070227,{"lines":{"22":[["scala> va                                                                                 ",{}]]},"cursor":{"x":9}}],[0.08808299999999999,{"lines":{"22":[["scala> val                                                                                ",{}]]},"cursor":{"x":10}}],[0.056807,{"cursor":{"x":11}}],[0.216463,{"lines":{"22":[["scala> val f                                                                              ",{}]]},"cursor":{"x":12}}],[0.094581,{"lines":{"22":[["scala> val fi                                                                             ",{}]]},"cursor":{"x":13}}],[0.047716,{"lines":{"22":[["scala> val fin                                                                            ",{}]]},"cursor":{"x":14}}],[0.088101,{"lines":{"22":[["scala> val find                                                                           ",{}]]},"cursor":{"x":15}}],[0.153407,{"lines":{"22":[["scala> val finde                                                                          ",{}]]},"cursor":{"x":16}}],[0.070413,{"lines":{"22":[["scala> val finder                                                                         ",{}]]},"cursor":{"x":17}}],[0.050211,{"cursor":{"x":18}}],[0.190354,{"lines":{"22":[["scala> val finder =                                                                       ",{}]]},"cursor":{"x":19}}],[0.089424,{"cursor":{"x":20}}],[0.59021,{"lines":{"22":[["scala> val finder = o                                                                     ",{}]]},"cursor":{"x":21}}],[0.962665,{"cursor":{"x":20}}],[0.000433,{"lines":{"22":[["scala> val finder =                                                                       ",{}]]}}],[0.821585,{"lines":{"22":[["scala> val finder = G                                                                     ",{}]]},"cursor":{"x":21}}],[0.22765,{"lines":{"22":[["scala> val finder = Gr                                                                    ",{}]]},"cursor":{"x":22}}],[4.4e-05,{"lines":{"22":[["scala> val finder = Gra                                                                   ",{}]]},"cursor":{"x":23}}],[0.057894,{"lines":{"22":[["scala> val finder = Grap                                                                  ",{}]]},"cursor":{"x":24}}],[0.048292,{"lines":{"22":[["scala> val finder = Graph                                                                 ",{}]]},"cursor":{"x":25}}],[0.361276,{"lines":{"22":[["scala> val finder = GraphA                                                                ",{}]]},"cursor":{"x":26}}],[0.208,{"lines":{"22":[["scala> val finder = GraphAl                                                               ",{}]]},"cursor":{"x":27}}],[0.130407,{"lines":{"22":[["scala> val finder = GraphAlg                                                              ",{}]]},"cursor":{"x":28}}],[0.118185,{"lines":{"22":[["scala> val finder = GraphAlgo                                                             ",{}]]},"cursor":{"x":29}}],[1.965194,{"cursor":{"x":28}}],[0.000114,{"lines":{"22":[["scala> val finder = GraphAlg                                                              ",{}]]}}],[0.489276,{"cursor":{"x":27}}],[0.000301,{"lines":{"22":[["scala> val finder = GraphAl                                                               ",{}]]}}],[0.082389,{"cursor":{"x":26}}],[6.499999999999999e-05,{"lines":{"22":[["scala> val finder = GraphA                                                                ",{}]]}}],[0.08489099999999999,{"lines":{"22":[["scala> val finder = Graph                                                                 ",{}]]},"cursor":{"x":25}}],[0.08241800000000001,{"lines":{"22":[["scala> val finder = Grap                                                                  ",{}]]},"cursor":{"x":24}}],[0.083069,{"cursor":{"x":23}}],[0.000318,{"lines":{"22":[["scala> val finder = Gra                                                                   ",{}]]}}],[0.08407299999999999,{"cursor":{"x":22}}],[5.3e-05,{"lines":{"22":[["scala> val finder = Gr                                                                    ",{}]]}}],[0.08326699999999999,{"cursor":{"x":21}}],[0.000208,{"lines":{"22":[["scala> val finder = G                                                                     ",{}]]}}],[0.095564,{"cursor":{"x":20}}],[0.000146,{"lines":{"22":[["scala> val finder =                                                                       ",{}]]}}],[0.476032,{"lines":{"22":[["scala> val finder = o                                                                     ",{}]]},"cursor":{"x":21}}],[0.057188,{"lines":{"22":[["scala> val finder = or                                                                    ",{}]]},"cursor":{"x":22}}],[0.159008,{"lines":{"22":[["scala> val finder = org                                                                   ",{}]]},"cursor":{"x":23}}],[0.096745,{"lines":{"22":[["scala> val finder = org.                                                                  ",{}]]},"cursor":{"x":24}}],[0.176044,{"lines":{"22":[["scala> val finder = org.n                                                                 ",{}]]},"cursor":{"x":25}}],[0.117598,{"lines":{"22":[["scala> val finder = org.ne                                                                ",{}]]},"cursor":{"x":26}}],[0.050571,{"lines":{"22":[["scala> val finder = org.neo                                                               ",{}]]},"cursor":{"x":27}}],[0.134712,{"lines":{"22":[["scala> val finder = org.neo4                                                              ",{}]]},"cursor":{"x":28}}],[0.058491,{"lines":{"22":[["scala> val finder = org.neo4j                                                             ",{}]]},"cursor":{"x":29}}],[0.125526,{"lines":{"22":[["scala> val finder = org.neo4j.                                                            ",{}]]},"cursor":{"x":30}}],[0.901739,{"lines":{"22":[["scala> val finder = org.neo4j.g                                                           ",{}]]},"cursor":{"x":31}}],[0.130368,{"lines":{"22":[["scala> val finder = org.neo4j.gr                                                          ",{}]]},"cursor":{"x":32}}],[0.048004,{"lines":{"22":[["scala> val finder = org.neo4j.gra                                                         ",{}]]},"cursor":{"x":33}}],[0.064272,{"lines":{"22":[["scala> val finder = org.neo4j.grap                                                        ",{}]]},"cursor":{"x":34}}],[0.015883,{"lines":{"22":[["scala> val finder = org.neo4j.graph                                                       ",{}]]},"cursor":{"x":35}}],[0.183793,{"lines":{"22":[["scala> val finder = org.neo4j.grapha                                                      ",{}]]},"cursor":{"x":36}}],[0.471901,{"lines":{"22":[["scala> val finder = org.neo4j.graphal                                                     ",{}]]},"cursor":{"x":37}}],[0.113972,{"lines":{"22":[["scala> val finder = org.neo4j.graphalg                                                    ",{}]]},"cursor":{"x":38}}],[0.062169,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo                                                   ",{}]]},"cursor":{"x":39}}],[0.287968,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.                                                  ",{}]]},"cursor":{"x":40}}],[0.37636,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.G                                                 ",{}]]},"cursor":{"x":41}}],[0.175501,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.Gr                                                ",{}]]},"cursor":{"x":42}}],[0.048886,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.Gra                                               ",{}]]},"cursor":{"x":43}}],[0.059279,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.Grap                                              ",{}]]},"cursor":{"x":44}}],[0.056614,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.Graph                                             ",{}]]},"cursor":{"x":45}}],[0.467841,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphA                                            ",{}]]},"cursor":{"x":46}}],[0.135765,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAl                                           ",{}]]},"cursor":{"x":47}}],[0.135745,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlg                                          ",{}]]},"cursor":{"x":48}}],[0.111866,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgo                                         ",{}]]},"cursor":{"x":49}}],[0.267927,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoF                                        ",{}]]},"cursor":{"x":50}}],[0.148219,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFa                                       ",{}]]},"cursor":{"x":51}}],[0.08805200000000001,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFac                                      ",{}]]},"cursor":{"x":52}}],[0.224063,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFact                                     ",{}]]},"cursor":{"x":53}}],[0.06389499999999999,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFacto                                    ",{}]]},"cursor":{"x":54}}],[0.104215,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactor                                   ",{}]]},"cursor":{"x":55}}],[0.223986,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory                                  ",{}]]},"cursor":{"x":56}}],[0.400091,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]]},"cursor":{"x":57}}],[0.297541,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.s                                ",{}]]},"cursor":{"x":58}}],[0.095385,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.sh                               ",{}]]},"cursor":{"x":59}}],[0.030754,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.sho                              ",{}]]},"cursor":{"x":60}}],[0.06422700000000001,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shor                             ",{}]]},"cursor":{"x":61}}],[0.160721,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.short                            ",{}]]},"cursor":{"x":62}}],[0.103081,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shorte                           ",{}]]},"cursor":{"x":63}}],[0.051298,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortes                          ",{}]]},"cursor":{"x":64}}],[0.100497,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortest                         ",{}]]},"cursor":{"x":65}}],[0.221203,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestP                        ",{}]]},"cursor":{"x":66}}],[0.16286,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPa                       ",{}]]},"cursor":{"x":67}}],[0.048946,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPat                      ",{}]]},"cursor":{"x":68}}],[0.05055,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath                     ",{}]]},"cursor":{"x":69}}],[0.236633,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(                    ",{}]]},"cursor":{"x":70}}],[0.958404,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(e                   ",{}]]},"cursor":{"x":71}}],[0.233611,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(ex                  ",{}]]},"cursor":{"x":72}}],[0.048092,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(exp                 ",{}]]},"cursor":{"x":73}}],[0.119651,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expa                ",{}]]},"cursor":{"x":74}}],[0.088368,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expan               ",{}]]},"cursor":{"x":75}}],[0.088046,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expand              ",{}]]},"cursor":{"x":76}}],[0.177645,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expande             ",{}]]},"cursor":{"x":77}}],[0.053673,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander            ",{}]]},"cursor":{"x":78}}],[0.113899,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander,           ",{}]]},"cursor":{"x":79}}],[0.053127,{"cursor":{"x":80}}],[0.789195,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 1         ",{}]]},"cursor":{"x":81}}],[0.052031,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10        ",{}]]},"cursor":{"x":82}}],[0.231999,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]]},"cursor":{"x":83}}],[0.168896,{"lines":{"0":[["(0)                                                                                       ",{}]],"1":[["(0)--[LINK,0]-->(1)                                                                       ",{}]],"2":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"3":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"4":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"5":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"6":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> // ok.. so let's try some shortest path stuff                                      ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"11":[["<console>:20: error: value emptyExpander is not a member of object org.neo4j.graphdb.trave",{}]],"12":[["rsal.Traverser                                                                            ",{}]],"13":[["       val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"14":[["                                ^                                                         ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"17":[["warning: there were 2 deprecation warning(s); re-run with -deprecation for details        ",{}]],"18":[["expander: org.neo4j.graphdb.Expander = Expander[{BOTH=[Lorg.neo4j.graphdb.RelationshipType",{}]],"19":[[";@3757c175}]                                                                              ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.1724,{"lines":{"0":[["(0)--[LINK,1]-->(2)                                                                       ",{}]],"1":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"2":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"3":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"4":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> // ok.. so let's try some shortest path stuff                                      ",{}]],"8":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"9":[["<console>:20: error: value emptyExpander is not a member of object org.neo4j.graphdb.trave",{}]],"10":[["rsal.Traverser                                                                            ",{}]],"11":[["       val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"12":[["                                ^                                                         ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"15":[["warning: there were 2 deprecation warning(s); re-run with -deprecation for details        ",{}]],"16":[["expander: org.neo4j.graphdb.Expander = Expander[{BOTH=[Lorg.neo4j.graphdb.RelationshipType",{}]],"17":[[";@3757c175}]                                                                              ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]],"20":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"21":[["path.ShortestPath@6be42cde                                                                ",{}]]}}],[0.000131,{"lines":{"0":[["(0)--[LINK,2]-->(3)                                                                       ",{}]],"1":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"2":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"3":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> // ok.. so let's try some shortest path stuff                                      ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"8":[["<console>:20: error: value emptyExpander is not a member of object org.neo4j.graphdb.trave",{}]],"9":[["rsal.Traverser                                                                            ",{}]],"10":[["       val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"11":[["                                ^                                                         ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"14":[["warning: there were 2 deprecation warning(s); re-run with -deprecation for details        ",{}]],"15":[["expander: org.neo4j.graphdb.Expander = Expander[{BOTH=[Lorg.neo4j.graphdb.RelationshipType",{}]],"16":[[";@3757c175}]                                                                              ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]],"19":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"20":[["path.ShortestPath@6be42cde                                                                ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[9.662239,{"lines":{"22":[["scala> f                                                                                  ",{}]]},"cursor":{"x":8}}],[0.110237,{"lines":{"22":[["scala> fi                                                                                 ",{}]]},"cursor":{"x":9}}],[0.055052,{"lines":{"22":[["scala> fin                                                                                ",{}]]},"cursor":{"x":10}}],[0.095956,{"lines":{"22":[["scala> find                                                                               ",{}]]},"cursor":{"x":11}}],[0.174855,{"lines":{"22":[["scala> finde                                                                              ",{}]]},"cursor":{"x":12}}],[0.080055,{"lines":{"22":[["scala> finder                                                                             ",{}]]},"cursor":{"x":13}}],[0.07298399999999999,{"lines":{"22":[["scala> finder.                                                                            ",{}]]},"cursor":{"x":14}}],[0.771391,{"lines":{"22":[["scala> finder.f                                                                           ",{}]]},"cursor":{"x":15}}],[0.059835,{"lines":{"22":[["scala> finder.fi                                                                          ",{}]]},"cursor":{"x":16}}],[0.045625,{"lines":{"22":[["scala> finder.fin                                                                         ",{}]]},"cursor":{"x":17}}],[0.122365,{"lines":{"22":[["scala> finder.find                                                                        ",{}]]},"cursor":{"x":18}}],[0.096334,{"lines":{"22":[["scala> finder.finda                                                                       ",{}]]},"cursor":{"x":19}}],[0.18343,{"lines":{"22":[["scala> finder.findal                                                                      ",{}]]},"cursor":{"x":20}}],[0.304928,{"cursor":{"x":19}}],[4.1e-05,{"lines":{"22":[["scala> finder.finda                                                                       ",{}]]}}],[0.127869,{"cursor":{"x":18}}],[0.000289,{"lines":{"22":[["scala> finder.find                                                                        ",{}]]}}],[0.173083,{"lines":{"22":[["scala> finder.findA                                                                       ",{}]]},"cursor":{"x":19}}],[0.154001,{"lines":{"22":[["scala> finder.findAl                                                                      ",{}]]},"cursor":{"x":20}}],[0.528073,{"cursor":{"x":19}}],[0.002832,{"lines":{"22":[["scala> finder.findAllPaths                                                                ",{}]]},"cursor":{"x":26}}],[0.928165,{"lines":{"22":[["scala> finder.findAllPaths(                                                               ",{}]]},"cursor":{"x":27}}],[1.286468,{"lines":{"22":[["scala> finder.findAllPaths(r                                                              ",{}]]},"cursor":{"x":28}}],[0.02533,{"lines":{"22":[["scala> finder.findAllPaths(ro                                                             ",{}]]},"cursor":{"x":29}}],[0.101168,{"lines":{"22":[["scala> finder.findAllPaths(roo                                                            ",{}]]},"cursor":{"x":30}}],[0.176023,{"lines":{"22":[["scala> finder.findAllPaths(root                                                           ",{}]]},"cursor":{"x":31}}],[0.175666,{"lines":{"22":[["scala> finder.findAllPaths(root,                                                          ",{}]]},"cursor":{"x":32}}],[0.07261099999999999,{"cursor":{"x":33}}],[0.901811,{"lines":{"22":[["scala> finder.findAllPaths(root, n                                                        ",{}]]},"cursor":{"x":34}}],[0.337553,{"lines":{"22":[["scala> finder.findAllPaths(root, n7                                                       ",{}]]},"cursor":{"x":35}}],[0.38388,{"lines":{"22":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]]},"cursor":{"x":36}}],[0.223931,{"lines":{"0":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)                                                       ",{}]],"1":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"2":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)<--[LINK,6]--(5)                       ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> // ok.. so let's try some shortest path stuff                                      ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"7":[["<console>:20: error: value emptyExpander is not a member of object org.neo4j.graphdb.trave",{}]],"8":[["rsal.Traverser                                                                            ",{}]],"9":[["       val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"10":[["                                ^                                                         ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"13":[["warning: there were 2 deprecation warning(s); re-run with -deprecation for details        ",{}]],"14":[["expander: org.neo4j.graphdb.Expander = Expander[{BOTH=[Lorg.neo4j.graphdb.RelationshipType",{}]],"15":[[";@3757c175}]                                                                              ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]],"18":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"19":[["path.ShortestPath@6be42cde                                                                ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.04744,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> // ok.. so let's try some shortest path stuff                                      ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"4":[["<console>:20: error: value emptyExpander is not a member of object org.neo4j.graphdb.trave",{}]],"5":[["rsal.Traverser                                                                            ",{}]],"6":[["       val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"7":[["                                ^                                                         ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"10":[["warning: there were 2 deprecation warning(s); re-run with -deprecation for details        ",{}]],"11":[["expander: org.neo4j.graphdb.Expander = Expander[{BOTH=[Lorg.neo4j.graphdb.RelationshipType",{}]],"12":[[";@3757c175}]                                                                              ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]],"15":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"16":[["path.ShortestPath@6be42cde                                                                ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]],"19":[["<console>:25: error: not found: value n7                                                  ",{}]],"20":[["              finder.findAllPaths(root, n7)                                               ",{}]],"21":[["                                        ^                                                 ",{}]]}}],[0.005048,{"lines":{"0":[["scala> // ok.. so let's try some shortest path stuff                                      ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"3":[["<console>:20: error: value emptyExpander is not a member of object org.neo4j.graphdb.trave",{}]],"4":[["rsal.Traverser                                                                            ",{}]],"5":[["       val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"6":[["                                ^                                                         ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"9":[["warning: there were 2 deprecation warning(s); re-run with -deprecation for details        ",{}]],"10":[["expander: org.neo4j.graphdb.Expander = Expander[{BOTH=[Lorg.neo4j.graphdb.RelationshipType",{}]],"11":[[";@3757c175}]                                                                              ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]],"14":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"15":[["path.ShortestPath@6be42cde                                                                ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]],"18":[["<console>:25: error: not found: value n7                                                  ",{}]],"19":[["              finder.findAllPaths(root, n7)                                               ",{}]],"20":[["                                        ^                                                 ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.047992,{"lines":{"22":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]]},"cursor":{"x":36}}],[0.131776,{"cursor":{"x":35}}],[0.42575,{"cursor":{"x":34}}],[8.3e-05,{"lines":{"22":[["scala> finder.findAllPaths(root, n)                                                       ",{}]]}}],[0.169038,{"lines":{"22":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]]},"cursor":{"x":35}}],[0.125694,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"2":[["<console>:20: error: value emptyExpander is not a member of object org.neo4j.graphdb.trave",{}]],"3":[["rsal.Traverser                                                                            ",{}]],"4":[["       val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"5":[["                                ^                                                         ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"8":[["warning: there were 2 deprecation warning(s); re-run with -deprecation for details        ",{}]],"9":[["expander: org.neo4j.graphdb.Expander = Expander[{BOTH=[Lorg.neo4j.graphdb.RelationshipType",{}]],"10":[[";@3757c175}]                                                                              ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]],"13":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"14":[["path.ShortestPath@6be42cde                                                                ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]],"17":[["<console>:25: error: not found: value n7                                                  ",{}]],"18":[["              finder.findAllPaths(root, n7)                                               ",{}]],"19":[["                                        ^                                                 ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.187474,{"lines":{"0":[["scala> val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"1":[["<console>:20: error: value emptyExpander is not a member of object org.neo4j.graphdb.trave",{}]],"2":[["rsal.Traverser                                                                            ",{}]],"3":[["       val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"4":[["                                ^                                                         ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"7":[["warning: there were 2 deprecation warning(s); re-run with -deprecation for details        ",{}]],"8":[["expander: org.neo4j.graphdb.Expander = Expander[{BOTH=[Lorg.neo4j.graphdb.RelationshipType",{}]],"9":[[";@3757c175}]                                                                              ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]],"12":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"13":[["path.ShortestPath@6be42cde                                                                ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]],"16":[["<console>:25: error: not found: value n7                                                  ",{}]],"17":[["              finder.findAllPaths(root, n7)                                               ",{}]],"18":[["                                        ^                                                 ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"21":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]]}}],[0.00025,{"lines":{"0":[["<console>:20: error: value emptyExpander is not a member of object org.neo4j.graphdb.trave",{}]],"1":[["rsal.Traverser                                                                            ",{}]],"2":[["       val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"3":[["                                ^                                                         ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"6":[["warning: there were 2 deprecation warning(s); re-run with -deprecation for details        ",{}]],"7":[["expander: org.neo4j.graphdb.Expander = Expander[{BOTH=[Lorg.neo4j.graphdb.RelationshipType",{}]],"8":[[";@3757c175}]                                                                              ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]],"11":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"12":[["path.ShortestPath@6be42cde                                                                ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]],"15":[["<console>:25: error: not found: value n7                                                  ",{}]],"16":[["              finder.findAllPaths(root, n7)                                               ",{}]],"17":[["                                        ^                                                 ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"20":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.033156,{"lines":{"22":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]]},"cursor":{"x":36}}],[0.802656,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).                                                     ",{}]]},"cursor":{"x":37}}],[0.308129,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).a                                                    ",{}]]},"cursor":{"x":38}}],[0.091708,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).as                                                   ",{}]]},"cursor":{"x":39}}],[0.343835,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asS                                                  ",{}]]},"cursor":{"x":40}}],[0.248418,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asSc                                                 ",{}]]},"cursor":{"x":41}}],[0.064133,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asSca                                                ",{}]]},"cursor":{"x":42}}],[0.111375,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScal                                               ",{}]]},"cursor":{"x":43}}],[0.106252,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala                                              ",{}]]},"cursor":{"x":44}}],[0.200909,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.                                             ",{}]]},"cursor":{"x":45}}],[0.893742,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.p                                            ",{}]]},"cursor":{"x":46}}],[0.121024,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.pr                                           ",{}]]},"cursor":{"x":47}}],[0.070377,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.pri                                          ",{}]]},"cursor":{"x":48}}],[0.053322,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.prin                                         ",{}]]},"cursor":{"x":49}}],[0.08262899999999999,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.print                                        ",{}]]},"cursor":{"x":50}}],[0.087908,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.printl                                       ",{}]]},"cursor":{"x":51}}],[0.071989,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.println                                      ",{}]]},"cursor":{"x":52}}],[0.19264,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.println(                                     ",{}]]},"cursor":{"x":53}}],[0.937371,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.println(_                                    ",{}]]},"cursor":{"x":54}}],[0.4626,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.println(_)                                   ",{}]]},"cursor":{"x":55}}],[1.484162,{"cursor":{"x":54}}],[0.488569,{"cursor":{"x":53}}],[0.08325,{"cursor":{"x":52}}],[0.083852,{"cursor":{"x":51}}],[0.083707,{"cursor":{"x":50}}],[0.083441,{"cursor":{"x":49}}],[0.084249,{"cursor":{"x":48}}],[0.084442,{"cursor":{"x":47}}],[0.09572700000000001,{"cursor":{"x":46}}],[0.07167900000000001,{"cursor":{"x":45}}],[0.461959,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.fprintln(_)                                  ",{}]]},"cursor":{"x":46}}],[0.199738,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.foprintln(_)                                 ",{}]]},"cursor":{"x":47}}],[0.087126,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.forprintln(_)                                ",{}]]},"cursor":{"x":48}}],[0.104025,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.foreprintln(_)                               ",{}]]},"cursor":{"x":49}}],[0.06333800000000001,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.foreaprintln(_)                              ",{}]]},"cursor":{"x":50}}],[0.116403,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.foreacprintln(_)                             ",{}]]},"cursor":{"x":51}}],[0.124427,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.foreachprintln(_)                            ",{}]]},"cursor":{"x":52}}],[0.231024,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_)                           ",{}]]},"cursor":{"x":53}}],[0.974248,{"cursor":{"x":63}}],[0.609755,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]]},"cursor":{"x":64}}],[0.184174,{"lines":{"0":[["rsal.Traverser                                                                            ",{}]],"1":[["       val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"2":[["                                ^                                                         ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"5":[["warning: there were 2 deprecation warning(s); re-run with -deprecation for details        ",{}]],"6":[["expander: org.neo4j.graphdb.Expander = Expander[{BOTH=[Lorg.neo4j.graphdb.RelationshipType",{}]],"7":[[";@3757c175}]                                                                              ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]],"10":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"11":[["path.ShortestPath@6be42cde                                                                ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]],"14":[["<console>:25: error: not found: value n7                                                  ",{}]],"15":[["              finder.findAllPaths(root, n7)                                               ",{}]],"16":[["                                        ^                                                 ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"19":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.219961,{"lines":{"0":[["       val expander = Traverser.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"1":[["                                ^                                                         ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"4":[["warning: there were 2 deprecation warning(s); re-run with -deprecation for details        ",{}]],"5":[["expander: org.neo4j.graphdb.Expander = Expander[{BOTH=[Lorg.neo4j.graphdb.RelationshipType",{}]],"6":[[";@3757c175}]                                                                              ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]],"9":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"10":[["path.ShortestPath@6be42cde                                                                ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]],"13":[["<console>:25: error: not found: value n7                                                  ",{}]],"14":[["              finder.findAllPaths(root, n7)                                               ",{}]],"15":[["                                        ^                                                 ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"18":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]],"21":[["(0)--[LINK,7]-->(5)                                                                       ",{}]]}}],[0.000421,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"2":[["warning: there were 2 deprecation warning(s); re-run with -deprecation for details        ",{}]],"3":[["expander: org.neo4j.graphdb.Expander = Expander[{BOTH=[Lorg.neo4j.graphdb.RelationshipType",{}]],"4":[[";@3757c175}]                                                                              ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]],"7":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"8":[["path.ShortestPath@6be42cde                                                                ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]],"11":[["<console>:25: error: not found: value n7                                                  ",{}]],"12":[["              finder.findAllPaths(root, n7)                                               ",{}]],"13":[["                                        ^                                                 ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"16":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]],"19":[["(0)--[LINK,7]-->(5)                                                                       ",{}]],"20":[["(0)--[LINK,8]-->(5)                                                                       ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[2.125734,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]]},"cursor":{"x":64}}],[0.838917,{"cursor":{"x":63}}],[0.51527,{"cursor":{"x":62}}],[0.06962,{"cursor":{"x":61}}],[0.0827,{"cursor":{"x":60}}],[0.084118,{"cursor":{"x":59}}],[0.083041,{"cursor":{"x":58}}],[0.083597,{"cursor":{"x":57}}],[0.08445800000000001,{"cursor":{"x":56}}],[0.083214,{"cursor":{"x":55}}],[0.083493,{"cursor":{"x":54}}],[0.083812,{"cursor":{"x":53}}],[0.083091,{"cursor":{"x":52}}],[0.083402,{"cursor":{"x":51}}],[0.08473,{"cursor":{"x":50}}],[0.09954300000000001,{"cursor":{"x":49}}],[0.06729400000000001,{"cursor":{"x":48}}],[0.151372,{"cursor":{"x":7}}],[0.00041,{"lines":{"22":[["scala>                                                                                    ",{}]]}}],[2.242942,{"lines":{"22":[["scala> v                                                                                  ",{}]]},"cursor":{"x":8}}],[0.045772,{"lines":{"22":[["scala> va                                                                                 ",{}]]},"cursor":{"x":9}}],[0.049751,{"lines":{"22":[["scala> val                                                                                ",{}]]},"cursor":{"x":10}}],[0.061036,{"cursor":{"x":11}}],[0.153488,{"lines":{"22":[["scala> val n                                                                              ",{}]]},"cursor":{"x":12}}],[0.438435,{"lines":{"22":[["scala> val n7                                                                             ",{}]]},"cursor":{"x":13}}],[0.485111,{"cursor":{"x":14}}],[0.31493,{"lines":{"22":[["scala> val n7 =                                                                           ",{}]]},"cursor":{"x":15}}],[0.072009,{"cursor":{"x":16}}],[0.7980390000000001,{"lines":{"22":[["scala> val n7 = d                                                                         ",{}]]},"cursor":{"x":17}}],[0.137975,{"lines":{"22":[["scala> val n7 = db                                                                        ",{}]]},"cursor":{"x":18}}],[0.087924,{"lines":{"22":[["scala> val n7 = db.                                                                       ",{}]]},"cursor":{"x":19}}],[0.281592,{"lines":{"22":[["scala> val n7 = db.g                                                                      ",{}]]},"cursor":{"x":20}}],[0.134342,{"lines":{"22":[["scala> val n7 = db.ge                                                                     ",{}]]},"cursor":{"x":21}}],[0.056118,{"lines":{"22":[["scala> val n7 = db.get                                                                    ",{}]]},"cursor":{"x":22}}],[0.977654,{"lines":{"22":[["scala> val n7 = db.getN                                                                   ",{}]]},"cursor":{"x":23}}],[0.134574,{"lines":{"22":[["scala> val n7 = db.getNo                                                                  ",{}]]},"cursor":{"x":24}}],[0.09091399999999999,{"lines":{"22":[["scala> val n7 = db.getNod                                                                 ",{}]]},"cursor":{"x":25}}],[0.133774,{"lines":{"22":[["scala> val n7 = db.getNode                                                                ",{}]]},"cursor":{"x":26}}],[0.265657,{"lines":{"22":[["scala> val n7 = db.getNodeB                                                               ",{}]]},"cursor":{"x":27}}],[0.157407,{"lines":{"22":[["scala> val n7 = db.getNodeBy                                                              ",{}]]},"cursor":{"x":28}}],[0.210036,{"lines":{"22":[["scala> val n7 = db.getNodeByI                                                             ",{}]]},"cursor":{"x":29}}],[0.16984,{"lines":{"22":[["scala> val n7 = db.getNodeById                                                            ",{}]]},"cursor":{"x":30}}],[0.197832,{"lines":{"22":[["scala> val n7 = db.getNodeById(                                                           ",{}]]},"cursor":{"x":31}}],[0.262119,{"lines":{"22":[["scala> val n7 = db.getNodeById(7                                                          ",{}]]},"cursor":{"x":32}}],[0.216528,{"lines":{"22":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]]},"cursor":{"x":33}}],[0.2075,{"lines":{"0":[["scala> val expander = Traversal.emptyExpander().add(link, Direction.BOTH)                 ",{}]],"1":[["warning: there were 2 deprecation warning(s); re-run with -deprecation for details        ",{}]],"2":[["expander: org.neo4j.graphdb.Expander = Expander[{BOTH=[Lorg.neo4j.graphdb.RelationshipType",{}]],"3":[[";@3757c175}]                                                                              ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]],"6":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"7":[["path.ShortestPath@6be42cde                                                                ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]],"10":[["<console>:25: error: not found: value n7                                                  ",{}]],"11":[["              finder.findAllPaths(root, n7)                                               ",{}]],"12":[["                                        ^                                                 ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"15":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]],"18":[["(0)--[LINK,7]-->(5)                                                                       ",{}]],"19":[["(0)--[LINK,8]-->(5)                                                                       ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.206527,{"lines":{"0":[["warning: there were 2 deprecation warning(s); re-run with -deprecation for details        ",{}]],"1":[["expander: org.neo4j.graphdb.Expander = Expander[{BOTH=[Lorg.neo4j.graphdb.RelationshipType",{}]],"2":[[";@3757c175}]                                                                              ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]],"5":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"6":[["path.ShortestPath@6be42cde                                                                ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]],"9":[["<console>:25: error: not found: value n7                                                  ",{}]],"10":[["              finder.findAllPaths(root, n7)                                               ",{}]],"11":[["                                        ^                                                 ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"14":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]],"17":[["(0)--[LINK,7]-->(5)                                                                       ",{}]],"18":[["(0)--[LINK,8]-->(5)                                                                       ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]],"21":[["n7: org.neo4j.graphdb.Node = Node[7]                                                      ",{}]]}}],[4.7e-05,{"lines":{"0":[["expander: org.neo4j.graphdb.Expander = Expander[{BOTH=[Lorg.neo4j.graphdb.RelationshipType",{}]],"1":[[";@3757c175}]                                                                              ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]],"4":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"5":[["path.ShortestPath@6be42cde                                                                ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]],"8":[["<console>:25: error: not found: value n7                                                  ",{}]],"9":[["              finder.findAllPaths(root, n7)                                               ",{}]],"10":[["                                        ^                                                 ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"13":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]],"16":[["(0)--[LINK,7]-->(5)                                                                       ",{}]],"17":[["(0)--[LINK,8]-->(5)                                                                       ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]],"20":[["n7: org.neo4j.graphdb.Node = Node[7]                                                      ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[0.155023,{"lines":{"22":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]]},"cursor":{"x":33}}],[0.166827,{"cursor":{"x":7}}],[0.000467,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]]},"cursor":{"x":64}}],[0.7063199999999999,{"cursor":{"x":63}}],[0.513016,{"cursor":{"x":62}}],[0.071765,{"cursor":{"x":61}}],[0.083991,{"cursor":{"x":60}}],[0.083347,{"cursor":{"x":59}}],[0.08293,{"cursor":{"x":58}}],[0.083094,{"cursor":{"x":57}}],[0.084094,{"cursor":{"x":56}}],[0.083977,{"cursor":{"x":55}}],[0.083539,{"cursor":{"x":54}}],[0.084081,{"cursor":{"x":53}}],[0.08323700000000001,{"cursor":{"x":52}}],[0.084354,{"cursor":{"x":51}}],[0.083624,{"cursor":{"x":50}}],[0.096994,{"cursor":{"x":49}}],[0.07145799999999999,{"cursor":{"x":48}}],[0.083313,{"cursor":{"x":47}}],[0.083399,{"cursor":{"x":46}}],[0.083755,{"cursor":{"x":45}}],[0.084215,{"cursor":{"x":44}}],[0.083995,{"cursor":{"x":43}}],[0.08406,{"cursor":{"x":42}}],[0.084026,{"cursor":{"x":41}}],[0.08371099999999999,{"cursor":{"x":40}}],[0.08400199999999999,{"cursor":{"x":39}}],[0.083578,{"cursor":{"x":38}}],[0.084185,{"cursor":{"x":37}}],[0.096581,{"cursor":{"x":36}}],[0.071964,{"cursor":{"x":35}}],[0.472614,{"cursor":{"x":34}}],[0.000228,{"lines":{"22":[["scala> finder.findAllPaths(root, n).asScala.foreach(println(_))                           ",{}]]}}],[0.287898,{"lines":{"22":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]]},"cursor":{"x":35}}],[0.072001,{"lines":{"0":[[";@3757c175}]                                                                              ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]],"3":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"4":[["path.ShortestPath@6be42cde                                                                ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]],"7":[["<console>:25: error: not found: value n7                                                  ",{}]],"8":[["              finder.findAllPaths(root, n7)                                               ",{}]],"9":[["                                        ^                                                 ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"12":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]],"15":[["(0)--[LINK,7]-->(5)                                                                       ",{}]],"16":[["(0)--[LINK,8]-->(5)                                                                       ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]],"19":[["n7: org.neo4j.graphdb.Node = Node[7]                                                      ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.304607,{"lines":{"0":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]],"1":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"2":[["path.ShortestPath@6be42cde                                                                ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]],"5":[["<console>:25: error: not found: value n7                                                  ",{}]],"6":[["              finder.findAllPaths(root, n7)                                               ",{}]],"7":[["                                        ^                                                 ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"10":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]],"13":[["(0)--[LINK,7]-->(5)                                                                       ",{}]],"14":[["(0)--[LINK,8]-->(5)                                                                       ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]],"17":[["n7: org.neo4j.graphdb.Node = Node[7]                                                      ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"20":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"21":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]]}}],[4.7e-05,{"lines":{"0":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"1":[["path.ShortestPath@6be42cde                                                                ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]],"4":[["<console>:25: error: not found: value n7                                                  ",{}]],"5":[["              finder.findAllPaths(root, n7)                                               ",{}]],"6":[["                                        ^                                                 ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"9":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]],"12":[["(0)--[LINK,7]-->(5)                                                                       ",{}]],"13":[["(0)--[LINK,8]-->(5)                                                                       ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]],"16":[["n7: org.neo4j.graphdb.Node = Node[7]                                                      ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"19":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"20":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[6.594212,{"lines":{"22":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]]},"cursor":{"x":64}}],[0.694681,{"cursor":{"x":63}}],[0.523954,{"cursor":{"x":62}}],[0.061028,{"cursor":{"x":61}}],[0.08418200000000001,{"cursor":{"x":60}}],[0.081691,{"cursor":{"x":59}}],[0.083884,{"cursor":{"x":58}}],[0.08337,{"cursor":{"x":57}}],[0.084496,{"cursor":{"x":56}}],[0.083741,{"cursor":{"x":55}}],[0.084009,{"cursor":{"x":54}}],[0.08371099999999999,{"cursor":{"x":53}}],[0.08372400000000001,{"cursor":{"x":52}}],[0.084198,{"cursor":{"x":51}}],[0.08358,{"cursor":{"x":50}}],[0.09640799999999999,{"cursor":{"x":49}}],[0.071546,{"cursor":{"x":48}}],[0.083736,{"cursor":{"x":47}}],[0.083638,{"cursor":{"x":46}}],[0.084286,{"cursor":{"x":45}}],[0.08452800000000001,{"cursor":{"x":44}}],[0.083833,{"cursor":{"x":43}}],[0.084163,{"cursor":{"x":42}}],[0.083769,{"cursor":{"x":41}}],[0.08343100000000001,{"cursor":{"x":40}}],[0.086145,{"cursor":{"x":39}}],[0.08133600000000001,{"cursor":{"x":38}}],[0.084062,{"cursor":{"x":37}}],[0.096197,{"cursor":{"x":36}}],[0.072952,{"cursor":{"x":35}}],[0.584873,{"cursor":{"x":7}}],[0.000407,{"lines":{"22":[["scala>                                                                                    ",{}]]}}],[4.401914,{"lines":{"22":[["scala> r                                                                                  ",{}]]},"cursor":{"x":8}}],[0.093005,{"lines":{"22":[["scala> ro                                                                                 ",{}]]},"cursor":{"x":9}}],[0.127904,{"lines":{"22":[["scala> roo                                                                                ",{}]]},"cursor":{"x":10}}],[0.112079,{"lines":{"22":[["scala> root                                                                               ",{}]]},"cursor":{"x":11}}],[0.129869,{"lines":{"22":[["scala> root.                                                                              ",{}]]},"cursor":{"x":12}}],[0.198268,{"lines":{"22":[["scala> root.c                                                                             ",{}]]},"cursor":{"x":13}}],[0.192182,{"lines":{"22":[["scala> root.cr                                                                            ",{}]]},"cursor":{"x":14}}],[0.07993500000000001,{"lines":{"22":[["scala> root.cre                                                                           ",{}]]},"cursor":{"x":15}}],[0.58043,{"cursor":{"x":14}}],[0.0008970000000000001,{"lines":{"22":[["scala> root.createRelationshipTo                                                          ",{}]]},"cursor":{"x":32}}],[1.016368,{"lines":{"22":[["scala> root.createRelationshipTo(                                                         ",{}]]},"cursor":{"x":33}}],[0.204618,{"lines":{"22":[["scala> root.createRelationshipTo(n                                                        ",{}]]},"cursor":{"x":34}}],[0.277929,{"lines":{"22":[["scala> root.createRelationshipTo(n7                                                       ",{}]]},"cursor":{"x":35}}],[0.400565,{"lines":{"22":[["scala> root.createRelationshipTo(n7)                                                      ",{}]]},"cursor":{"x":36}}],[0.516646,{"cursor":{"x":35}}],[0.000157,{"lines":{"22":[["scala> root.createRelationshipTo(n7                                                       ",{}]]}}],[0.250433,{"lines":{"22":[["scala> root.createRelationshipTo(n7,                                                      ",{}]]},"cursor":{"x":36}}],[0.111794,{"cursor":{"x":37}}],[0.129143,{"lines":{"22":[["scala> root.createRelationshipTo(n7, l                                                    ",{}]]},"cursor":{"x":38}}],[0.0708,{"lines":{"22":[["scala> root.createRelationshipTo(n7, li                                                   ",{}]]},"cursor":{"x":39}}],[0.080572,{"lines":{"22":[["scala> root.createRelationshipTo(n7, lin                                                  ",{}]]},"cursor":{"x":40}}],[0.087393,{"lines":{"22":[["scala> root.createRelationshipTo(n7, link                                                 ",{}]]},"cursor":{"x":41}}],[0.215903,{"lines":{"22":[["scala> root.createRelationshipTo(n7, link)                                                ",{}]]},"cursor":{"x":42}}],[0.151992,{"lines":{"0":[["path.ShortestPath@6be42cde                                                                ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]],"3":[["<console>:25: error: not found: value n7                                                  ",{}]],"4":[["              finder.findAllPaths(root, n7)                                               ",{}]],"5":[["                                        ^                                                 ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"8":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]],"11":[["(0)--[LINK,7]-->(5)                                                                       ",{}]],"12":[["(0)--[LINK,8]-->(5)                                                                       ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]],"15":[["n7: org.neo4j.graphdb.Node = Node[7]                                                      ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"18":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"19":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> root.createRelationshipTo(n7, link)                                                ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.178531,{"lines":{"0":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]],"1":[["<console>:25: error: not found: value n7                                                  ",{}]],"2":[["              finder.findAllPaths(root, n7)                                               ",{}]],"3":[["                                        ^                                                 ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"6":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]],"9":[["(0)--[LINK,7]-->(5)                                                                       ",{}]],"10":[["(0)--[LINK,8]-->(5)                                                                       ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]],"13":[["n7: org.neo4j.graphdb.Node = Node[7]                                                      ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"16":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"17":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> root.createRelationshipTo(n7, link)                                                ",{}]],"20":[["res31: org.neo4j.graphdb.Relationship = Relationship[9]                                   ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[0.53256,{"lines":{"22":[["scala> root.createRelationshipTo(n7, link)                                                ",{}]]},"cursor":{"x":42}}],[0.129508,{"cursor":{"x":7}}],[0.000348,{"lines":{"22":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]]},"cursor":{"x":64}}],[0.600376,{"lines":{"0":[["<console>:25: error: not found: value n7                                                  ",{}]],"1":[["              finder.findAllPaths(root, n7)                                               ",{}]],"2":[["                                        ^                                                 ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"5":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]],"8":[["(0)--[LINK,7]-->(5)                                                                       ",{}]],"9":[["(0)--[LINK,8]-->(5)                                                                       ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]],"12":[["n7: org.neo4j.graphdb.Node = Node[7]                                                      ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"15":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"16":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> root.createRelationshipTo(n7, link)                                                ",{}]],"19":[["res31: org.neo4j.graphdb.Relationship = Relationship[9]                                   ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.166403,{"lines":{"0":[["              finder.findAllPaths(root, n7)                                               ",{}]],"1":[["                                        ^                                                 ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"4":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]],"7":[["(0)--[LINK,7]-->(5)                                                                       ",{}]],"8":[["(0)--[LINK,8]-->(5)                                                                       ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]],"11":[["n7: org.neo4j.graphdb.Node = Node[7]                                                      ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"14":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"15":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> root.createRelationshipTo(n7, link)                                                ",{}]],"18":[["res31: org.neo4j.graphdb.Relationship = Relationship[9]                                   ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"21":[["(0)--[LINK,9]-->(7)                                                                       ",{}]]}}],[0.000123,{"lines":{"0":[["                                        ^                                                 ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"3":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]],"6":[["(0)--[LINK,7]-->(5)                                                                       ",{}]],"7":[["(0)--[LINK,8]-->(5)                                                                       ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]],"10":[["n7: org.neo4j.graphdb.Node = Node[7]                                                      ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"13":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"14":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> root.createRelationshipTo(n7, link)                                                ",{}]],"17":[["res31: org.neo4j.graphdb.Relationship = Relationship[9]                                   ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"20":[["(0)--[LINK,9]-->(7)                                                                       ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[3.531121,{"lines":{"22":[["scala> /                                                                                  ",{}]]},"cursor":{"x":8}}],[0.135004,{"lines":{"22":[["scala> //                                                                                 ",{}]]},"cursor":{"x":9}}],[0.052267,{"cursor":{"x":10}}],[1.000878,{"lines":{"22":[["scala> // n                                                                               ",{}]]},"cursor":{"x":11}}],[0.032978,{"lines":{"22":[["scala> // no                                                                              ",{}]]},"cursor":{"x":12}}],[0.112149,{"lines":{"22":[["scala> // now                                                                             ",{}]]},"cursor":{"x":13}}],[0.056486,{"cursor":{"x":14}}],[0.06370000000000001,{"lines":{"22":[["scala> // now i                                                                           ",{}]]},"cursor":{"x":15}}],[0.095563,{"lines":{"22":[["scala> // now it                                                                          ",{}]]},"cursor":{"x":16}}],[0.064702,{"cursor":{"x":17}}],[0.175662,{"lines":{"22":[["scala> // now it d                                                                        ",{}]]},"cursor":{"x":18}}],[0.08784,{"lines":{"22":[["scala> // now it do                                                                       ",{}]]},"cursor":{"x":19}}],[0.08832,{"lines":{"22":[["scala> // now it doe                                                                      ",{}]]},"cursor":{"x":20}}],[0.055986,{"lines":{"22":[["scala> // now it does                                                                     ",{}]]},"cursor":{"x":21}}],[0.052399,{"lines":{"22":[["scala> // now it doesn                                                                    ",{}]]},"cursor":{"x":22}}],[0.035548,{"lines":{"22":[["scala> // now it doesn'                                                                   ",{}]]},"cursor":{"x":23}}],[0.102671,{"lines":{"22":[["scala> // now it doesn't                                                                  ",{}]]},"cursor":{"x":24}}],[0.032936,{"cursor":{"x":25}}],[0.112546,{"lines":{"22":[["scala> // now it doesn't s                                                                ",{}]]},"cursor":{"x":26}}],[0.071787,{"lines":{"22":[["scala> // now it doesn't sh                                                               ",{}]]},"cursor":{"x":27}}],[0.045414,{"lines":{"22":[["scala> // now it doesn't sho                                                              ",{}]]},"cursor":{"x":28}}],[0.09114800000000001,{"lines":{"22":[["scala> // now it doesn't show                                                             ",{}]]},"cursor":{"x":29}}],[0.06295199999999999,{"cursor":{"x":30}}],[0.08001800000000001,{"lines":{"22":[["scala> // now it doesn't show t                                                           ",{}]]},"cursor":{"x":31}}],[0.072105,{"lines":{"22":[["scala> // now it doesn't show th                                                          ",{}]]},"cursor":{"x":32}}],[0.120122,{"lines":{"22":[["scala> // now it doesn't show the                                                         ",{}]]},"cursor":{"x":33}}],[0.016515,{"cursor":{"x":34}}],[0.079427,{"lines":{"22":[["scala> // now it doesn't show the l                                                       ",{}]]},"cursor":{"x":35}}],[0.210948,{"lines":{"22":[["scala> // now it doesn't show the lo                                                      ",{}]]},"cursor":{"x":36}}],[0.083773,{"lines":{"22":[["scala> // now it doesn't show the lon                                                     ",{}]]},"cursor":{"x":37}}],[0.121085,{"lines":{"22":[["scala> // now it doesn't show the long                                                    ",{}]]},"cursor":{"x":38}}],[0.145813,{"lines":{"22":[["scala> // now it doesn't show the longe                                                   ",{}]]},"cursor":{"x":39}}],[0.054527,{"lines":{"22":[["scala> // now it doesn't show the longer                                                  ",{}]]},"cursor":{"x":40}}],[0.031766,{"cursor":{"x":41}}],[0.080904,{"lines":{"22":[["scala> // now it doesn't show the longer p                                                ",{}]]},"cursor":{"x":42}}],[0.07928,{"lines":{"22":[["scala> // now it doesn't show the longer pa                                               ",{}]]},"cursor":{"x":43}}],[0.06419900000000001,{"lines":{"22":[["scala> // now it doesn't show the longer pat                                              ",{}]]},"cursor":{"x":44}}],[0.06370099999999999,{"lines":{"22":[["scala> // now it doesn't show the longer path                                             ",{}]]},"cursor":{"x":45}}],[0.10383,{"lines":{"22":[["scala> // now it doesn't show the longer paths                                            ",{}]]},"cursor":{"x":46}}],[0.122124,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"2":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]],"5":[["(0)--[LINK,7]-->(5)                                                                       ",{}]],"6":[["(0)--[LINK,8]-->(5)                                                                       ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]],"9":[["n7: org.neo4j.graphdb.Node = Node[7]                                                      ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"12":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"13":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> root.createRelationshipTo(n7, link)                                                ",{}]],"16":[["res31: org.neo4j.graphdb.Relationship = Relationship[9]                                   ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"19":[["(0)--[LINK,9]-->(7)                                                                       ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> // now it doesn't show the longer paths                                            ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.000529,{"lines":{"0":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]],"1":[["res28: Iterable[org.neo4j.graphdb.Path] = [(0)--[LINK,7]-->(5), (0)--[LINK,8]-->(5)]      ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]],"4":[["(0)--[LINK,7]-->(5)                                                                       ",{}]],"5":[["(0)--[LINK,8]-->(5)                                                                       ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]],"8":[["n7: org.neo4j.graphdb.Node = Node[7]                                                      ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"11":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"12":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> root.createRelationshipTo(n7, link)                                                ",{}]],"15":[["res31: org.neo4j.graphdb.Relationship = Relationship[9]                                   ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"18":[["(0)--[LINK,9]-->(7)                                                                       ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> // now it doesn't show the longer paths                                            ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[2.00006,{"lines":{"22":[["scala> // now it doesn't show the longer paths                                            ",{}]]},"cursor":{"x":46}}],[0.309497,{"cursor":{"x":7}}],[0.000406,{"lines":{"22":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]]},"cursor":{"x":64}}],[1.186881,{"cursor":{"x":7}}],[0.000281,{"lines":{"22":[["scala> root.createRelationshipTo(n7, link)                                                ",{}]]},"cursor":{"x":42}}],[0.348051,{"cursor":{"x":7}}],[0.000271,{"lines":{"22":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]]},"cursor":{"x":64}}],[0.256339,{"cursor":{"x":7}}],[0.000252,{"lines":{"22":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]]},"cursor":{"x":33}}],[0.545335,{"cursor":{"x":7}}],[0.000244,{"lines":{"22":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]]},"cursor":{"x":64}}],[0.94245,{"cursor":{"x":7}}],[0.000434,{"lines":{"22":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]]},"cursor":{"x":33}}],[0.15609,{"cursor":{"x":7}}],[0.00033,{"lines":{"22":[["scala> finder.findAllPaths(root, n5).asScala.foreach(println(_))                          ",{}]]},"cursor":{"x":64}}],[0.116498,{"cursor":{"x":36}}],[4.8e-05,{"lines":{"22":[["scala> finder.findAllPaths(root, n5)                                                      ",{}]]}}],[0.478307,{"cursor":{"x":34}}],[0.000172,{"lines":{"22":[["scala> finder.findAllPaths(root, n7)                                                      ",{}]]},"cursor":{"x":36}}],[0.375491,{"cursor":{"x":7}}],[0.001608,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10)       ",{}]]},"cursor":{"x":83}}],[1.089944,{"cursor":{"x":82}}],[0.481114,{"cursor":{"x":81}}],[0.084106,{"cursor":{"x":80}}],[0.083426,{"cursor":{"x":79}}],[0.08358599999999999,{"cursor":{"x":78}}],[0.084331,{"cursor":{"x":77}}],[0.08379300000000001,{"cursor":{"x":76}}],[0.083868,{"cursor":{"x":75}}],[0.09764200000000001,{"cursor":{"x":74}}],[0.070614,{"cursor":{"x":73}}],[0.083873,{"cursor":{"x":72}}],[0.084061,{"cursor":{"x":71}}],[0.084095,{"cursor":{"x":70}}],[0.083576,{"cursor":{"x":69}}],[0.08361200000000001,{"cursor":{"x":68}}],[0.083679,{"cursor":{"x":67}}],[0.08365599999999999,{"cursor":{"x":66}}],[0.08425199999999999,{"cursor":{"x":65}}],[2.195603,{"cursor":{"x":83}}],[0.273624,{"cursor":{"x":82}}],[0.000232,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 10        ",{}]]}}],[0.500292,{"cursor":{"x":81}}],[0.000105,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander, 1         ",{}]]}}],[0.08472399999999999,{"cursor":{"x":80}}],[0.00039,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander,           ",{}]]}}],[0.08330799999999999,{"cursor":{"x":79}}],[0.000136,{}],[0.093294,{"cursor":{"x":78}}],[3.8e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expander            ",{}]]}}],[0.073564,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expande             ",{}]]},"cursor":{"x":77}}],[0.08554,{"cursor":{"x":76}}],[0.000288,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expand              ",{}]]}}],[0.082436,{"cursor":{"x":75}}],[0.000144,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expan               ",{}]]}}],[0.083215,{"cursor":{"x":74}}],[0.000215,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(expa                ",{}]]}}],[0.08308400000000001,{"cursor":{"x":73}}],[9.500000000000001e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(exp                 ",{}]]}}],[0.08369699999999999,{"cursor":{"x":72}}],[0.000119,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(ex                  ",{}]]}}],[0.08379499999999999,{"cursor":{"x":71}}],[0.000133,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(e                   ",{}]]}}],[0.083663,{"cursor":{"x":70}}],[0.000113,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath(                    ",{}]]}}],[0.08434800000000001,{"cursor":{"x":69}}],[0.000485,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPath                     ",{}]]}}],[0.082483,{"cursor":{"x":68}}],[0.000183,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPat                      ",{}]]}}],[0.08355700000000001,{"cursor":{"x":67}}],[6.999999999999999e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestPa                       ",{}]]}}],[0.083231,{"cursor":{"x":66}}],[0.000152,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortestP                        ",{}]]}}],[0.093942,{"cursor":{"x":65}}],[4.6e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortest                         ",{}]]}}],[0.076991,{"cursor":{"x":64}}],[0.000253,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shortes                          ",{}]]}}],[0.07986500000000001,{"cursor":{"x":63}}],[9.899999999999999e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shorte                           ",{}]]}}],[0.0849,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.short                            ",{}]]},"cursor":{"x":62}}],[0.084955,{"cursor":{"x":61}}],[0.000187,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.shor                             ",{}]]}}],[0.082466,{"cursor":{"x":60}}],[0.000108,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.sho                              ",{}]]}}],[0.08555400000000001,{"cursor":{"x":59}}],[0.000212,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.sh                               ",{}]]}}],[0.08135100000000001,{"cursor":{"x":58}}],[0.000113,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.s                                ",{}]]}}],[0.084203,{"cursor":{"x":57}}],[0.000113,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]]}}],[0.08334800000000001,{"cursor":{"x":56}}],[9.500000000000001e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory                                  ",{}]]}}],[0.397204,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]]},"cursor":{"x":57}}],[1.195303,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.f                                ",{}]]},"cursor":{"x":58}}],[2.330963,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]]},"cursor":{"x":57}}],[0.654537,{"lines":{"0":[["(0)--[LINK,7]-->(5)                                                                       ",{}]],"1":[["(0)--[LINK,8]-->(5)                                                                       ",{}]],"3":[["scala> val n7 = db.getNodeById(7)                                                         ",{}]],"4":[["n7: org.neo4j.graphdb.Node = Node[7]                                                      ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"7":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"8":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"10":[["scala> root.createRelationshipTo(n7, link)                                                ",{}]],"11":[["res31: org.neo4j.graphdb.Relationship = Relationship[9]                                   ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"14":[["(0)--[LINK,9]-->(7)                                                                       ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> // now it doesn't show the longer paths                                            ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"19":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"20":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]]}}],[0.688822,{"lines":{"0":[["n7: org.neo4j.graphdb.Node = Node[7]                                                      ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"3":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"4":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"6":[["scala> root.createRelationshipTo(n7, link)                                                ",{}]],"7":[["res31: org.neo4j.graphdb.Relationship = Relationship[9]                                   ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"10":[["(0)--[LINK,9]-->(7)                                                                       ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> // now it doesn't show the longer paths                                            ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"15":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"16":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]]}}],[0.346042,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.a                                ",{}]]},"cursor":{"x":58}}],[0.094917,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.al                               ",{}]]},"cursor":{"x":59}}],[0.167943,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.all                              ",{}]]},"cursor":{"x":60}}],[0.367607,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allS                             ",{}]]},"cursor":{"x":61}}],[0.15314,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSi                            ",{}]]},"cursor":{"x":62}}],[0.033204,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSim                           ",{}]]},"cursor":{"x":63}}],[0.589735,{"cursor":{"x":62}}],[0.00278,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths                   ",{}]]},"cursor":{"x":71}}],[0.435425,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(                  ",{}]]},"cursor":{"x":72}}],[0.242093,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(e                 ",{}]]},"cursor":{"x":73}}],[0.279679,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(ex                ",{}]]},"cursor":{"x":74}}],[0.5379699999999999,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(exp               ",{}]]},"cursor":{"x":75}}],[0.184019,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expa              ",{}]]},"cursor":{"x":76}}],[0.11837,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expan             ",{}]]},"cursor":{"x":77}}],[0.087606,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expand            ",{}]]},"cursor":{"x":78}}],[0.167994,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expande           ",{}]]},"cursor":{"x":79}}],[0.047886,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander          ",{}]]},"cursor":{"x":80}}],[0.264206,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander,         ",{}]]},"cursor":{"x":81}}],[0.0557,{"cursor":{"x":82}}],[0.170037,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander, 1       ",{}]]},"cursor":{"x":83}}],[0.09402199999999999,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander, 10      ",{}]]},"cursor":{"x":84}}],[0.184387,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander, 10)     ",{}]]},"cursor":{"x":85}}],[0.128732,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"2":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"3":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> root.createRelationshipTo(n7, link)                                                ",{}]],"6":[["res31: org.neo4j.graphdb.Relationship = Relationship[9]                                   ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"9":[["(0)--[LINK,9]-->(7)                                                                       ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> // now it doesn't show the longer paths                                            ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"14":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"15":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"18":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"19":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander, 10)     ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.158819,{"lines":{"0":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"1":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> root.createRelationshipTo(n7, link)                                                ",{}]],"4":[["res31: org.neo4j.graphdb.Relationship = Relationship[9]                                   ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"7":[["(0)--[LINK,9]-->(7)                                                                       ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> // now it doesn't show the longer paths                                            ",{}]],"11":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"12":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"13":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"16":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"17":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander, 10)     ",{}]],"20":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"21":[["path.AllSimplePaths@6f7491f8                                                              ",{}]]}}],[0.002859,{"lines":{"0":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> root.createRelationshipTo(n7, link)                                                ",{}]],"3":[["res31: org.neo4j.graphdb.Relationship = Relationship[9]                                   ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"6":[["(0)--[LINK,9]-->(7)                                                                       ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> // now it doesn't show the longer paths                                            ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"11":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"12":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"15":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"16":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander, 10)     ",{}]],"19":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"20":[["path.AllSimplePaths@6f7491f8                                                              ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.149453,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander, 10)     ",{}]]},"cursor":{"x":85}}],[0.464018,{"cursor":{"x":7}}],[0.000333,{"lines":{"22":[["scala> // now it doesn't show the longer paths                                            ",{}]]},"cursor":{"x":46}}],[0.536021,{"cursor":{"x":7}}],[0.024107,{"lines":{"22":[["scala>                                                                                    ",{}]]}}],[5.3e-05,{"lines":{"22":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]]},"cursor":{"x":64}}],[1.384025,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> root.createRelationshipTo(n7, link)                                                ",{}]],"2":[["res31: org.neo4j.graphdb.Relationship = Relationship[9]                                   ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"5":[["(0)--[LINK,9]-->(7)                                                                       ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> // now it doesn't show the longer paths                                            ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"10":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"11":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"14":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"15":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander, 10)     ",{}]],"18":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"19":[["path.AllSimplePaths@6f7491f8                                                              ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.411848,{"lines":{"0":[["res31: org.neo4j.graphdb.Relationship = Relationship[9]                                   ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"3":[["(0)--[LINK,9]-->(7)                                                                       ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> // now it doesn't show the longer paths                                            ",{}]],"7":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"8":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"9":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"12":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"13":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander, 10)     ",{}]],"16":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"17":[["path.AllSimplePaths@6f7491f8                                                              ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"20":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"21":[["(0)--[LINK,7]-->(5)<--[LINK,4]--(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                       ",{}]]}}],[0.008487,{"lines":{"0":[["scala> // now it doesn't show the longer paths                                            ",{}]],"2":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"3":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"4":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"7":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"8":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander, 10)     ",{}]],"11":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"12":[["path.AllSimplePaths@6f7491f8                                                              ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"15":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"16":[["(0)--[LINK,7]-->(5)<--[LINK,4]--(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                       ",{}]],"17":[["(0)--[LINK,8]-->(5)<--[LINK,4]--(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                       ",{}]],"18":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)--[LINK,6]-->(7)                                       ",{}]],"19":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"20":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"21":[["(0)--[LINK,9]-->(7)                                                                       ",{}]]}}],[0.008722000000000001,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"2":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"3":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"6":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"7":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander, 10)     ",{}]],"10":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"11":[["path.AllSimplePaths@6f7491f8                                                              ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"14":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"15":[["(0)--[LINK,7]-->(5)<--[LINK,4]--(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                       ",{}]],"16":[["(0)--[LINK,8]-->(5)<--[LINK,4]--(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                       ",{}]],"17":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)--[LINK,6]-->(7)                                       ",{}]],"18":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"19":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"20":[["(0)--[LINK,9]-->(7)                                                                       ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[5.022676,{"lines":{"22":[["scala> /                                                                                  ",{}]]},"cursor":{"x":8}}],[0.149339,{"lines":{"22":[["scala> //                                                                                 ",{}]]},"cursor":{"x":9}}],[0.078489,{"cursor":{"x":10}}],[0.825774,{"lines":{"22":[["scala> // a                                                                               ",{}]]},"cursor":{"x":11}}],[0.101673,{"lines":{"22":[["scala> // al                                                                              ",{}]]},"cursor":{"x":12}}],[0.146309,{"lines":{"22":[["scala> // all                                                                             ",{}]]},"cursor":{"x":13}}],[0.078749,{"cursor":{"x":14}}],[0.071618,{"lines":{"22":[["scala> // all s                                                                           ",{}]]},"cursor":{"x":15}}],[0.096687,{"lines":{"22":[["scala> // all si                                                                          ",{}]]},"cursor":{"x":16}}],[0.06267399999999999,{"lines":{"22":[["scala> // all sim                                                                         ",{}]]},"cursor":{"x":17}}],[0.045409,{"lines":{"22":[["scala> // all simp                                                                        ",{}]]},"cursor":{"x":18}}],[0.146667,{"lines":{"22":[["scala> // all simpl                                                                       ",{}]]},"cursor":{"x":19}}],[0.103971,{"lines":{"22":[["scala> // all simple                                                                      ",{}]]},"cursor":{"x":20}}],[0.111966,{"cursor":{"x":21}}],[0.113842,{"lines":{"22":[["scala> // all simple p                                                                    ",{}]]},"cursor":{"x":22}}],[0.07865999999999999,{"lines":{"22":[["scala> // all simple pa                                                                   ",{}]]},"cursor":{"x":23}}],[0.095555,{"lines":{"22":[["scala> // all simple pat                                                                  ",{}]]},"cursor":{"x":24}}],[0.049572,{"lines":{"22":[["scala> // all simple path                                                                 ",{}]]},"cursor":{"x":25}}],[0.183116,{"lines":{"22":[["scala> // all simple paths                                                                ",{}]]},"cursor":{"x":26}}],[0.965737,{"cursor":{"x":27}}],[0.113807,{"lines":{"22":[["scala> // all simple paths b                                                              ",{}]]},"cursor":{"x":28}}],[0.154019,{"lines":{"22":[["scala> // all simple paths be                                                             ",{}]]},"cursor":{"x":29}}],[0.07877099999999999,{"lines":{"22":[["scala> // all simple paths bet                                                            ",{}]]},"cursor":{"x":30}}],[0.190804,{"lines":{"22":[["scala> // all simple paths betw                                                           ",{}]]},"cursor":{"x":31}}],[0.056056,{"lines":{"22":[["scala> // all simple paths betwe                                                          ",{}]]},"cursor":{"x":32}}],[0.120837,{"lines":{"22":[["scala> // all simple paths betwee                                                         ",{}]]},"cursor":{"x":33}}],[0.08812300000000001,{"lines":{"22":[["scala> // all simple paths between                                                        ",{}]]},"cursor":{"x":34}}],[0.062987,{"cursor":{"x":35}}],[0.248018,{"lines":{"22":[["scala> // all simple paths between or                                                     ",{}]]},"cursor":{"x":37}}],[0.112021,{"lines":{"22":[["scala> // all simple paths between oro                                                    ",{}]]},"cursor":{"x":38}}],[0.12892,{"lines":{"22":[["scala> // all simple paths between orot                                                   ",{}]]},"cursor":{"x":39}}],[0.103167,{"cursor":{"x":40}}],[0.09651800000000001,{"lines":{"22":[["scala> // all simple paths between orot a                                                 ",{}]]},"cursor":{"x":41}}],[0.07971,{"lines":{"22":[["scala> // all simple paths between orot an                                                ",{}]]},"cursor":{"x":42}}],[0.30437,{"cursor":{"x":41}}],[0.00018,{"lines":{"22":[["scala> // all simple paths between orot a                                                 ",{}]]}}],[0.128925,{"cursor":{"x":40}}],[0.000226,{"lines":{"22":[["scala> // all simple paths between orot                                                   ",{}]]}}],[0.171849,{"cursor":{"x":39}}],[6.600000000000001e-05,{}],[0.116741,{"cursor":{"x":38}}],[0.000632,{"lines":{"22":[["scala> // all simple paths between oro                                                    ",{}]]}}],[0.140767,{"cursor":{"x":37}}],[0.000686,{"lines":{"22":[["scala> // all simple paths between or                                                     ",{}]]}}],[0.152111,{"cursor":{"x":36}}],[0.000692,{"lines":{"22":[["scala> // all simple paths between o                                                      ",{}]]}}],[0.134898,{"cursor":{"x":35}}],[0.000243,{"lines":{"22":[["scala> // all simple paths between                                                        ",{}]]}}],[0.111422,{"lines":{"22":[["scala> // all simple paths between r                                                      ",{}]]},"cursor":{"x":36}}],[0.128106,{"lines":{"22":[["scala> // all simple paths between ro                                                     ",{}]]},"cursor":{"x":37}}],[0.111814,{"lines":{"22":[["scala> // all simple paths between roo                                                    ",{}]]},"cursor":{"x":38}}],[0.126486,{"lines":{"22":[["scala> // all simple paths between root                                                   ",{}]]},"cursor":{"x":39}}],[0.033467,{"cursor":{"x":40}}],[0.12018,{"lines":{"22":[["scala> // all simple paths between root a                                                 ",{}]]},"cursor":{"x":41}}],[0.024074,{"lines":{"22":[["scala> // all simple paths between root an                                                ",{}]]},"cursor":{"x":42}}],[0.144505,{"lines":{"22":[["scala> // all simple paths between root and                                               ",{}]]},"cursor":{"x":43}}],[0.015367,{"cursor":{"x":44}}],[0.273411,{"lines":{"22":[["scala> // all simple paths between root and n                                             ",{}]]},"cursor":{"x":45}}],[0.24648,{"lines":{"22":[["scala> // all simple paths between root and n7                                            ",{}]]},"cursor":{"x":46}}],[0.3118,{"lines":{"0":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"1":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"2":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"5":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"6":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander, 10)     ",{}]],"9":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"10":[["path.AllSimplePaths@6f7491f8                                                              ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"13":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"14":[["(0)--[LINK,7]-->(5)<--[LINK,4]--(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                       ",{}]],"15":[["(0)--[LINK,8]-->(5)<--[LINK,4]--(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                       ",{}]],"16":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)--[LINK,6]-->(7)                                       ",{}]],"17":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"18":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"19":[["(0)--[LINK,9]-->(7)                                                                       ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> // all simple paths between root and n7                                            ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.000502,{"lines":{"0":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"1":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"4":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"5":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander, 10)     ",{}]],"8":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"9":[["path.AllSimplePaths@6f7491f8                                                              ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"12":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"13":[["(0)--[LINK,7]-->(5)<--[LINK,4]--(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                       ",{}]],"14":[["(0)--[LINK,8]-->(5)<--[LINK,4]--(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                       ",{}]],"15":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)--[LINK,6]-->(7)                                       ",{}]],"16":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"17":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"18":[["(0)--[LINK,9]-->(7)                                                                       ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> // all simple paths between root and n7                                            ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[12.84295,{"lines":{"22":[["scala> // all simple paths between root and n7                                            ",{}]]},"cursor":{"x":46}}],[0.124317,{"cursor":{"x":7}}],[0.000304,{"lines":{"22":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]]},"cursor":{"x":64}}],[1.452091,{"cursor":{"x":7}}],[0.00025,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander, 10)     ",{}]]},"cursor":{"x":85}}],[0.595393,{"cursor":{"x":84}}],[0.48974,{"cursor":{"x":85}}],[0.518407,{"cursor":{"x":84}}],[0.000196,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander, 10      ",{}]]}}],[0.512296,{"cursor":{"x":83}}],[0.000268,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander, 1       ",{}]]}}],[0.071397,{"cursor":{"x":82}}],[0.00019,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander,         ",{}]]}}],[0.083608,{"cursor":{"x":81}}],[0.0002,{}],[0.082984,{"cursor":{"x":80}}],[0.000189,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expander          ",{}]]}}],[0.083825,{"cursor":{"x":79}}],[0.00019,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expande           ",{}]]}}],[0.08384,{"cursor":{"x":78}}],[0.000193,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expand            ",{}]]}}],[0.083491,{"cursor":{"x":77}}],[0.000204,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expan             ",{}]]}}],[0.083812,{"cursor":{"x":76}}],[0.000259,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(expa              ",{}]]}}],[0.08559700000000001,{"cursor":{"x":75}}],[6.4e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(exp               ",{}]]}}],[0.081688,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(ex                ",{}]]},"cursor":{"x":74}}],[0.087964,{"cursor":{"x":73}}],[9.000000000000001e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(e                 ",{}]]}}],[0.082153,{"cursor":{"x":72}}],[0.000166,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths(                  ",{}]]}}],[0.083829,{"cursor":{"x":71}}],[5.5e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePaths                   ",{}]]}}],[0.098537,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePath                    ",{}]]},"cursor":{"x":70}}],[0.06830899999999999,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePat                     ",{}]]},"cursor":{"x":69}}],[0.08346099999999999,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimplePa                      ",{}]]},"cursor":{"x":68}}],[0.083623,{"cursor":{"x":67}}],[5.8e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimpleP                       ",{}]]}}],[0.083625,{"cursor":{"x":66}}],[5.1e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimple                        ",{}]]}}],[0.08291,{"cursor":{"x":65}}],[8.3e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimpl                         ",{}]]}}],[0.083686,{"cursor":{"x":64}}],[5.7e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSimp                          ",{}]]}}],[0.082986,{"cursor":{"x":63}}],[0.000257,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSim                           ",{}]]}}],[0.083576,{"cursor":{"x":62}}],[5.7e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allSi                            ",{}]]}}],[0.08323899999999999,{"cursor":{"x":61}}],[0.000324,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allS                             ",{}]]}}],[0.083455,{"cursor":{"x":60}}],[5.1e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.all                              ",{}]]}}],[0.415521,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allP                             ",{}]]},"cursor":{"x":61}}],[0.173218,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allPa                            ",{}]]},"cursor":{"x":62}}],[0.080064,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allPat                           ",{}]]},"cursor":{"x":63}}],[0.097764,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allPath                          ",{}]]},"cursor":{"x":64}}],[0.537515,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allPat                           ",{}]]},"cursor":{"x":63}}],[0.005892,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allPaths                         ",{}]]},"cursor":{"x":65}}],[0.468147,{"lines":{"0":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"1":[["path.AllSimplePaths@6f7491f8                                                              ",{}]],"3":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"4":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"5":[["(0)--[LINK,7]-->(5)<--[LINK,4]--(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                       ",{}]],"6":[["(0)--[LINK,8]-->(5)<--[LINK,4]--(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                       ",{}]],"7":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)--[LINK,6]-->(7)                                       ",{}]],"8":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"9":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"10":[["(0)--[LINK,9]-->(7)                                                                       ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> // all simple paths between root and n7                                            ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allPaths                         ",{}]],"15":[["                                                                                          ",{}]],"16":[["                                                                                          ",{}]],"17":[["def allPaths(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Path]     ",{}]],"18":[["                                                                                          ",{}]],"19":[["def allPaths(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.graphdb.Pa",{}]],"20":[["th]                                                                                       ",{}]]}}],[0.665239,{"lines":{"0":[["(0)--[LINK,7]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"1":[["(0)--[LINK,8]-->(5)--[LINK,6]-->(7)                                                       ",{}]],"2":[["(0)--[LINK,9]-->(7)                                                                       ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> // all simple paths between root and n7                                            ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allPaths                         ",{}]],"7":[["                                                                                          ",{}]],"8":[["                                                                                          ",{}]],"9":[["def allPaths(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Path]     ",{}]],"10":[["                                                                                          ",{}]],"11":[["def allPaths(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.graphdb.Pa",{}]],"12":[["th]                                                                                       ",{}]]}}],[2.254731,{"cursor":{"x":64}}],[0.000104,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allPath                          ",{}]]}}],[0.154777,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allPat                           ",{}]]},"cursor":{"x":63}}],[0.151726,{"cursor":{"x":62}}],[0.000162,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allPa                            ",{}]]}}],[0.160192,{"cursor":{"x":61}}],[0.000221,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allP                             ",{}]]}}],[0.151233,{"cursor":{"x":60}}],[7.6e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.all                              ",{}]]}}],[0.152195,{"cursor":{"x":59}}],[0.000245,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.al                               ",{}]]}}],[0.151881,{"cursor":{"x":58}}],[4e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.a                                ",{}]]}}],[0.179118,{"cursor":{"x":57}}],[5.2e-05,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]]}}],[0.831216,{"lines":{"0":[["scala> // all simple paths between root and n7                                            ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allPaths                         ",{}]],"4":[["                                                                                          ",{}]],"5":[["def allPaths(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Path]     ",{}]],"6":[["                                                                                          ",{}]],"7":[["def allPaths(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.graphdb.Pa",{}]],"8":[["th]                                                                                       ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allPaths                         ",{}]],"11":[["                                                                                          ",{}]],"12":[["                                                                                          ",{}]],"13":[["def allPaths(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Path]     ",{}]],"14":[["                                                                                          ",{}]],"15":[["def allPaths(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.graphdb.Pa",{}]],"16":[["th]                                                                                       ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"19":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"20":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]]}}],[0.321945,{"lines":{"0":[["                                                                                          ",{}]],"1":[["def allPaths(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Path]     ",{}]],"2":[["                                                                                          ",{}]],"3":[["def allPaths(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.graphdb.Pa",{}]],"4":[["th]                                                                                       ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.allPaths                         ",{}]],"7":[["                                                                                          ",{}]],"8":[["                                                                                          ",{}]],"9":[["def allPaths(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Path]     ",{}]],"10":[["                                                                                          ",{}]],"11":[["def allPaths(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.graphdb.Pa",{}]],"12":[["th]                                                                                       ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"15":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"16":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]]}}],[1.313896,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.p                                ",{}]]},"cursor":{"x":58}}],[0.066287,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pa                               ",{}]]},"cursor":{"x":59}}],[0.070938,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pat                              ",{}]]},"cursor":{"x":60}}],[0.047821,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.path                             ",{}]]},"cursor":{"x":61}}],[0.144432,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.paths                            ",{}]]},"cursor":{"x":62}}],[0.327727,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsW                           ",{}]]},"cursor":{"x":63}}],[0.216383,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWi                          ",{}]]},"cursor":{"x":64}}],[0.08788,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWit                         ",{}]]},"cursor":{"x":65}}],[0.073587,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWith                        ",{}]]},"cursor":{"x":66}}],[0.200589,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithL                       ",{}]]},"cursor":{"x":67}}],[0.157608,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLe                      ",{}]]},"cursor":{"x":68}}],[0.120395,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLen                     ",{}]]},"cursor":{"x":69}}],[0.095494,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLeng                    ",{}]]},"cursor":{"x":70}}],[0.136164,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLengt                   ",{}]]},"cursor":{"x":71}}],[0.079765,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength                  ",{}]]},"cursor":{"x":72}}],[0.542531,{"cursor":{"x":71}}],[0.008169000000000001,{"cursor":{"x":72}}],[0.475894,{"lines":{"6":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"7":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"8":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"11":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"12":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"14":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength                  ",{}]],"15":[["                                                                                          ",{}]],"16":[["                                                                                          ",{}]],"17":[["def pathsWithLength(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Pat",{}]],"18":[["h]                                                                                        ",{}]],"19":[["def pathsWithLength(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.gra",{}]],"20":[["phdb.Path]                                                                                ",{}]]}}],[1.122959,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(                 ",{}]]},"cursor":{"x":73}}],[1.850163,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(e                ",{}]]},"cursor":{"x":74}}],[0.256494,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(ex               ",{}]]},"cursor":{"x":75}}],[0.088009,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(exp              ",{}]]},"cursor":{"x":76}}],[0.136094,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expa             ",{}]]},"cursor":{"x":77}}],[0.143742,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expan            ",{}]]},"cursor":{"x":78}}],[0.049654,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expand           ",{}]]},"cursor":{"x":79}}],[0.174575,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expande          ",{}]]},"cursor":{"x":80}}],[0.079735,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander         ",{}]]},"cursor":{"x":81}}],[0.320979,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander,        ",{}]]},"cursor":{"x":82}}],[0.031057,{"cursor":{"x":83}}],[1.883082,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander, 3      ",{}]]},"cursor":{"x":84}}],[0.406391,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander, 3)     ",{}]]},"cursor":{"x":85}}],[0.703614,{"lines":{"0":[["def allPaths(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Path]     ",{}]],"1":[["                                                                                          ",{}]],"2":[["def allPaths(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.graphdb.Pa",{}]],"3":[["th]                                                                                       ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"6":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"7":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"10":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"11":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength                  ",{}]],"14":[["                                                                                          ",{}]],"16":[["def pathsWithLength(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Pat",{}]],"17":[["h]                                                                                        ",{}]],"18":[["def pathsWithLength(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.gra",{}]],"19":[["phdb.Path]                                                                                ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander, 3)     ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.09921199999999999,{"lines":{"0":[["def allPaths(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.graphdb.Pa",{}]],"1":[["th]                                                                                       ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"4":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"5":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"8":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"9":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength                  ",{}]],"13":[["                                                                                          ",{}]],"14":[["def pathsWithLength(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Pat",{}]],"15":[["h]                                                                                        ",{}]],"16":[["def pathsWithLength(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.gra",{}]],"17":[["phdb.Path]                                                                                ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander, 3)     ",{}]],"20":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"21":[["path.ShortestPath@3cb59dff                                                                ",{}]]}}],[0.000505,{"lines":{"0":[["th]                                                                                       ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"3":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"4":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"7":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"8":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength                  ",{}]],"11":[["                                                                                          ",{}]],"13":[["def pathsWithLength(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Pat",{}]],"14":[["h]                                                                                        ",{}]],"15":[["def pathsWithLength(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.gra",{}]],"16":[["phdb.Path]                                                                                ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander, 3)     ",{}]],"19":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"20":[["path.ShortestPath@3cb59dff                                                                ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[0.957398,{"lines":{"22":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander, 3)     ",{}]]},"cursor":{"x":85}}],[0.134748,{"cursor":{"x":7}}],[0.000354,{"lines":{"22":[["scala> // all simple paths between root and n7                                            ",{}]]},"cursor":{"x":46}}],[0.575108,{"cursor":{"x":7}}],[0.000423,{"lines":{"22":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]]},"cursor":{"x":64}}],[0.9839059999999999,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"2":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"3":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"6":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"7":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength                  ",{}]],"10":[["                                                                                          ",{}]],"12":[["def pathsWithLength(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Pat",{}]],"13":[["h]                                                                                        ",{}]],"14":[["def pathsWithLength(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.gra",{}]],"15":[["phdb.Path]                                                                                ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander, 3)     ",{}]],"18":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"19":[["path.ShortestPath@3cb59dff                                                                ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.189531,{"lines":{"0":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"1":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"2":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"5":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"6":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength                  ",{}]],"9":[["                                                                                          ",{}]],"11":[["def pathsWithLength(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Pat",{}]],"12":[["h]                                                                                        ",{}]],"13":[["def pathsWithLength(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.gra",{}]],"14":[["phdb.Path]                                                                                ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander, 3)     ",{}]],"17":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"18":[["path.ShortestPath@3cb59dff                                                                ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"21":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]]}}],[0.000291,{"lines":{"0":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"3":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"4":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength                  ",{}]],"8":[["                                                                                          ",{}]],"9":[["def pathsWithLength(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Pat",{}]],"10":[["h]                                                                                        ",{}]],"11":[["def pathsWithLength(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.gra",{}]],"12":[["phdb.Path]                                                                                ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander, 3)     ",{}]],"15":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"16":[["path.ShortestPath@3cb59dff                                                                ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"19":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"20":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)--[LINK,6]-->(7)                                       ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.480367,{"lines":{"22":[["scala> /                                                                                  ",{}]]},"cursor":{"x":8}}],[0.112844,{"lines":{"22":[["scala> //                                                                                 ",{}]]},"cursor":{"x":9}}],[0.055896,{"cursor":{"x":10}}],[0.192201,{"lines":{"22":[["scala> // o                                                                               ",{}]]},"cursor":{"x":11}}],[0.07188600000000001,{"lines":{"22":[["scala> // on                                                                              ",{}]]},"cursor":{"x":12}}],[0.194844,{"lines":{"22":[["scala> // onl                                                                             ",{}]]},"cursor":{"x":13}}],[0.052823,{"lines":{"22":[["scala> // only                                                                            ",{}]]},"cursor":{"x":14}}],[0.064442,{"cursor":{"x":15}}],[0.071729,{"lines":{"22":[["scala> // only p                                                                          ",{}]]},"cursor":{"x":16}}],[0.11216,{"lines":{"22":[["scala> // only pa                                                                         ",{}]]},"cursor":{"x":17}}],[0.066217,{"lines":{"22":[["scala> // only pat                                                                        ",{}]]},"cursor":{"x":18}}],[0.063642,{"lines":{"22":[["scala> // only path                                                                       ",{}]]},"cursor":{"x":19}}],[0.126581,{"lines":{"22":[["scala> // only paths                                                                      ",{}]]},"cursor":{"x":20}}],[0.080149,{"cursor":{"x":21}}],[0.113176,{"lines":{"22":[["scala> // only paths w                                                                    ",{}]]},"cursor":{"x":22}}],[0.07839,{"lines":{"22":[["scala> // only paths wi                                                                   ",{}]]},"cursor":{"x":23}}],[0.064415,{"lines":{"22":[["scala> // only paths wit                                                                  ",{}]]},"cursor":{"x":24}}],[0.063745,{"lines":{"22":[["scala> // only paths with                                                                 ",{}]]},"cursor":{"x":25}}],[0.056085,{"cursor":{"x":26}}],[0.095403,{"lines":{"22":[["scala> // only paths with l                                                               ",{}]]},"cursor":{"x":27}}],[0.144468,{"lines":{"22":[["scala> // only paths with le                                                              ",{}]]},"cursor":{"x":28}}],[0.051896,{"lines":{"22":[["scala> // only paths with len                                                             ",{}]]},"cursor":{"x":29}}],[0.123991,{"lines":{"22":[["scala> // only paths with leng                                                            ",{}]]},"cursor":{"x":30}}],[0.146634,{"lines":{"22":[["scala> // only paths with lengh                                                           ",{}]]},"cursor":{"x":31}}],[0.029252,{"lines":{"22":[["scala> // only paths with lenght                                                          ",{}]]},"cursor":{"x":32}}],[0.176129,{"cursor":{"x":33}}],[0.479855,{"cursor":{"x":32}}],[0.000149,{}],[0.135735,{"cursor":{"x":31}}],[0.000126,{"lines":{"22":[["scala> // only paths with lengh                                                           ",{}]]}}],[0.136775,{"cursor":{"x":30}}],[0.000131,{"lines":{"22":[["scala> // only paths with leng                                                            ",{}]]}}],[0.13983,{"lines":{"22":[["scala> // only paths with lengt                                                           ",{}]]},"cursor":{"x":31}}],[0.091708,{"lines":{"22":[["scala> // only paths with length                                                          ",{}]]},"cursor":{"x":32}}],[0.07340099999999999,{"cursor":{"x":33}}],[0.054375,{"lines":{"22":[["scala> // only paths with length 3                                                        ",{}]]},"cursor":{"x":34}}],[0.152131,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"2":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"3":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength                  ",{}]],"6":[["                                                                                          ",{}]],"8":[["def pathsWithLength(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Pat",{}]],"9":[["h]                                                                                        ",{}]],"10":[["def pathsWithLength(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.gra",{}]],"11":[["phdb.Path]                                                                                ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander, 3)     ",{}]],"14":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"15":[["path.ShortestPath@3cb59dff                                                                ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"18":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"19":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)--[LINK,6]-->(7)                                       ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> // only paths with length 3                                                        ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.000536,{"lines":{"0":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.                                 ",{}]],"1":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"2":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength                  ",{}]],"5":[["                                                                                          ",{}]],"7":[["def pathsWithLength(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Pat",{}]],"8":[["h]                                                                                        ",{}]],"9":[["def pathsWithLength(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.gra",{}]],"10":[["phdb.Path]                                                                                ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander, 3)     ",{}]],"13":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"14":[["path.ShortestPath@3cb59dff                                                                ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"17":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"18":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)--[LINK,6]-->(7)                                       ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> // only paths with length 3                                                        ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[8.300658,{"lines":{"22":[["scala> e                                                                                  ",{}]]},"cursor":{"x":8}}],[0.282372,{"lines":{"22":[["scala> ex                                                                                 ",{}]]},"cursor":{"x":9}}],[0.080358,{"lines":{"22":[["scala> exi                                                                                ",{}]]},"cursor":{"x":10}}],[0.119822,{"lines":{"22":[["scala> exit                                                                               ",{}]]},"cursor":{"x":11}}],[0.135728,{"lines":{"0":[["aStar             allPaths          allSimplePaths    asInstanceOf      dijkstra          ",{}]],"1":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength                  ",{}]],"4":[["                                                                                          ",{}]],"6":[["def pathsWithLength(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Pat",{}]],"7":[["h]                                                                                        ",{}]],"8":[["def pathsWithLength(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.gra",{}]],"9":[["phdb.Path]                                                                                ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander, 3)     ",{}]],"12":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"13":[["path.ShortestPath@3cb59dff                                                                ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"16":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"17":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)--[LINK,6]-->(7)                                       ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> // only paths with length 3                                                        ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> exit                                                                               ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.13149,{"lines":{"0":[["isInstanceOf      pathsWithLength   shortestPath      toString                            ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength                  ",{}]],"3":[["                                                                                          ",{}]],"5":[["def pathsWithLength(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Pat",{}]],"6":[["h]                                                                                        ",{}]],"7":[["def pathsWithLength(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.gra",{}]],"8":[["phdb.Path]                                                                                ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander, 3)     ",{}]],"11":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"12":[["path.ShortestPath@3cb59dff                                                                ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"15":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"16":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)--[LINK,6]-->(7)                                       ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> // only paths with length 3                                                        ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> exit                                                                               ",{}]],"21":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]]}}],[3.585504,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength                  ",{}]],"2":[["                                                                                          ",{}]],"4":[["def pathsWithLength(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Pat",{}]],"5":[["h]                                                                                        ",{}]],"6":[["def pathsWithLength(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.gra",{}]],"7":[["phdb.Path]                                                                                ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander, 3)     ",{}]],"10":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"11":[["path.ShortestPath@3cb59dff                                                                ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"14":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"15":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)--[LINK,6]-->(7)                                       ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> // only paths with length 3                                                        ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> exit                                                                               ",{}]],"20":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"21":[["                                                                                          ",{}]]}}],[0.012709,{"lines":{"0":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength                  ",{}]],"1":[["                                                                                          ",{}]],"3":[["def pathsWithLength(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Pat",{}]],"4":[["h]                                                                                        ",{}]],"5":[["def pathsWithLength(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.gra",{}]],"6":[["phdb.Path]                                                                                ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander, 3)     ",{}]],"9":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"10":[["path.ShortestPath@3cb59dff                                                                ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"13":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"14":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)--[LINK,6]-->(7)                                       ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> // only paths with length 3                                                        ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> exit                                                                               ",{}]],"19":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"20":[["                                                                                          ",{}]],"21":[["[",{}],["success",{"fg":2}],["] Total time: 775 s, completed Nov 14, 2013 12:09:38 AM                           ",{}]]}}],[0.62101,{"lines":{"22":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" ex                                                                  ",{}]]},"cursor":{"x":24}}],[0.000629,{"lines":{"0":[["                                                                                          ",{}]],"1":[["def pathsWithLength(org.neo4j.graphdb.PathExpander, Int): PathFinder[org.neo4j.graphdb.Pat",{}]],"2":[["h]                                                                                        ",{}]],"3":[["def pathsWithLength(org.neo4j.graphdb.RelationshipExpander, Int): PathFinder[org.neo4j.gra",{}]],"4":[["phdb.Path]                                                                                ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val finder = org.neo4j.graphalgo.GraphAlgoFactory.pathsWithLength(expander, 3)     ",{}]],"7":[["finder: org.neo4j.graphalgo.PathFinder[org.neo4j.graphdb.Path] = org.neo4j.graphalgo.impl.",{}]],"8":[["path.ShortestPath@3cb59dff                                                                ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> finder.findAllPaths(root, n7).asScala.foreach(println(_))                          ",{}]],"11":[["(0)--[LINK,2]-->(3)--[LINK,3]-->(4)--[LINK,5]-->(7)                                       ",{}]],"12":[["(0)--[LINK,2]-->(3)--[LINK,4]-->(5)--[LINK,6]-->(7)                                       ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> // only paths with length 3                                                        ",{}]],"16":[["scala> exit                                                                               ",{}]],"17":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"18":[["                                                                                          ",{}]],"19":[["[",{}],["success",{"fg":2}],["] Total time: 775 s, completed Nov 14, 2013 12:09:38 AM                           ",{}]],"20":[[" ",{}],["wes-macbook:scaltest",{"fg":6}],[" exit                                                                ",{}]],"21":[["logout                                                                                    ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}]]