[[0.348341,{"lines":{"0":[["jihyel@jihyel:~$                                                                ",{}]],"1":[["                                                                                ",{}]],"2":[["                                                                                ",{}]],"3":[["                                                                                ",{}]],"4":[["                                                                                ",{}]],"5":[["                                                                                ",{}]],"6":[["                                                                                ",{}]],"7":[["                                                                                ",{}]],"8":[["                                                                                ",{}]],"9":[["                                                                                ",{}]],"10":[["                                                                                ",{}]],"11":[["                                                                                ",{}]],"12":[["                                                                                ",{}]],"13":[["                                                                                ",{}]],"14":[["                                                                                ",{}]],"15":[["                                                                                ",{}]],"16":[["                                                                                ",{}]],"17":[["                                                                                ",{}]],"18":[["                                                                                ",{}]],"19":[["                                                                                ",{}]],"20":[["                                                                                ",{}]],"21":[["                                                                                ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                                                ",{}]],"24":[["                                                                                ",{}]],"25":[["                                                                                ",{}]],"26":[["                                                                                ",{}]],"27":[["                                                                                ",{}]],"28":[["                                                                                ",{}]],"29":[["                                                                                ",{}]],"30":[["                                                                                ",{}]],"31":[["                                                                                ",{}]],"32":[["                                                                                ",{}]],"33":[["                                                                                ",{}]],"34":[["                                                                                ",{}]],"35":[["                                                                                ",{}]],"36":[["                                                                                ",{}]],"37":[["                                                                                ",{}]],"38":[["                                                                                ",{}]],"39":[["                                                                                ",{}]],"40":[["                                                                                ",{}]]},"cursor":{"x":17,"y":0,"visible":true}}],[1.060833,{"lines":{"0":[["jihyel@jihyel:~$ s                                                              ",{}]]},"cursor":{"x":18}}],[0.099942,{"lines":{"0":[["jihyel@jihyel:~$ sh                                                             ",{}]]},"cursor":{"x":19}}],[0.070714,{"lines":{"0":[["jihyel@jihyel:~$ sha                                                            ",{}]]},"cursor":{"x":20}}],[0.096584,{"lines":{"0":[["jihyel@jihyel:~$ shar                                                           ",{}]]},"cursor":{"x":21}}],[0.12075,{"lines":{"0":[["jihyel@jihyel:~$ shark                                                          ",{}]]},"cursor":{"x":22}}],[0.136109,{"cursor":{"x":0,"y":1}}],[5.243822,{"lines":{"1":[["jihyel@shark.ics.cs.cmu.edu's password:                                         ",{}]]},"cursor":{"x":40}}],[3.800538,{"cursor":{"x":0,"y":2}}],[0.15033,{"lines":{"2":[["Last login: Tue Nov 12 14:09:42 2013 from 128.237.225.249                       ",{}]],"4":[["ATTENTION                                                                       ",{}]],"6":[["The *shark.ics.cs.cmu.edu machines are intended for and restricted to the       ",{}]],"7":[["use of 15-213/18-213 students.  Anyone using these machines for other           ",{}]],"8":[["courses, especially for resource-hungry processes that degrade these            ",{}]],"9":[["machines' ability to serve 15-213/18-213 students, will have their access       ",{}]],"10":[["removed.                                                                        ",{}]],"12":[["The shark machines reboot DAILY.  Reboot schedule:                              ",{}]],"14":[["angelshark       3:00 AM                                                        ",{}]],"15":[["bambooshark      3:30 AM                                                        ",{}]],"16":[["baskingshark     4:00 AM                                                        ",{}]],"17":[["blueshark        4:30 AM                                                        ",{}]],"18":[["carpetshark      5:00 AM                                                        ",{}]],"19":[["catshark         5:30 AM                                                        ",{}]],"20":[["hammerheadshark  6:00 AM                                                        ",{}]],"21":[["houndshark       6:30 AM                                                        ",{}]],"22":[["lemonshark       7:00 AM                                                        ",{}]],"23":[["makoshark        7:30 AM                                                        ",{}]]},"cursor":{"y":25}}],[1.091031,{"lines":{"25":[["-bash-4.1$                                                                      ",{}]]},"cursor":{"x":11}}],[0.497865,{"lines":{"25":[["-bash-4.1$ s                                                                    ",{}]]},"cursor":{"x":12}}],[0.032415,{"lines":{"25":[["-bash-4.1$ sd                                                                   ",{}]]},"cursor":{"x":13}}],[0.07883999999999999,{"lines":{"25":[["-bash-4.1$ sdf                                                                  ",{}]]},"cursor":{"x":14}}],[0.309026,{"lines":{"25":[["-bash-4.1$ sd                                                                   ",{}]]},"cursor":{"x":13}}],[0.027155,{"lines":{"25":[["-bash-4.1$ s                                                                    ",{}]]},"cursor":{"x":12}}],[0.865656,{"lines":{"25":[["-bash-4.1$ l                                                                    ",{}]]}}],[0.007525,{"lines":{"25":[["-bash-4.1$                                                                      ",{}]]},"cursor":{"x":11}}],[0.061821,{}],[1.005092,{"lines":{"25":[["-bash-4.1$ l                                                                    ",{}]]},"cursor":{"x":12}}],[0.067214,{"lines":{"25":[["-bash-4.1$ ls                                                                   ",{}]]},"cursor":{"x":13}}],[0.776106,{"cursor":{"x":0,"y":26}}],[0.048684,{"lines":{"26":[["a",{"fg":2,"bold":true}],["                           ",{}],["Documents",{"fg":4,"bold":true}],["    ",{}],["Movies",{"fg":4,"bold":true}],["      ",{}],["Public",{"fg":4,"bold":true}],["                     ",{}]],"27":[["a.c0                        ",{}],["Downloads",{"fg":4,"bold":true}],["    ",{}],["Music",{"fg":4,"bg":2}],["       ",{}],["review",{"fg":4,"bold":true}],["                     ",{}]],"28":[["Applications",{"fg":4,"bold":true}],["                #.emacs#     ",{}],["OldFiles",{"fg":4,"bg":2}],["    ",{}],["Templates",{"fg":4,"bold":true}],["                  ",{}]],"29":[["bin",{"fg":4,"bold":true}],["                         ",{}],["hash",{"fg":4,"bold":true}],["         out.txt     test.c0                    ",{}]],"30":[["calculator",{"fg":4,"bold":true}],["                  ",{}],["intro_to_c",{"fg":4,"bold":true}],["   ",{}],["philosophy",{"fg":4,"bold":true}],["  ",{}],["Videos",{"fg":4,"bold":true}],["                     ",{}]],"31":[["ccm-project",{"fg":4,"bold":true}],["                 ",{}],["jihyel",{"fg":6,"bold":true}],["       ",{}],["Pictures",{"fg":4,"bold":true}],["    ",{}],["VirtualBox VMs",{"fg":1,"bg":0,"bold":true}],["             ",{}]],"32":[["C:\\nppdf32Log\\debuglog.txt  ",{}],["jijijar.jar",{"fg":1,"bold":true}],["  ",{}],["private",{"fg":4,"bold":true}],["                                ",{}]],"33":[["Desktop",{"fg":4,"bold":true}],["                     ",{}],["Library",{"fg":4,"bold":true}],["      ",{}],["public",{"fg":4,"bold":true}],["                                 ",{}]],"34":[["-bash-4.1$                                                                      ",{}]]},"cursor":{"x":11,"y":34}}],[0.682857,{"lines":{"34":[["-bash-4.1$ c                                                                    ",{}]]},"cursor":{"x":12}}],[0.215687,{"lines":{"34":[["-bash-4.1$ cd                                                                   ",{}]]},"cursor":{"x":13}}],[0.120511,{"cursor":{"x":14}}],[0.14302,{"lines":{"34":[["-bash-4.1$ cd p                                                                 ",{}]]},"cursor":{"x":15}}],[0.198453,{"lines":{"34":[["-bash-4.1$ cd pr                                                                ",{}]]},"cursor":{"x":16}}],[0.015527,{"lines":{"34":[["-bash-4.1$ cd pri                                                               ",{}]]},"cursor":{"x":17}}],[0.448136,{"lines":{"34":[["-bash-4.1$ cd private/                                                          ",{}]]},"cursor":{"x":22}}],[0.355141,{"lines":{"35":[["-bash-4.1$                                                                      ",{}]]},"cursor":{"x":11,"y":35}}],[0.183821,{"lines":{"35":[["-bash-4.1$ l                                                                    ",{}]]},"cursor":{"x":12}}],[0.08881500000000001,{"lines":{"35":[["-bash-4.1$ ls                                                                   ",{}]]},"cursor":{"x":13}}],[0.126668,{"cursor":{"x":0,"y":36}}],[0.005469,{"lines":{"36":[["15122",{"fg":4,"bold":true}],["  ",{}],["213",{"fg":4,"bold":true}],["                                                                      ",{}]],"37":[["-bash-4.1$                                                                      ",{}]]},"cursor":{"x":11,"y":37}}],[0.09142599999999999,{"lines":{"37":[["-bash-4.1$ d                                                                    ",{}]]},"cursor":{"x":12}}],[0.119224,{"lines":{"37":[["-bash-4.1$ df                                                                   ",{}]]},"cursor":{"x":13}}],[0.084524,{"lines":{"37":[["-bash-4.1$ d                                                                    ",{}]]},"cursor":{"x":12}}],[0.138954,{"lines":{"37":[["-bash-4.1$                                                                      ",{}]]},"cursor":{"x":11}}],[0.1399,{}],[0.09483,{"lines":{"37":[["-bash-4.1$ c                                                                    ",{}]]},"cursor":{"x":12}}],[0.168953,{"lines":{"37":[["-bash-4.1$ cd                                                                   ",{}]]},"cursor":{"x":13}}],[0.130422,{"cursor":{"x":14}}],[0.113355,{"lines":{"37":[["-bash-4.1$ cd 2                                                                 ",{}]]},"cursor":{"x":15}}],[0.086243,{"lines":{"37":[["-bash-4.1$ cd 21                                                                ",{}]]},"cursor":{"x":16}}],[0.118182,{"lines":{"37":[["-bash-4.1$ cd 213                                                               ",{}]]},"cursor":{"x":17}}],[0.074118,{"lines":{"38":[["-bash-4.1$                                                                      ",{}]]},"cursor":{"x":11,"y":38}}],[0.19226,{"lines":{"38":[["-bash-4.1$ l                                                                    ",{}]]},"cursor":{"x":12}}],[0.339184,{"lines":{"38":[["-bash-4.1$ ls                                                                   ",{}]]},"cursor":{"x":13}}],[0.171373,{"cursor":{"x":0,"y":39}}],[0.218754,{"lines":{"0":[["Last login: Tue Nov 12 14:09:42 2013 from 128.237.225.249                       ",{}]],"1":[["                                                                                ",{}]],"2":[["ATTENTION                                                                       ",{}]],"4":[["The *shark.ics.cs.cmu.edu machines are intended for and restricted to the       ",{}]],"5":[["use of 15-213/18-213 students.  Anyone using these machines for other           ",{}]],"6":[["courses, especially for resource-hungry processes that degrade these            ",{}]],"7":[["machines' ability to serve 15-213/18-213 students, will have their access       ",{}]],"8":[["removed.                                                                        ",{}]],"9":[["                                                                                ",{}]],"10":[["The shark machines reboot DAILY.  Reboot schedule:                              ",{}]],"12":[["angelshark       3:00 AM                                                        ",{}]],"13":[["bambooshark      3:30 AM                                                        ",{}]],"14":[["baskingshark     4:00 AM                                                        ",{}]],"15":[["blueshark        4:30 AM                                                        ",{}]],"16":[["carpetshark      5:00 AM                                                        ",{}]],"17":[["catshark         5:30 AM                                                        ",{}]],"18":[["hammerheadshark  6:00 AM                                                        ",{}]],"19":[["houndshark       6:30 AM                                                        ",{}]],"20":[["lemonshark       7:00 AM                                                        ",{}]],"21":[["makoshark        7:30 AM                                                        ",{}]],"22":[["                                                                                ",{}]],"23":[["-bash-4.1$ ls                                                                   ",{}]],"24":[["a",{"fg":2,"bold":true}],["                           ",{}],["Documents",{"fg":4,"bold":true}],["    ",{}],["Movies",{"fg":4,"bold":true}],["      ",{}],["Public",{"fg":4,"bold":true}],["                     ",{}]],"25":[["a.c0                        ",{}],["Downloads",{"fg":4,"bold":true}],["    ",{}],["Music",{"fg":4,"bg":2}],["       ",{}],["review",{"fg":4,"bold":true}],["                     ",{}]],"26":[["Applications",{"fg":4,"bold":true}],["                #.emacs#     ",{}],["OldFiles",{"fg":4,"bg":2}],["    ",{}],["Templates",{"fg":4,"bold":true}],["                  ",{}]],"27":[["bin",{"fg":4,"bold":true}],["                         ",{}],["hash",{"fg":4,"bold":true}],["         out.txt     test.c0                    ",{}]],"28":[["calculator",{"fg":4,"bold":true}],["                  ",{}],["intro_to_c",{"fg":4,"bold":true}],["   ",{}],["philosophy",{"fg":4,"bold":true}],["  ",{}],["Videos",{"fg":4,"bold":true}],["                     ",{}]],"29":[["ccm-project",{"fg":4,"bold":true}],["                 ",{}],["jihyel",{"fg":6,"bold":true}],["       ",{}],["Pictures",{"fg":4,"bold":true}],["    ",{}],["VirtualBox VMs",{"fg":1,"bg":0,"bold":true}],["             ",{}]],"30":[["C:\\nppdf32Log\\debuglog.txt  ",{}],["jijijar.jar",{"fg":1,"bold":true}],["  ",{}],["private",{"fg":4,"bold":true}],["                                ",{}]],"31":[["Desktop",{"fg":4,"bold":true}],["                     ",{}],["Library",{"fg":4,"bold":true}],["      ",{}],["public",{"fg":4,"bold":true}],["                                 ",{}]],"32":[["-bash-4.1$ cd private/                                                          ",{}]],"33":[["-bash-4.1$ ls                                                                   ",{}]],"34":[["15122",{"fg":4,"bold":true}],["  ",{}],["213",{"fg":4,"bold":true}],["                                                                      ",{}]],"35":[["-bash-4.1$ cd 213                                                               ",{}]],"36":[["-bash-4.1$ ls                                                                   ",{}]],"37":[["explicit2.c   explicit.c  ",{}],["malloclab-handout",{"fg":4,"bold":true}],["      mm_explicit.c   ",{}],["old",{"fg":4,"bold":true}],["            ",{}]],"38":[["explicit.3.c  list.c      ",{}],["malloclab-handout.tar",{"fg":1,"bold":true}],["  mm_reference.c                 ",{}]],"39":[["explicit.4.c  list.h      mm.c                   note                           ",{}]],"40":[["-bash-4.1$ d                                                                    ",{}]]},"cursor":{"x":12,"y":40}}],[0.383176,{"lines":{"40":[["-bash-4.1$                                                                      ",{}]]},"cursor":{"x":11}}],[0.144412,{"lines":{"40":[["-bash-4.1$ c                                                                    ",{}]]},"cursor":{"x":12}}],[0.177971,{"lines":{"40":[["-bash-4.1$ cd                                                                   ",{}]]},"cursor":{"x":13}}],[0.125829,{"cursor":{"x":14}}],[0.168372,{"lines":{"40":[["-bash-4.1$ cd m                                                                 ",{}]]},"cursor":{"x":15}}],[0.122896,{"lines":{"40":[["-bash-4.1$ cd ma                                                                ",{}]]},"cursor":{"x":16}}],[0.115078,{"lines":{"40":[["-bash-4.1$ cd mal                                                               ",{}]]},"cursor":{"x":17}}],[0.125104,{"lines":{"40":[["-bash-4.1$ cd malloclab-handout                                                 ",{}]]},"cursor":{"x":31}}],[0.213008,{"lines":{"0":[["                                                                                ",{}]],"1":[["ATTENTION                                                                       ",{}]],"2":[["                                                                                ",{}]],"3":[["The *shark.ics.cs.cmu.edu machines are intended for and restricted to the       ",{}]],"4":[["use of 15-213/18-213 students.  Anyone using these machines for other           ",{}]],"5":[["courses, especially for resource-hungry processes that degrade these            ",{}]],"6":[["machines' ability to serve 15-213/18-213 students, will have their access       ",{}]],"7":[["removed.                                                                        ",{}]],"8":[["                                                                                ",{}]],"9":[["The shark machines reboot DAILY.  Reboot schedule:                              ",{}]],"10":[["                                                                                ",{}]],"11":[["angelshark       3:00 AM                                                        ",{}]],"12":[["bambooshark      3:30 AM                                                        ",{}]],"13":[["baskingshark     4:00 AM                                                        ",{}]],"14":[["blueshark        4:30 AM                                                        ",{}]],"15":[["carpetshark      5:00 AM                                                        ",{}]],"16":[["catshark         5:30 AM                                                        ",{}]],"17":[["hammerheadshark  6:00 AM                                                        ",{}]],"18":[["houndshark       6:30 AM                                                        ",{}]],"19":[["lemonshark       7:00 AM                                                        ",{}]],"20":[["makoshark        7:30 AM                                                        ",{}]],"21":[["                                                                                ",{}]],"22":[["-bash-4.1$ ls                                                                   ",{}]],"23":[["a",{"fg":2,"bold":true}],["                           ",{}],["Documents",{"fg":4,"bold":true}],["    ",{}],["Movies",{"fg":4,"bold":true}],["      ",{}],["Public",{"fg":4,"bold":true}],["                     ",{}]],"24":[["a.c0                        ",{}],["Downloads",{"fg":4,"bold":true}],["    ",{}],["Music",{"fg":4,"bg":2}],["       ",{}],["review",{"fg":4,"bold":true}],["                     ",{}]],"25":[["Applications",{"fg":4,"bold":true}],["                #.emacs#     ",{}],["OldFiles",{"fg":4,"bg":2}],["    ",{}],["Templates",{"fg":4,"bold":true}],["                  ",{}]],"26":[["bin",{"fg":4,"bold":true}],["                         ",{}],["hash",{"fg":4,"bold":true}],["         out.txt     test.c0                    ",{}]],"27":[["calculator",{"fg":4,"bold":true}],["                  ",{}],["intro_to_c",{"fg":4,"bold":true}],["   ",{}],["philosophy",{"fg":4,"bold":true}],["  ",{}],["Videos",{"fg":4,"bold":true}],["                     ",{}]],"28":[["ccm-project",{"fg":4,"bold":true}],["                 ",{}],["jihyel",{"fg":6,"bold":true}],["       ",{}],["Pictures",{"fg":4,"bold":true}],["    ",{}],["VirtualBox VMs",{"fg":1,"bg":0,"bold":true}],["             ",{}]],"29":[["C:\\nppdf32Log\\debuglog.txt  ",{}],["jijijar.jar",{"fg":1,"bold":true}],["  ",{}],["private",{"fg":4,"bold":true}],["                                ",{}]],"30":[["Desktop",{"fg":4,"bold":true}],["                     ",{}],["Library",{"fg":4,"bold":true}],["      ",{}],["public",{"fg":4,"bold":true}],["                                 ",{}]],"31":[["-bash-4.1$ cd private/                                                          ",{}]],"32":[["-bash-4.1$ ls                                                                   ",{}]],"33":[["15122",{"fg":4,"bold":true}],["  ",{}],["213",{"fg":4,"bold":true}],["                                                                      ",{}]],"34":[["-bash-4.1$ cd 213                                                               ",{}]],"35":[["-bash-4.1$ ls                                                                   ",{}]],"36":[["explicit2.c   explicit.c  ",{}],["malloclab-handout",{"fg":4,"bold":true}],["      mm_explicit.c   ",{}],["old",{"fg":4,"bold":true}],["            ",{}]],"37":[["explicit.3.c  list.c      ",{}],["malloclab-handout.tar",{"fg":1,"bold":true}],["  mm_reference.c                 ",{}]],"38":[["explicit.4.c  list.h      mm.c                   note                           ",{}]],"39":[["-bash-4.1$ cd malloclab-handout                                                 ",{}]],"40":[["-bash-4.1$                                                                      ",{}]]},"cursor":{"x":11}}],[0.174321,{"lines":{"40":[["-bash-4.1$ l                                                                    ",{}]]},"cursor":{"x":12}}],[0.134063,{"lines":{"40":[["-bash-4.1$ ls                                                                   ",{}]]},"cursor":{"x":13}}],[0.103596,{"lines":{"0":[["ATTENTION                                                                       ",{}]],"1":[["                                                                                ",{}]],"2":[["The *shark.ics.cs.cmu.edu machines are intended for and restricted to the       ",{}]],"3":[["use of 15-213/18-213 students.  Anyone using these machines for other           ",{}]],"4":[["courses, especially for resource-hungry processes that degrade these            ",{}]],"5":[["machines' ability to serve 15-213/18-213 students, will have their access       ",{}]],"6":[["removed.                                                                        ",{}]],"7":[["                                                                                ",{}]],"8":[["The shark machines reboot DAILY.  Reboot schedule:                              ",{}]],"9":[["                                                                                ",{}]],"10":[["angelshark       3:00 AM                                                        ",{}]],"11":[["bambooshark      3:30 AM                                                        ",{}]],"12":[["baskingshark     4:00 AM                                                        ",{}]],"13":[["blueshark        4:30 AM                                                        ",{}]],"14":[["carpetshark      5:00 AM                                                        ",{}]],"15":[["catshark         5:30 AM                                                        ",{}]],"16":[["hammerheadshark  6:00 AM                                                        ",{}]],"17":[["houndshark       6:30 AM                                                        ",{}]],"18":[["lemonshark       7:00 AM                                                        ",{}]],"19":[["makoshark        7:30 AM                                                        ",{}]],"20":[["                                                                                ",{}]],"21":[["-bash-4.1$ ls                                                                   ",{}]],"22":[["a",{"fg":2,"bold":true}],["                           ",{}],["Documents",{"fg":4,"bold":true}],["    ",{}],["Movies",{"fg":4,"bold":true}],["      ",{}],["Public",{"fg":4,"bold":true}],["                     ",{}]],"23":[["a.c0                        ",{}],["Downloads",{"fg":4,"bold":true}],["    ",{}],["Music",{"fg":4,"bg":2}],["       ",{}],["review",{"fg":4,"bold":true}],["                     ",{}]],"24":[["Applications",{"fg":4,"bold":true}],["                #.emacs#     ",{}],["OldFiles",{"fg":4,"bg":2}],["    ",{}],["Templates",{"fg":4,"bold":true}],["                  ",{}]],"25":[["bin",{"fg":4,"bold":true}],["                         ",{}],["hash",{"fg":4,"bold":true}],["         out.txt     test.c0                    ",{}]],"26":[["calculator",{"fg":4,"bold":true}],["                  ",{}],["intro_to_c",{"fg":4,"bold":true}],["   ",{}],["philosophy",{"fg":4,"bold":true}],["  ",{}],["Videos",{"fg":4,"bold":true}],["                     ",{}]],"27":[["ccm-project",{"fg":4,"bold":true}],["                 ",{}],["jihyel",{"fg":6,"bold":true}],["       ",{}],["Pictures",{"fg":4,"bold":true}],["    ",{}],["VirtualBox VMs",{"fg":1,"bg":0,"bold":true}],["             ",{}]],"28":[["C:\\nppdf32Log\\debuglog.txt  ",{}],["jijijar.jar",{"fg":1,"bold":true}],["  ",{}],["private",{"fg":4,"bold":true}],["                                ",{}]],"29":[["Desktop",{"fg":4,"bold":true}],["                     ",{}],["Library",{"fg":4,"bold":true}],["      ",{}],["public",{"fg":4,"bold":true}],["                                 ",{}]],"30":[["-bash-4.1$ cd private/                                                          ",{}]],"31":[["-bash-4.1$ ls                                                                   ",{}]],"32":[["15122",{"fg":4,"bold":true}],["  ",{}],["213",{"fg":4,"bold":true}],["                                                                      ",{}]],"33":[["-bash-4.1$ cd 213                                                               ",{}]],"34":[["-bash-4.1$ ls                                                                   ",{}]],"35":[["explicit2.c   explicit.c  ",{}],["malloclab-handout",{"fg":4,"bold":true}],["      mm_explicit.c   ",{}],["old",{"fg":4,"bold":true}],["            ",{}]],"36":[["explicit.3.c  list.c      ",{}],["malloclab-handout.tar",{"fg":1,"bold":true}],["  mm_reference.c                 ",{}]],"37":[["explicit.4.c  list.h      mm.c                   note                           ",{}]],"38":[["-bash-4.1$ cd malloclab-handout                                                 ",{}]],"39":[["-bash-4.1$ ls                                                                   ",{}]],"40":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.023487,{"lines":{"0":[["The shark machines reboot DAILY.  Reboot schedule:                              ",{}]],"2":[["angelshark       3:00 AM                                                        ",{}]],"3":[["bambooshark      3:30 AM                                                        ",{}]],"4":[["baskingshark     4:00 AM                                                        ",{}]],"5":[["blueshark        4:30 AM                                                        ",{}]],"6":[["carpetshark      5:00 AM                                                        ",{}]],"7":[["catshark         5:30 AM                                                        ",{}]],"8":[["hammerheadshark  6:00 AM                                                        ",{}]],"9":[["houndshark       6:30 AM                                                        ",{}]],"10":[["lemonshark       7:00 AM                                                        ",{}]],"11":[["makoshark        7:30 AM                                                        ",{}]],"12":[["                                                                                ",{}]],"13":[["-bash-4.1$ ls                                                                   ",{}]],"14":[["a",{"fg":2,"bold":true}],["                           ",{}],["Documents",{"fg":4,"bold":true}],["    ",{}],["Movies",{"fg":4,"bold":true}],["      ",{}],["Public",{"fg":4,"bold":true}],["                     ",{}]],"15":[["a.c0                        ",{}],["Downloads",{"fg":4,"bold":true}],["    ",{}],["Music",{"fg":4,"bg":2}],["       ",{}],["review",{"fg":4,"bold":true}],["                     ",{}]],"16":[["Applications",{"fg":4,"bold":true}],["                #.emacs#     ",{}],["OldFiles",{"fg":4,"bg":2}],["    ",{}],["Templates",{"fg":4,"bold":true}],["                  ",{}]],"17":[["bin",{"fg":4,"bold":true}],["                         ",{}],["hash",{"fg":4,"bold":true}],["         out.txt     test.c0                    ",{}]],"18":[["calculator",{"fg":4,"bold":true}],["                  ",{}],["intro_to_c",{"fg":4,"bold":true}],["   ",{}],["philosophy",{"fg":4,"bold":true}],["  ",{}],["Videos",{"fg":4,"bold":true}],["                     ",{}]],"19":[["ccm-project",{"fg":4,"bold":true}],["                 ",{}],["jihyel",{"fg":6,"bold":true}],["       ",{}],["Pictures",{"fg":4,"bold":true}],["    ",{}],["VirtualBox VMs",{"fg":1,"bg":0,"bold":true}],["             ",{}]],"20":[["C:\\nppdf32Log\\debuglog.txt  ",{}],["jijijar.jar",{"fg":1,"bold":true}],["  ",{}],["private",{"fg":4,"bold":true}],["                                ",{}]],"21":[["Desktop",{"fg":4,"bold":true}],["                     ",{}],["Library",{"fg":4,"bold":true}],["      ",{}],["public",{"fg":4,"bold":true}],["                                 ",{}]],"22":[["-bash-4.1$ cd private/                                                          ",{}]],"23":[["-bash-4.1$ ls                                                                   ",{}]],"24":[["15122",{"fg":4,"bold":true}],["  ",{}],["213",{"fg":4,"bold":true}],["                                                                      ",{}]],"25":[["-bash-4.1$ cd 213                                                               ",{}]],"26":[["-bash-4.1$ ls                                                                   ",{}]],"27":[["explicit2.c   explicit.c  ",{}],["malloclab-handout",{"fg":4,"bold":true}],["      mm_explicit.c   ",{}],["old",{"fg":4,"bold":true}],["            ",{}]],"28":[["explicit.3.c  list.c      ",{}],["malloclab-handout.tar",{"fg":1,"bold":true}],["  mm_reference.c                 ",{}]],"29":[["explicit.4.c  list.h      mm.c                   note                           ",{}]],"30":[["-bash-4.1$ cd malloclab-handout                                                 ",{}]],"32":[["backup",{"fg":4,"bold":true}],["                    fcyc.c    ftimer.o   mm.c        ",{}],["reference",{"fg":4,"bold":true}],["            ",{}]],"33":[["backupmm.6.broken.list.c  fcyc.h    Makefile   mm.h        size2.txt            ",{}]],"34":[["clock.c                   fcyc.o    ",{}],["mdriver",{"fg":2,"bold":true}],["    mm.lc.c     size.txt             ",{}]],"35":[["clock.h                   fsecs.c   mdriver.c  mm.lc.me.c  task.note            ",{}]],"36":[["clock.o                   fsecs.h   mdriver.o  mm-naive.c  ",{}],["traces",{"fg":4,"bold":true}],["               ",{}]],"37":[["config.h                  fsecs.o   memlib.c   mm.o        ",{}],["tree",{"fg":4,"bold":true}],["                 ",{}]],"38":[["contracts.h               ftimer.c  memlib.h   ",{}],["randy",{"fg":4,"bold":true}],["                            ",{}]],"39":[["error.txt                 ftimer.h  memlib.o   README                           ",{}]],"40":[["-bash-4.1$                                                                      ",{}]]},"cursor":{"x":11}}],[0.04369,{"lines":{"40":[["-bash-4.1$ d                                                                    ",{}]]},"cursor":{"x":12}}],[0.125841,{"lines":{"40":[["-bash-4.1$ df                                                                   ",{}]]},"cursor":{"x":13}}],[0.064439,{"lines":{"40":[["-bash-4.1$ d                                                                    ",{}]]},"cursor":{"x":12}}],[0.154921,{"lines":{"40":[["-bash-4.1$                                                                      ",{}]]},"cursor":{"x":11}}],[0.159878,{}],[0.300308,{"lines":{"40":[["-bash-4.1$ m                                                                    ",{}]]},"cursor":{"x":12}}],[0.395078,{"lines":{"40":[["-bash-4.1$                                                                      ",{}]]},"cursor":{"x":11}}],[0.151685,{}],[0.354343,{"lines":{"40":[["-bash-4.1$ .                                                                    ",{}]]},"cursor":{"x":12}}],[0.258546,{"lines":{"40":[["-bash-4.1$ ./                                                                   ",{}]]},"cursor":{"x":13}}],[0.349415,{"lines":{"40":[["-bash-4.1$ .                                                                    ",{}]]},"cursor":{"x":12}}],[0.131444,{"lines":{"40":[["-bash-4.1$                                                                      ",{}]]},"cursor":{"x":11}}],[1.127057,{"lines":{"40":[["-bash-4.1$ g                                                                    ",{}]]},"cursor":{"x":12}}],[0.149519,{"lines":{"40":[["-bash-4.1$ gd                                                                   ",{}]]},"cursor":{"x":13}}],[0.131694,{"lines":{"40":[["-bash-4.1$ gdb                                                                  ",{}]]},"cursor":{"x":14}}],[0.139102,{"cursor":{"x":15}}],[0.187854,{"lines":{"40":[["-bash-4.1$ gdb .                                                                ",{}]]},"cursor":{"x":16}}],[0.204029,{"lines":{"40":[["-bash-4.1$ gdb ./                                                               ",{}]]},"cursor":{"x":17}}],[0.152511,{"lines":{"40":[["-bash-4.1$ gdb ./m                                                              ",{}]]},"cursor":{"x":18}}],[0.08982999999999999,{"lines":{"40":[["-bash-4.1$ gdb ./md                                                             ",{}]]},"cursor":{"x":19}}],[0.158066,{"lines":{"40":[["-bash-4.1$ gdb ./mdr                                                            ",{}]]},"cursor":{"x":20}}],[0.135728,{"lines":{"40":[["-bash-4.1$ gdb ./mdri                                                           ",{}]]},"cursor":{"x":21}}],[0.105072,{"lines":{"40":[["-bash-4.1$ gdb ./mdriv                                                          ",{}]]},"cursor":{"x":22}}],[0.203166,{"lines":{"40":[["-bash-4.1$ gdb ./mdrive                                                         ",{}]]},"cursor":{"x":23}}],[0.106876,{"lines":{"40":[["-bash-4.1$ gdb ./mdriver                                                        ",{}]]},"cursor":{"x":24}}],[0.840735,{"lines":{"40":[["-bash-4.1$ gdb ./mdrive                                                         ",{}]]},"cursor":{"x":23}}],[0.498733,{"lines":{"40":[["-bash-4.1$ gdb ./mdriv                                                          ",{}]]},"cursor":{"x":22}}],[0.031016,{"lines":{"40":[["-bash-4.1$ gdb ./mdri                                                           ",{}]]},"cursor":{"x":21}}],[0.032262,{"lines":{"40":[["-bash-4.1$ gdb ./mdr                                                            ",{}]]},"cursor":{"x":20}}],[0.030713,{"lines":{"40":[["-bash-4.1$ gdb ./md                                                             ",{}]]},"cursor":{"x":19}}],[0.03434,{"lines":{"40":[["-bash-4.1$ gdb ./m                                                              ",{}]]},"cursor":{"x":18}}],[0.029066,{"lines":{"40":[["-bash-4.1$ gdb ./                                                               ",{}]]},"cursor":{"x":17}}],[0.03066,{"lines":{"40":[["-bash-4.1$ gdb .                                                                ",{}]]},"cursor":{"x":16}}],[0.030014,{"lines":{"40":[["-bash-4.1$ gdb                                                                  ",{}]]},"cursor":{"x":15}}],[0.030253,{"cursor":{"x":14}}],[0.031107,{"lines":{"40":[["-bash-4.1$ gd                                                                   ",{}]]},"cursor":{"x":13}}],[0.033065,{"lines":{"40":[["-bash-4.1$ g                                                                    ",{}]]},"cursor":{"x":12}}],[0.030424,{"lines":{"40":[["-bash-4.1$                                                                      ",{}]]},"cursor":{"x":11}}],[0.031913,{}],[0.031792,{}],[0.032196,{}],[0.02606,{}],[0.010055,{"lines":{"40":[["-bash-4.1$ v                                                                    ",{}]]},"cursor":{"x":12}}],[0.129525,{"lines":{"40":[["-bash-4.1$ vi                                                                   ",{}]]},"cursor":{"x":13}}],[0.141496,{"lines":{"40":[["-bash-4.1$ vim                                                                  ",{}]]},"cursor":{"x":14}}],[0.172521,{"cursor":{"x":15}}],[0.164352,{"lines":{"40":[["-bash-4.1$ vim m                                                                ",{}]]},"cursor":{"x":16}}],[0.14648,{"lines":{"40":[["-bash-4.1$ vim mm                                                               ",{}]]},"cursor":{"x":17}}],[0.09010799999999999,{"lines":{"40":[["-bash-4.1$ vim mm.                                                              ",{}]]},"cursor":{"x":18}}],[0.150487,{"lines":{"40":[["-bash-4.1$ vim mm.c                                                             ",{}]]},"cursor":{"x":19}}],[0.09980799999999999,{"lines":{"0":[["                                                                                ",{}]],"1":[["angelshark       3:00 AM                                                        ",{}]],"2":[["bambooshark      3:30 AM                                                        ",{}]],"3":[["baskingshark     4:00 AM                                                        ",{}]],"4":[["blueshark        4:30 AM                                                        ",{}]],"5":[["carpetshark      5:00 AM                                                        ",{}]],"6":[["catshark         5:30 AM                                                        ",{}]],"7":[["hammerheadshark  6:00 AM                                                        ",{}]],"8":[["houndshark       6:30 AM                                                        ",{}]],"9":[["lemonshark       7:00 AM                                                        ",{}]],"10":[["makoshark        7:30 AM                                                        ",{}]],"11":[["                                                                                ",{}]],"12":[["-bash-4.1$ ls                                                                   ",{}]],"13":[["a",{"fg":2,"bold":true}],["                           ",{}],["Documents",{"fg":4,"bold":true}],["    ",{}],["Movies",{"fg":4,"bold":true}],["      ",{}],["Public",{"fg":4,"bold":true}],["                     ",{}]],"14":[["a.c0                        ",{}],["Downloads",{"fg":4,"bold":true}],["    ",{}],["Music",{"fg":4,"bg":2}],["       ",{}],["review",{"fg":4,"bold":true}],["                     ",{}]],"15":[["Applications",{"fg":4,"bold":true}],["                #.emacs#     ",{}],["OldFiles",{"fg":4,"bg":2}],["    ",{}],["Templates",{"fg":4,"bold":true}],["                  ",{}]],"16":[["bin",{"fg":4,"bold":true}],["                         ",{}],["hash",{"fg":4,"bold":true}],["         out.txt     test.c0                    ",{}]],"17":[["calculator",{"fg":4,"bold":true}],["                  ",{}],["intro_to_c",{"fg":4,"bold":true}],["   ",{}],["philosophy",{"fg":4,"bold":true}],["  ",{}],["Videos",{"fg":4,"bold":true}],["                     ",{}]],"18":[["ccm-project",{"fg":4,"bold":true}],["                 ",{}],["jihyel",{"fg":6,"bold":true}],["       ",{}],["Pictures",{"fg":4,"bold":true}],["    ",{}],["VirtualBox VMs",{"fg":1,"bg":0,"bold":true}],["             ",{}]],"19":[["C:\\nppdf32Log\\debuglog.txt  ",{}],["jijijar.jar",{"fg":1,"bold":true}],["  ",{}],["private",{"fg":4,"bold":true}],["                                ",{}]],"20":[["Desktop",{"fg":4,"bold":true}],["                     ",{}],["Library",{"fg":4,"bold":true}],["      ",{}],["public",{"fg":4,"bold":true}],["                                 ",{}]],"21":[["-bash-4.1$ cd private/                                                          ",{}]],"22":[["-bash-4.1$ ls                                                                   ",{}]],"23":[["15122",{"fg":4,"bold":true}],["  ",{}],["213",{"fg":4,"bold":true}],["                                                                      ",{}]],"24":[["-bash-4.1$ cd 213                                                               ",{}]],"25":[["-bash-4.1$ ls                                                                   ",{}]],"26":[["explicit2.c   explicit.c  ",{}],["malloclab-handout",{"fg":4,"bold":true}],["      mm_explicit.c   ",{}],["old",{"fg":4,"bold":true}],["            ",{}]],"27":[["explicit.3.c  list.c      ",{}],["malloclab-handout.tar",{"fg":1,"bold":true}],["  mm_reference.c                 ",{}]],"28":[["explicit.4.c  list.h      mm.c                   note                           ",{}]],"29":[["-bash-4.1$ cd malloclab-handout                                                 ",{}]],"30":[["-bash-4.1$ ls                                                                   ",{}]],"31":[["backup",{"fg":4,"bold":true}],["                    fcyc.c    ftimer.o   mm.c        ",{}],["reference",{"fg":4,"bold":true}],["            ",{}]],"32":[["backupmm.6.broken.list.c  fcyc.h    Makefile   mm.h        size2.txt            ",{}]],"33":[["clock.c                   fcyc.o    ",{}],["mdriver",{"fg":2,"bold":true}],["    mm.lc.c     size.txt             ",{}]],"34":[["clock.h                   fsecs.c   mdriver.c  mm.lc.me.c  task.note            ",{}]],"35":[["clock.o                   fsecs.h   mdriver.o  mm-naive.c  ",{}],["traces",{"fg":4,"bold":true}],["               ",{}]],"36":[["config.h                  fsecs.o   memlib.c   mm.o        ",{}],["tree",{"fg":4,"bold":true}],["                 ",{}]],"37":[["contracts.h               ftimer.c  memlib.h   ",{}],["randy",{"fg":4,"bold":true}],["                            ",{}]],"38":[["error.txt                 ftimer.h  memlib.o   README                           ",{}]],"39":[["-bash-4.1$ vim mm.c                                                             ",{}]],"40":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.065454,{"lines":{"1":[["                                                                                ",{}]],"2":[["                                                                                ",{}]],"3":[["                                                                                ",{}]],"4":[["                                                                                ",{}]],"5":[["                                                                                ",{}]],"6":[["                                                                                ",{}]],"7":[["                                                                                ",{}]],"8":[["                                                                                ",{}]],"9":[["                                                                                ",{}]],"10":[["                                                                                ",{}]],"12":[["                                                                                ",{}]],"13":[["                                                                                ",{}]],"14":[["                                                                                ",{}]],"15":[["                                                                                ",{}]],"16":[["                                                                                ",{}]],"17":[["                                                                                ",{}]],"18":[["                                                                                ",{}]],"19":[["                                                                                ",{}]],"20":[["                                                                                ",{}]],"21":[["                                                                                ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                                                ",{}]],"24":[["                                                                                ",{}]],"25":[["                                                                                ",{}]],"26":[["                                                                                ",{}]],"27":[["                                                                                ",{}]],"28":[["                                                                                ",{}]],"29":[["                                                                                ",{}]],"30":[["                                                                                ",{}]],"31":[["                                                                                ",{}]],"32":[["                                                                                ",{}]],"33":[["                                                                                ",{}]],"34":[["                                                                                ",{}]],"35":[["                                                                                ",{}]],"36":[["                                                                                ",{}]],"37":[["                                                                                ",{}]],"38":[["                                                                                ",{}]],"39":[["                                                                                ",{}]]}}],[0.01295,{"lines":{"23":[["\"mm.c\" 575L, 14615C                                                             ",{}]]},"cursor":{"x":19,"y":23,"visible":false}}],[0.00389,{"lines":{"0":[["char",{"fg":2}],[" * free_list_500;                                                           ",{}]],"1":[["char",{"fg":2}],[" * free_list_1000;                                                          ",{}]],"2":[["char",{"fg":2}],[" * free_list_2000;                                                          ",{}]],"3":[["char",{"fg":2}],[" * free_list_3000;                                                          ",{}]],"4":[["char",{"fg":2}],[" * free_list_oversized;                                                     ",{}]],"6":[["//for testing (size)",{"fg":4}],["                                                            ",{}]],"7":[["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" s100, s500, s1000, s2000, s3000, oversized;                        ",{}]],"8":[["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" counter;                                                           ",{}]],"10":[["//Internal helper functions ",{"fg":4}],["                                                    ",{}]],"11":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req);                                          ",{}]],"12":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * ",{}],["coalesce",{"fg":0,"bg":3}],["   (",{}],["char",{"fg":2}],[" * p);                                            ",{}]],"13":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert     (",{}],["size_t",{"fg":2}],[" size, ",{}],["char",{"fg":2}],[" * p);                               ",{}]],"14":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * find_block (",{}],["size_t",{"fg":2}],[" size);                                         ",{}]],"15":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"16":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   remove_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"17":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"18":[["/*",{"fg":4}],["                                                                              ",{}]],"19":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"20":[[" */",{"fg":4}],["                                                                             ",{}]],"21":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"22":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"23":[["\"mm.c\" 575L, 14615C                                           93,1          14% ",{}]]},"cursor":{"x":0,"y":11,"visible":true}}],[0.014834,{}],[0.7185780000000001,{"lines":{"23":[["\"mm.c\" 575L, 14615C                                           94,1          14% ",{}]]},"cursor":{"y":12}}],[0.496994,{"lines":{"23":[["\"mm.c\" 575L, 14615C                                           95,1          14% ",{}]]},"cursor":{"y":13}}],[0.030366,{"lines":{"23":[["\"mm.c\" 575L, 14615C                                           96,1          14% ",{}]]},"cursor":{"y":14}}],[0.032196,{"lines":{"23":[["\"mm.c\" 575L, 14615C                                           97,1          14% ",{}]]},"cursor":{"y":15}}],[0.031447,{"lines":{"23":[["\"mm.c\" 575L, 14615C                                           98,1          14% ",{}]]},"cursor":{"y":16}}],[0.032045,{"lines":{"23":[["\"mm.c\" 575L, 14615C                                           99,1          14% ",{}]]},"cursor":{"y":17}}],[0.028581,{"lines":{"23":[["\"mm.c\" 575L, 14615C                                           100,1         14% ",{}]]},"cursor":{"y":18}}],[0.035334,{"lines":{"23":[["\"mm.c\" 575L, 14615C                                           101,1         14% ",{}]]},"cursor":{"y":19}}],[0.031564,{"lines":{"23":[["\"mm.c\" 575L, 14615C                                           102,1         14% ",{}]]},"cursor":{"y":20}}],[0.027277,{"lines":{"23":[["\"mm.c\" 575L, 14615C                                           103,1         14% ",{}]]},"cursor":{"y":21}}],[0.032699,{"lines":{"23":[["\"mm.c\" 575L, 14615C                                           104,1         14% ",{}]]},"cursor":{"y":22}}],[0.029745,{"lines":{"0":[["char",{"fg":2}],[" * free_list_1000;                                                          ",{}]],"1":[["char",{"fg":2}],[" * free_list_2000;                                                          ",{}]],"2":[["char",{"fg":2}],[" * free_list_3000;                                                          ",{}]],"3":[["char",{"fg":2}],[" * free_list_oversized;                                                     ",{}]],"4":[["                                                                                ",{}]],"5":[["//for testing (size)",{"fg":4}],["                                                            ",{}]],"6":[["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" s100, s500, s1000, s2000, s3000, oversized;                        ",{}]],"7":[["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" counter;                                                           ",{}]],"8":[["                                                                                ",{}]],"9":[["//Internal helper functions ",{"fg":4}],["                                                    ",{}]],"10":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req);                                          ",{}]],"11":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * ",{}],["coalesce",{"fg":0,"bg":3}],["   (",{}],["char",{"fg":2}],[" * p);                                            ",{}]],"12":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert     (",{}],["size_t",{"fg":2}],[" size, ",{}],["char",{"fg":2}],[" * p);                               ",{}]],"13":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * find_block (",{}],["size_t",{"fg":2}],[" size);                                         ",{}]],"14":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"15":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   remove_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"16":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"17":[["/*",{"fg":4}],["                                                                              ",{}]],"18":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"19":[[" */",{"fg":4}],["                                                                             ",{}]],"20":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"21":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"22":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"23":[["                                                              105,1         14% ",{}]]}}],[0.033194,{"lines":{"0":[["char",{"fg":2}],[" * free_list_2000;                                                          ",{}]],"1":[["char",{"fg":2}],[" * free_list_3000;                                                          ",{}]],"2":[["char",{"fg":2}],[" * free_list_oversized;                                                     ",{}]],"3":[["                                                                                ",{}]],"4":[["//for testing (size)",{"fg":4}],["                                                            ",{}]],"5":[["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" s100, s500, s1000, s2000, s3000, oversized;                        ",{}]],"6":[["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" counter;                                                           ",{}]],"7":[["                                                                                ",{}]],"8":[["//Internal helper functions ",{"fg":4}],["                                                    ",{}]],"9":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req);                                          ",{}]],"10":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * ",{}],["coalesce",{"fg":0,"bg":3}],["   (",{}],["char",{"fg":2}],[" * p);                                            ",{}]],"11":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert     (",{}],["size_t",{"fg":2}],[" size, ",{}],["char",{"fg":2}],[" * p);                               ",{}]],"12":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * find_block (",{}],["size_t",{"fg":2}],[" size);                                         ",{}]],"13":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"14":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   remove_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"15":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"16":[["/*",{"fg":4}],["                                                                              ",{}]],"17":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"18":[[" */",{"fg":4}],["                                                                             ",{}]],"19":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"20":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"21":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"22":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"23":[["                                                              106,1         15% ",{}]]}}],[0.030149,{"lines":{"0":[["char",{"fg":2}],[" * free_list_3000;                                                          ",{}]],"1":[["char",{"fg":2}],[" * free_list_oversized;                                                     ",{}]],"2":[["                                                                                ",{}]],"3":[["//for testing (size)",{"fg":4}],["                                                            ",{}]],"4":[["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" s100, s500, s1000, s2000, s3000, oversized;                        ",{}]],"5":[["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" counter;                                                           ",{}]],"6":[["                                                                                ",{}]],"7":[["//Internal helper functions ",{"fg":4}],["                                                    ",{}]],"8":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req);                                          ",{}]],"9":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * ",{}],["coalesce",{"fg":0,"bg":3}],["   (",{}],["char",{"fg":2}],[" * p);                                            ",{}]],"10":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert     (",{}],["size_t",{"fg":2}],[" size, ",{}],["char",{"fg":2}],[" * p);                               ",{}]],"11":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * find_block (",{}],["size_t",{"fg":2}],[" size);                                         ",{}]],"12":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"13":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   remove_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"14":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"15":[["/*",{"fg":4}],["                                                                              ",{}]],"16":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"17":[[" */",{"fg":4}],["                                                                             ",{}]],"18":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"19":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"20":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"21":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              107,1         15% ",{}]]}}],[0.031265,{"lines":{"0":[["char",{"fg":2}],[" * free_list_oversized;                                                     ",{}]],"1":[["                                                                                ",{}]],"2":[["//for testing (size)",{"fg":4}],["                                                            ",{}]],"3":[["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" s100, s500, s1000, s2000, s3000, oversized;                        ",{}]],"4":[["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" counter;                                                           ",{}]],"5":[["                                                                                ",{}]],"6":[["//Internal helper functions ",{"fg":4}],["                                                    ",{}]],"7":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req);                                          ",{}]],"8":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * ",{}],["coalesce",{"fg":0,"bg":3}],["   (",{}],["char",{"fg":2}],[" * p);                                            ",{}]],"9":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert     (",{}],["size_t",{"fg":2}],[" size, ",{}],["char",{"fg":2}],[" * p);                               ",{}]],"10":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * find_block (",{}],["size_t",{"fg":2}],[" size);                                         ",{}]],"11":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"12":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   remove_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"13":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"14":[["/*",{"fg":4}],["                                                                              ",{}]],"15":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"16":[[" */",{"fg":4}],["                                                                             ",{}]],"17":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"18":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"19":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"20":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"21":[["                                                                                ",{}]],"22":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"23":[["                                                              108,1         15% ",{}]]}}],[0.030457,{"lines":{"0":[["                                                                                ",{}]],"1":[["//for testing (size)",{"fg":4}],["                                                            ",{}]],"2":[["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" s100, s500, s1000, s2000, s3000, oversized;                        ",{}]],"3":[["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" counter;                                                           ",{}]],"4":[["                                                                                ",{}]],"5":[["//Internal helper functions ",{"fg":4}],["                                                    ",{}]],"6":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req);                                          ",{}]],"7":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * ",{}],["coalesce",{"fg":0,"bg":3}],["   (",{}],["char",{"fg":2}],[" * p);                                            ",{}]],"8":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert     (",{}],["size_t",{"fg":2}],[" size, ",{}],["char",{"fg":2}],[" * p);                               ",{}]],"9":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * find_block (",{}],["size_t",{"fg":2}],[" size);                                         ",{}]],"10":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"11":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   remove_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"12":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"13":[["/*",{"fg":4}],["                                                                              ",{}]],"14":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"15":[[" */",{"fg":4}],["                                                                             ",{}]],"16":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"17":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"18":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"19":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"20":[["                                                                                ",{}]],"21":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"22":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"23":[["                                                              109,1         15% ",{}]]}}],[0.032442,{"lines":{"0":[["//for testing (size)",{"fg":4}],["                                                            ",{}]],"1":[["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" s100, s500, s1000, s2000, s3000, oversized;                        ",{}]],"2":[["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" counter;                                                           ",{}]],"3":[["                                                                                ",{}]],"4":[["//Internal helper functions ",{"fg":4}],["                                                    ",{}]],"5":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req);                                          ",{}]],"6":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * ",{}],["coalesce",{"fg":0,"bg":3}],["   (",{}],["char",{"fg":2}],[" * p);                                            ",{}]],"7":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert     (",{}],["size_t",{"fg":2}],[" size, ",{}],["char",{"fg":2}],[" * p);                               ",{}]],"8":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * find_block (",{}],["size_t",{"fg":2}],[" size);                                         ",{}]],"9":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"10":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   remove_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"11":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"12":[["/*",{"fg":4}],["                                                                              ",{}]],"13":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"14":[[" */",{"fg":4}],["                                                                             ",{}]],"15":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"16":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"17":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"18":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"19":[["                                                                                ",{}]],"20":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"21":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              110,0-1       15% ",{}]]}}],[0.029041,{"lines":{"0":[["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" s100, s500, s1000, s2000, s3000, oversized;                        ",{}]],"1":[["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" counter;                                                           ",{}]],"2":[["                                                                                ",{}]],"3":[["//Internal helper functions ",{"fg":4}],["                                                    ",{}]],"4":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req);                                          ",{}]],"5":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * ",{}],["coalesce",{"fg":0,"bg":3}],["   (",{}],["char",{"fg":2}],[" * p);                                            ",{}]],"6":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert     (",{}],["size_t",{"fg":2}],[" size, ",{}],["char",{"fg":2}],[" * p);                               ",{}]],"7":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * find_block (",{}],["size_t",{"fg":2}],[" size);                                         ",{}]],"8":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"9":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   remove_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"10":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"11":[["/*",{"fg":4}],["                                                                              ",{}]],"12":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"13":[[" */",{"fg":4}],["                                                                             ",{}]],"14":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"15":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"16":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"17":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"18":[["                                                                                ",{}]],"19":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"20":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"21":[["                                                                                ",{}]],"22":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"23":[["                                                              111,1         15% ",{}]]}}],[0.033241,{"lines":{"0":[["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" counter;                                                           ",{}]],"1":[["                                                                                ",{}]],"2":[["//Internal helper functions ",{"fg":4}],["                                                    ",{}]],"3":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req);                                          ",{}]],"4":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * ",{}],["coalesce",{"fg":0,"bg":3}],["   (",{}],["char",{"fg":2}],[" * p);                                            ",{}]],"5":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert     (",{}],["size_t",{"fg":2}],[" size, ",{}],["char",{"fg":2}],[" * p);                               ",{}]],"6":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * find_block (",{}],["size_t",{"fg":2}],[" size);                                         ",{}]],"7":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"8":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   remove_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"9":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"10":[["/*",{"fg":4}],["                                                                              ",{}]],"11":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"12":[[" */",{"fg":4}],["                                                                             ",{}]],"13":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"14":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"15":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"16":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"17":[["                                                                                ",{}]],"18":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"19":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"20":[["                                                                                ",{}]],"21":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"22":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"23":[["                                                              112,1         16% ",{}]]}}],[0.029061,{"lines":{"0":[["                                                                                ",{}]],"1":[["//Internal helper functions ",{"fg":4}],["                                                    ",{}]],"2":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req);                                          ",{}]],"3":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * ",{}],["coalesce",{"fg":0,"bg":3}],["   (",{}],["char",{"fg":2}],[" * p);                                            ",{}]],"4":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert     (",{}],["size_t",{"fg":2}],[" size, ",{}],["char",{"fg":2}],[" * p);                               ",{}]],"5":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * find_block (",{}],["size_t",{"fg":2}],[" size);                                         ",{}]],"6":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"7":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   remove_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"8":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"9":[["/*",{"fg":4}],["                                                                              ",{}]],"10":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"11":[[" */",{"fg":4}],["                                                                             ",{}]],"12":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"13":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"14":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"15":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"16":[["                                                                                ",{}]],"17":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"18":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"19":[["                                                                                ",{}]],"20":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"21":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"22":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"23":[["                                                              113,1         16% ",{}]]}}],[0.030799,{"lines":{"0":[["//Internal helper functions ",{"fg":4}],["                                                    ",{}]],"1":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req);                                          ",{}]],"2":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * ",{}],["coalesce",{"fg":0,"bg":3}],["   (",{}],["char",{"fg":2}],[" * p);                                            ",{}]],"3":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert     (",{}],["size_t",{"fg":2}],[" size, ",{}],["char",{"fg":2}],[" * p);                               ",{}]],"4":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * find_block (",{}],["size_t",{"fg":2}],[" size);                                         ",{}]],"5":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"6":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   remove_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"7":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"8":[["/*",{"fg":4}],["                                                                              ",{}]],"9":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"10":[[" */",{"fg":4}],["                                                                             ",{}]],"11":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"12":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"13":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"14":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"15":[["                                                                                ",{}]],"16":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"17":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"18":[["                                                                                ",{}]],"19":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"20":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"21":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"22":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"23":[["                                                              114,1         16% ",{}]]}}],[0.035237,{"lines":{"0":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req);                                          ",{}]],"1":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * ",{}],["coalesce",{"fg":0,"bg":3}],["   (",{}],["char",{"fg":2}],[" * p);                                            ",{}]],"2":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert     (",{}],["size_t",{"fg":2}],[" size, ",{}],["char",{"fg":2}],[" * p);                               ",{}]],"3":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * find_block (",{}],["size_t",{"fg":2}],[" size);                                         ",{}]],"4":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"5":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   remove_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"6":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"7":[["/*",{"fg":4}],["                                                                              ",{}]],"8":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"9":[[" */",{"fg":4}],["                                                                             ",{}]],"10":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"11":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"12":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"13":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"14":[["                                                                                ",{}]],"15":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"16":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"17":[["                                                                                ",{}]],"18":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"19":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"20":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"21":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"22":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"23":[["                                                              115,1         16% ",{}]]}}],[0.026207,{"lines":{"0":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * ",{}],["coalesce",{"fg":0,"bg":3}],["   (",{}],["char",{"fg":2}],[" * p);                                            ",{}]],"1":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert     (",{}],["size_t",{"fg":2}],[" size, ",{}],["char",{"fg":2}],[" * p);                               ",{}]],"2":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * find_block (",{}],["size_t",{"fg":2}],[" size);                                         ",{}]],"3":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"4":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   remove_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"5":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"6":[["/*",{"fg":4}],["                                                                              ",{}]],"7":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"8":[[" */",{"fg":4}],["                                                                             ",{}]],"9":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"10":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"11":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"12":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"13":[["                                                                                ",{}]],"14":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"15":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"16":[["                                                                                ",{}]],"17":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"18":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"19":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"20":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"21":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"22":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"23":[["                                                              116,1         16% ",{}]]}}],[0.030597,{"lines":{"0":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert     (",{}],["size_t",{"fg":2}],[" size, ",{}],["char",{"fg":2}],[" * p);                               ",{}]],"1":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * find_block (",{}],["size_t",{"fg":2}],[" size);                                         ",{}]],"2":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"3":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   remove_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"4":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"5":[["/*",{"fg":4}],["                                                                              ",{}]],"6":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"7":[[" */",{"fg":4}],["                                                                             ",{}]],"8":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"9":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"10":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"11":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"12":[["                                                                                ",{}]],"13":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"14":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"15":[["                                                                                ",{}]],"16":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"17":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"18":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"19":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"20":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"21":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              117,0-1       17% ",{}]]}}],[0.030425,{"lines":{"0":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * find_block (",{}],["size_t",{"fg":2}],[" size);                                         ",{}]],"1":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"2":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   remove_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"3":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"4":[["/*",{"fg":4}],["                                                                              ",{}]],"5":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"6":[[" */",{"fg":4}],["                                                                             ",{}]],"7":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"8":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"9":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"10":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"11":[["                                                                                ",{}]],"12":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"13":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"14":[["                                                                                ",{}]],"15":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"16":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"17":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"18":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"19":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"20":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"21":[["                                                                                ",{}]],"22":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"23":[["                                                              118,1         17% ",{}]]}}],[0.030614,{"lines":{"0":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   insert_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"1":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   remove_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"2":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"3":[["/*",{"fg":4}],["                                                                              ",{}]],"4":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"5":[[" */",{"fg":4}],["                                                                             ",{}]],"6":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"7":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"8":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"9":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"10":[["                                                                                ",{}]],"11":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"12":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"13":[["                                                                                ",{}]],"14":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"15":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"16":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"17":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"18":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"19":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"20":[["                                                                                ",{}]],"21":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"22":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"23":[["                                                              119,1         17% ",{}]]}}],[0.038076,{"lines":{"0":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],["   remove_free_block (",{}],["void",{"fg":2}],[" * p);                                     ",{}]],"1":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"2":[["/*",{"fg":4}],["                                                                              ",{}]],"3":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"4":[[" */",{"fg":4}],["                                                                             ",{}]],"5":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"6":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"7":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"8":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"9":[["                                                                                ",{}]],"10":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"11":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"12":[["                                                                                ",{}]],"13":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"14":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"15":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"16":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"17":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"18":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"19":[["                                                                                ",{}]],"20":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"21":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"22":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"23":[["                                                              120,1         17% ",{}]]}}],[0.079182,{"lines":{"0":[["static",{"fg":2}],[" ",{}],["char",{"fg":2}],[" * choose_free_list (",{}],["unsigned",{"fg":2}],[" ",{}],["int",{"fg":2}],[" size);                             ",{}]],"1":[["/*",{"fg":4}],["                                                                              ",{}]],"2":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"3":[[" */",{"fg":4}],["                                                                             ",{}]],"4":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"5":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"6":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"7":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"8":[["                                                                                ",{}]],"9":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"10":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"11":[["                                                                                ",{}]],"12":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"13":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"14":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"15":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"16":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"17":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"18":[["                                                                                ",{}]],"19":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"20":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"21":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"22":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"23":[["                                                              121,1         17% ",{}]]}}],[0.012296,{"lines":{"0":[[" * Initialize: return -1 on error, 0 on success.",{"fg":4}],["                                ",{}]],"1":[[" */",{"fg":4}],["                                                                             ",{}]],"2":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"3":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"4":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"5":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"6":[["                                                                                ",{}]],"7":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"8":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"9":[["                                                                                ",{}]],"10":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"11":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"12":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"13":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"14":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"15":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"16":[["                                                                                ",{}]],"17":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"18":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"19":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"20":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"21":[["                                                                                ",{}]],"22":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"23":[["                                                              123,1         18% ",{}]]}}],[0.027413,{"lines":{"0":[[" */",{"fg":4}],["                                                                             ",{}]],"1":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"2":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"3":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"4":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"5":[["                                                                                ",{}]],"6":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"7":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"8":[["                                                                                ",{}]],"9":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"10":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"11":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"12":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"13":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"14":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"15":[["                                                                                ",{}]],"16":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"17":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"18":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"19":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"20":[["                                                                                ",{}]],"21":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"22":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"23":[["                                                              124,1         18% ",{}]]}}],[0.036864,{"lines":{"0":[["int",{"fg":2}],[" mm_init(",{}],["void",{"fg":2}],[") {                                                             ",{}]],"1":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"2":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"3":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"4":[["                                                                                ",{}]],"5":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"6":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"7":[["                                                                                ",{}]],"8":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"9":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"10":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"11":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"12":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"13":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"14":[["                                                                                ",{}]],"15":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"16":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"17":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"18":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"19":[["                                                                                ",{}]],"20":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"21":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"22":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"23":[["                                                              125,1         18% ",{}]]}}],[0.023985,{"lines":{"0":[["//    printf(\"mm_init\\n\"); ",{"fg":4}],["                                                     ",{}]],"1":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"2":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"3":[["                                                                                ",{}]],"4":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"5":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"6":[["                                                                                ",{}]],"7":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"8":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"9":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"10":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"11":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"12":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"13":[["                                                                                ",{}]],"14":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"15":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"16":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"17":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"18":[["                                                                                ",{}]],"19":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"20":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"21":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"22":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"23":[["                                                              126,1         18% ",{}]]}}],[0.03236,{"lines":{"0":[["    ",{}],["char",{"fg":2}],[" * p;                                                                   ",{}]],"1":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"2":[["                                                                                ",{}]],"3":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"4":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"5":[["                                                                                ",{}]],"6":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"7":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"8":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"9":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"10":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"11":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"12":[["                                                                                ",{}]],"13":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"14":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"15":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"16":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"17":[["                                                                                ",{}]],"18":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"19":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"20":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"21":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"22":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"23":[["                                                              127,1         18% ",{}]]}}],[0.03061,{"lines":{"0":[["    ",{}],["size_t",{"fg":2}],[" req = CHUNKSIZE/WSIZE;                                               ",{}]],"1":[["                                                                                ",{}]],"2":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"3":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"4":[["                                                                                ",{}]],"5":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"6":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"7":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"8":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"9":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"10":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"11":[["                                                                                ",{}]],"12":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"13":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"14":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"15":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"16":[["                                                                                ",{}]],"17":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"18":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"19":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"20":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"21":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              128,0-1       19% ",{}]]}}],[0.031023,{"lines":{"0":[["                                                                                ",{}]],"1":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"2":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"3":[["                                                                                ",{}]],"4":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"5":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"6":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"7":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"8":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"9":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"10":[["                                                                                ",{}]],"11":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"12":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"13":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"14":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"15":[["                                                                                ",{}]],"16":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"17":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"18":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"19":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"20":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"21":[["                                                                                ",{}]],"22":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"23":[["                                                              129,1         19% ",{}]]}}],[0.0307,{"lines":{"0":[["    counter = ",{}],["0",{"fg":1}],[";                                                                ",{}]],"1":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"2":[["                                                                                ",{}]],"3":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"4":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"5":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"6":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"7":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"8":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"9":[["                                                                                ",{}]],"10":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"11":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"12":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"13":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"14":[["                                                                                ",{}]],"15":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"16":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"17":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"18":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"19":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"20":[["                                                                                ",{}]],"21":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"22":[["    first_blk += ALIGNMENT;                                                     ",{}]],"23":[["                                                              130,1         19% ",{}]]}}],[0.030302,{"lines":{"0":[["    s100 = ",{}],["0",{"fg":1}],["; s500=",{}],["0",{"fg":1}],["; s1000 = ",{}],["0",{"fg":1}],["; s2000 = ",{}],["0",{"fg":1}],["; s3000 = ",{}],["0",{"fg":1}],[";  oversized=",{}],["0",{"fg":1}],[";            ",{}]],"1":[["                                                                                ",{}]],"2":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"3":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"4":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"5":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"6":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"7":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"8":[["                                                                                ",{}]],"9":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"10":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"11":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"12":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"13":[["                                                                                ",{}]],"14":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"15":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"16":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"17":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"18":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"19":[["                                                                                ",{}]],"20":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"21":[["    first_blk += ALIGNMENT;                                                     ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              131,0-1       19% ",{}]]}}],[0.031769,{"lines":{"0":[["                                                                                ",{}]],"1":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"2":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"3":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"4":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"5":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"6":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"7":[["                                                                                ",{}]],"8":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"9":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"10":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"11":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"12":[["                                                                                ",{}]],"13":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"14":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"15":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"16":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"17":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"18":[["                                                                                ",{}]],"19":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"20":[["    first_blk += ALIGNMENT;                                                     ",{}]],"21":[["                                                                                ",{}]],"22":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"23":[["                                                              132,1         19% ",{}]]}}],[0.033325,{"lines":{"0":[["    free_list_100   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"1":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"2":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"3":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"4":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"5":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"6":[["                                                                                ",{}]],"7":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"8":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"9":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"10":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"11":[["                                                                                ",{}]],"12":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"13":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"14":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"15":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"16":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"17":[["                                                                                ",{}]],"18":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"19":[["    first_blk += ALIGNMENT;                                                     ",{}]],"20":[["                                                                                ",{}]],"21":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"22":[["    p = mem_expand (req);                                                       ",{}]],"23":[["                                                              133,1         19% ",{}]]}}],[0.029248,{"lines":{"0":[["    free_list_500   = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"1":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"2":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"3":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"4":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"5":[["                                                                                ",{}]],"6":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"7":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"8":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"9":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"10":[["                                                                                ",{}]],"11":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"12":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"13":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"14":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"15":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"16":[["                                                                                ",{}]],"17":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"18":[["    first_blk += ALIGNMENT;                                                     ",{}]],"19":[["                                                                                ",{}]],"20":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"21":[["    p = mem_expand (req);                                                       ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              134,1         20% ",{}]]}}],[0.030359,{"lines":{"0":[["    free_list_1000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"1":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"2":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"3":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"4":[["                                                                                ",{}]],"5":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"6":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"7":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"8":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"9":[["                                                                                ",{}]],"10":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"11":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"12":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"13":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"14":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"15":[["                                                                                ",{}]],"16":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"17":[["    first_blk += ALIGNMENT;                                                     ",{}]],"18":[["                                                                                ",{}]],"19":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"20":[["    p = mem_expand (req);                                                       ",{}]],"21":[["                                                                                ",{}]],"22":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"23":[["                                                              135,1         20% ",{}]]}}],[0.033254,{"lines":{"0":[["    free_list_2000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"1":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"2":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"3":[["                                                                                ",{}]],"4":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"5":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"6":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"7":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"8":[["                                                                                ",{}]],"9":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"10":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"11":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"12":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"13":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"14":[["                                                                                ",{}]],"15":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"16":[["    first_blk += ALIGNMENT;                                                     ",{}]],"17":[["                                                                                ",{}]],"18":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"19":[["    p = mem_expand (req);                                                       ",{}]],"20":[["                                                                                ",{}]],"21":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"22":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"23":[["                                                              136,1         20% ",{}]]}}],[0.037234,{"lines":{"0":[["    free_list_3000  = ",{}],["NULL",{"fg":1}],[";                                                     ",{}]],"1":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"2":[["                                                                                ",{}]],"3":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"4":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"5":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"6":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"7":[["                                                                                ",{}]],"8":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"9":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"10":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"11":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"12":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"13":[["                                                                                ",{}]],"14":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"15":[["    first_blk += ALIGNMENT;                                                     ",{}]],"16":[["                                                                                ",{}]],"17":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"18":[["    p = mem_expand (req);                                                       ",{}]],"19":[["                                                                                ",{}]],"20":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"21":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"22":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"23":[["                                                              137,1         20% ",{}]]}}],[0.02373,{"lines":{"0":[["    free_list_oversized = ",{}],["NULL",{"fg":1}],[";                                                 ",{}]],"1":[["                                                                                ",{}]],"2":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"3":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"4":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"5":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"6":[["                                                                                ",{}]],"7":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"8":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"9":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"10":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"11":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"12":[["                                                                                ",{}]],"13":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"14":[["    first_blk += ALIGNMENT;                                                     ",{}]],"15":[["                                                                                ",{}]],"16":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"17":[["    p = mem_expand (req);                                                       ",{}]],"18":[["                                                                                ",{}]],"19":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"20":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"21":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              138,0-1       20% ",{}]]}}],[0.030849,{"lines":{"0":[["                                                                                ",{}]],"1":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"2":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"3":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"4":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"5":[["                                                                                ",{}]],"6":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"7":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"8":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"9":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"10":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"11":[["                                                                                ",{}]],"12":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"13":[["    first_blk += ALIGNMENT;                                                     ",{}]],"14":[["                                                                                ",{}]],"15":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"16":[["    p = mem_expand (req);                                                       ",{}]],"17":[["                                                                                ",{}]],"18":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"19":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"20":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"21":[["                                                                                ",{}]],"22":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"23":[["                                                              139,1         21% ",{}]]}}],[0.031558,{"lines":{"0":[["    first_blk = mem_sbrk(",{}],["4",{"fg":1}],["*WSIZE);     ",{}],["//allocate 16 bytes.",{"fg":4}],["                     ",{}]],"1":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"2":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"3":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"4":[["                                                                                ",{}]],"5":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"6":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"7":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"8":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"9":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"10":[["                                                                                ",{}]],"11":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"12":[["    first_blk += ALIGNMENT;                                                     ",{}]],"13":[["                                                                                ",{}]],"14":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"15":[["    p = mem_expand (req);                                                       ",{}]],"16":[["                                                                                ",{}]],"17":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"18":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"19":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"20":[["                                                                                ",{}]],"21":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"22":[["}                                                                               ",{}]],"23":[["                                                              140,1         21% ",{}]]}}],[0.02927,{"lines":{"0":[["    ",{}],["//no memory",{"fg":4}],["                                                                 ",{}]],"1":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"2":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"3":[["                                                                                ",{}]],"4":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"5":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"6":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"7":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"8":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"9":[["                                                                                ",{}]],"10":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"11":[["    first_blk += ALIGNMENT;                                                     ",{}]],"12":[["                                                                                ",{}]],"13":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"14":[["    p = mem_expand (req);                                                       ",{}]],"15":[["                                                                                ",{}]],"16":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"17":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"18":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"19":[["                                                                                ",{}]],"20":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"21":[["}                                                                               ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              141,0-1       21% ",{}]]}}],[0.030398,{"lines":{"0":[["    ",{}],["if",{"fg":3}],[" ((first_blk) == (",{}],["void",{"fg":2}],[" *)-",{}],["1",{"fg":1}],[")                                              ",{}]],"1":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"2":[["                                                                                ",{}]],"3":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"4":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"5":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"6":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"7":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"8":[["                                                                                ",{}]],"9":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"10":[["    first_blk += ALIGNMENT;                                                     ",{}]],"11":[["                                                                                ",{}]],"12":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"13":[["    p = mem_expand (req);                                                       ",{}]],"14":[["                                                                                ",{}]],"15":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"16":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"17":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"18":[["                                                                                ",{}]],"19":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"20":[["}                                                                               ",{}]],"21":[["                                                                                ",{}]],"22":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"23":[["                                                              142,1         21% ",{}]]}}],[0.031036,{"lines":{"0":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"1":[["                                                                                ",{}]],"2":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"3":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"4":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"5":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"6":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"7":[["                                                                                ",{}]],"8":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"9":[["    first_blk += ALIGNMENT;                                                     ",{}]],"10":[["                                                                                ",{}]],"11":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"12":[["    p = mem_expand (req);                                                       ",{}]],"13":[["                                                                                ",{}]],"14":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"15":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"16":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"17":[["                                                                                ",{}]],"18":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"19":[["}                                                                               ",{}]],"20":[["                                                                                ",{}]],"21":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"22":[["{                                                                               ",{}]],"23":[["                                                              143,1         21% ",{}]]}}],[0.032267,{"lines":{"0":[["                                                                                ",{}]],"1":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"2":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"3":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"4":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"5":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"6":[["                                                                                ",{}]],"7":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"8":[["    first_blk += ALIGNMENT;                                                     ",{}]],"9":[["                                                                                ",{}]],"10":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"11":[["    p = mem_expand (req);                                                       ",{}]],"12":[["                                                                                ",{}]],"13":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"14":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"15":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"16":[["                                                                                ",{}]],"17":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"18":[["}                                                                               ",{}]],"19":[["                                                                                ",{}]],"20":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"21":[["{                                                                               ",{}]],"22":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"23":[["                                                              144,1         21% ",{}]]}}],[0.033301,{"lines":{"0":[["    ",{}],["//initialize the heap & memory manager",{"fg":4}],["                                      ",{}]],"1":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"2":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"3":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"4":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"5":[["                                                                                ",{}]],"6":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"7":[["    first_blk += ALIGNMENT;                                                     ",{}]],"8":[["                                                                                ",{}]],"9":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"10":[["    p = mem_expand (req);                                                       ",{}]],"11":[["                                                                                ",{}]],"12":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"13":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"14":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"15":[["                                                                                ",{}]],"16":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"17":[["}                                                                               ",{}]],"18":[["                                                                                ",{}]],"19":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"20":[["{                                                                               ",{}]],"21":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              145,0-1       22% ",{}]]}}],[0.028272,{"lines":{"0":[["    WRITE (first_blk, ",{}],["0",{"fg":1}],[");                                                       ",{}]],"1":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"2":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"3":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"4":[["                                                                                ",{}]],"5":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"6":[["    first_blk += ALIGNMENT;                                                     ",{}]],"7":[["                                                                                ",{}]],"8":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"9":[["    p = mem_expand (req);                                                       ",{}]],"10":[["                                                                                ",{}]],"11":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"12":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"13":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"14":[["                                                                                ",{}]],"15":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"16":[["}                                                                               ",{}]],"17":[["                                                                                ",{}]],"18":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"19":[["{                                                                               ",{}]],"20":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"21":[["                                                                                ",{}]],"22":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"23":[["                                                              146,1         22% ",{}]]}}],[0.03048,{"lines":{"0":[["    WRITE (first_blk+WSIZE,    TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"1":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"2":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"3":[["                                                                                ",{}]],"4":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"5":[["    first_blk += ALIGNMENT;                                                     ",{}]],"6":[["                                                                                ",{}]],"7":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"8":[["    p = mem_expand (req);                                                       ",{}]],"9":[["                                                                                ",{}]],"10":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"11":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"12":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"13":[["                                                                                ",{}]],"14":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"15":[["}                                                                               ",{}]],"16":[["                                                                                ",{}]],"17":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"18":[["{                                                                               ",{}]],"19":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"20":[["                                                                                ",{}]],"21":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"22":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"23":[["                                                              147,1         22% ",{}]]}}],[0.030699,{"lines":{"0":[["    WRITE (first_blk+(",{}],["2",{"fg":1}],["*WSIZE),TAG(ALIGNMENT, ",{}],["1",{"fg":1}],["));                              ",{}]],"1":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"2":[["                                                                                ",{}]],"3":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"4":[["    first_blk += ALIGNMENT;                                                     ",{}]],"5":[["                                                                                ",{}]],"6":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"7":[["    p = mem_expand (req);                                                       ",{}]],"8":[["                                                                                ",{}]],"9":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"10":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"11":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"12":[["                                                                                ",{}]],"13":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"14":[["}                                                                               ",{}]],"15":[["                                                                                ",{}]],"16":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"17":[["{                                                                               ",{}]],"18":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"19":[["                                                                                ",{}]],"20":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"21":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"22":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"23":[["                                                              148,1         22% ",{}]]}}],[0.032922,{"lines":{"0":[["    WRITE (first_blk+(",{}],["3",{"fg":1}],["*WSIZE),TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                       ",{}]],"1":[["                                                                                ",{}]],"2":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"3":[["    first_blk += ALIGNMENT;                                                     ",{}]],"4":[["                                                                                ",{}]],"5":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"6":[["    p = mem_expand (req);                                                       ",{}]],"7":[["                                                                                ",{}]],"8":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"9":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"10":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"11":[["                                                                                ",{}]],"12":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"13":[["}                                                                               ",{}]],"14":[["                                                                                ",{}]],"15":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"16":[["{                                                                               ",{}]],"17":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"18":[["                                                                                ",{}]],"19":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"20":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"21":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              149,0-1       22% ",{}]]}}],[0.089042,{"lines":{"23":[["                                                              148,1         22% ",{}]]},"cursor":{"y":21}}],[0.620101,{"lines":{"23":[["                                                              149,0-1       22% ",{}]]},"cursor":{"y":22}}],[0.499313,{"lines":{"0":[["                                                                                ",{}]],"1":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"2":[["    first_blk += ALIGNMENT;                                                     ",{}]],"3":[["                                                                                ",{}]],"4":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"5":[["    p = mem_expand (req);                                                       ",{}]],"6":[["                                                                                ",{}]],"7":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"8":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"9":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"10":[["                                                                                ",{}]],"11":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"12":[["}                                                                               ",{}]],"13":[["                                                                                ",{}]],"14":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"15":[["{                                                                               ",{}]],"16":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"17":[["                                                                                ",{}]],"18":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"19":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"20":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"21":[["                                                                                ",{}]],"22":[["    p = mem_sbrk(size);                                                         ",{}]],"23":[["                                                              150,1         23% ",{}]]}}],[0.030583,{"lines":{"0":[["    ",{}],["//set the pointer to the first block",{"fg":4}],["                                        ",{}]],"1":[["    first_blk += ALIGNMENT;                                                     ",{}]],"2":[["                                                                                ",{}]],"3":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"4":[["    p = mem_expand (req);                                                       ",{}]],"5":[["                                                                                ",{}]],"6":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"7":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"8":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"9":[["                                                                                ",{}]],"10":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"11":[["}                                                                               ",{}]],"12":[["                                                                                ",{}]],"13":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"14":[["{                                                                               ",{}]],"15":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"16":[["                                                                                ",{}]],"17":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"18":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"19":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"20":[["                                                                                ",{}]],"21":[["    p = mem_sbrk(size);                                                         ",{}]],"22":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"23":[["                                                              151,1         23% ",{}]]}}],[0.032656,{"lines":{"0":[["    first_blk += ALIGNMENT;                                                     ",{}]],"1":[["                                                                                ",{}]],"2":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"3":[["    p = mem_expand (req);                                                       ",{}]],"4":[["                                                                                ",{}]],"5":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"6":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"7":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"8":[["                                                                                ",{}]],"9":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"10":[["}                                                                               ",{}]],"11":[["                                                                                ",{}]],"12":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"13":[["{                                                                               ",{}]],"14":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"15":[["                                                                                ",{}]],"16":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"17":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"18":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"19":[["                                                                                ",{}]],"20":[["    p = mem_sbrk(size);                                                         ",{}]],"21":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"22":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"23":[["                                                              152,1         23% ",{}]]}}],[0.033712,{"lines":{"0":[["                                                                                ",{}]],"1":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"2":[["    p = mem_expand (req);                                                       ",{}]],"3":[["                                                                                ",{}]],"4":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"5":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"6":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"7":[["                                                                                ",{}]],"8":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"9":[["}                                                                               ",{}]],"10":[["                                                                                ",{}]],"11":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"12":[["{                                                                               ",{}]],"13":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"14":[["                                                                                ",{}]],"15":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"16":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"17":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"18":[["                                                                                ",{}]],"19":[["    p = mem_sbrk(size);                                                         ",{}]],"20":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"21":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"22":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"23":[["                                                              153,1         23% ",{}]]}}],[0.026843,{"lines":{"0":[["    ",{}],["//Expand heap ",{"fg":4}],["                                                              ",{}]],"1":[["    p = mem_expand (req);                                                       ",{}]],"2":[["                                                                                ",{}]],"3":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"4":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"5":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"6":[["                                                                                ",{}]],"7":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"8":[["}                                                                               ",{}]],"9":[["                                                                                ",{}]],"10":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"11":[["{                                                                               ",{}]],"12":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"13":[["                                                                                ",{}]],"14":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"15":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"16":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"17":[["                                                                                ",{}]],"18":[["    p = mem_sbrk(size);                                                         ",{}]],"19":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"20":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"21":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              154,0-1       23% ",{}]]}}],[0.032603,{"lines":{"0":[["    p = mem_expand (req);                                                       ",{}]],"1":[["                                                                                ",{}]],"2":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"3":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"4":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"5":[["                                                                                ",{}]],"6":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"7":[["}                                                                               ",{}]],"8":[["                                                                                ",{}]],"9":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"10":[["{                                                                               ",{}]],"11":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"12":[["                                                                                ",{}]],"13":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"14":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"15":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"16":[["                                                                                ",{}]],"17":[["    p = mem_sbrk(size);                                                         ",{}]],"18":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"19":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"20":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"21":[["                                                                                ",{}]],"22":[["    ",{}],["//Initialize the block ",{"fg":4}],["                                                     ",{}]],"23":[["                                                              155,1         23% ",{}]]}}],[0.03137,{"lines":{"0":[["                                                                                ",{}]],"1":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"2":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"3":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"4":[["                                                                                ",{}]],"5":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"6":[["}                                                                               ",{}]],"7":[["                                                                                ",{}]],"8":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"9":[["{                                                                               ",{}]],"10":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"11":[["                                                                                ",{}]],"12":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"13":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"14":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"15":[["                                                                                ",{}]],"16":[["    p = mem_sbrk(size);                                                         ",{}]],"17":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"18":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"19":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"20":[["                                                                                ",{}]],"21":[["    ",{}],["//Initialize the block ",{"fg":4}],["                                                     ",{}]],"22":[["    WRITE (HEAD(p),   TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//header ",{"fg":4}],["                               ",{}]],"23":[["                                                              156,1         24% ",{}]]}}],[0.031826,{"lines":{"0":[["    ",{}],["//failed to allocate",{"fg":4}],["                                                        ",{}]],"1":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"2":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"3":[["                                                                                ",{}]],"4":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"5":[["}                                                                               ",{}]],"6":[["                                                                                ",{}]],"7":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"8":[["{                                                                               ",{}]],"9":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"10":[["                                                                                ",{}]],"11":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"12":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"13":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"14":[["                                                                                ",{}]],"15":[["    p = mem_sbrk(size);                                                         ",{}]],"16":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"17":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"18":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"19":[["                                                                                ",{}]],"20":[["    ",{}],["//Initialize the block ",{"fg":4}],["                                                     ",{}]],"21":[["    WRITE (HEAD(p),   TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//header ",{"fg":4}],["                               ",{}]],"22":[["    WRITE (FOOTER(p), TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//footer",{"fg":4}],["                                ",{}]],"23":[["                                                              157,1         24% ",{}]]}}],[0.029995,{"lines":{"0":[["    ",{}],["if",{"fg":3}],[" (!p)                                                                     ",{}]],"1":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"2":[["                                                                                ",{}]],"3":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"4":[["}                                                                               ",{}]],"5":[["                                                                                ",{}]],"6":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"7":[["{                                                                               ",{}]],"8":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"9":[["                                                                                ",{}]],"10":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"11":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"12":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"13":[["                                                                                ",{}]],"14":[["    p = mem_sbrk(size);                                                         ",{}]],"15":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"16":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"17":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"18":[["                                                                                ",{}]],"19":[["    ",{}],["//Initialize the block ",{"fg":4}],["                                                     ",{}]],"20":[["    WRITE (HEAD(p),   TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//header ",{"fg":4}],["                               ",{}]],"21":[["    WRITE (FOOTER(p), TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//footer",{"fg":4}],["                                ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              158,1         24% ",{}]]}}],[0.029025,{"lines":{"0":[["        ",{}],["return",{"fg":3}],[" -",{}],["1",{"fg":1}],[";                                                              ",{}]],"1":[["                                                                                ",{}]],"2":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"3":[["}                                                                               ",{}]],"4":[["                                                                                ",{}]],"5":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"6":[["{                                                                               ",{}]],"7":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"8":[["                                                                                ",{}]],"9":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"10":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"11":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"12":[["                                                                                ",{}]],"13":[["    p = mem_sbrk(size);                                                         ",{}]],"14":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"15":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"16":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"17":[["                                                                                ",{}]],"18":[["    ",{}],["//Initialize the block ",{"fg":4}],["                                                     ",{}]],"19":[["    WRITE (HEAD(p),   TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//header ",{"fg":4}],["                               ",{}]],"20":[["    WRITE (FOOTER(p), TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//footer",{"fg":4}],["                                ",{}]],"21":[["                                                                                ",{}]],"22":[["    ",{}],["//only to ",{"fg":4}],["coalesce",{"fg":0,"bg":3}],[" with the previous block",{"fg":4}],["                                  ",{}]],"23":[["                                                              159,1         24% ",{}]]}}],[0.032957,{"lines":{"0":[["                                                                                ",{}]],"1":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"2":[["}                                                                               ",{}]],"3":[["                                                                                ",{}]],"4":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"5":[["{                                                                               ",{}]],"6":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"7":[["                                                                                ",{}]],"8":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"9":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"10":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"11":[["                                                                                ",{}]],"12":[["    p = mem_sbrk(size);                                                         ",{}]],"13":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"14":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"15":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"16":[["                                                                                ",{}]],"17":[["    ",{}],["//Initialize the block ",{"fg":4}],["                                                     ",{}]],"18":[["    WRITE (HEAD(p),   TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//header ",{"fg":4}],["                               ",{}]],"19":[["    WRITE (FOOTER(p), TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//footer",{"fg":4}],["                                ",{}]],"20":[["                                                                                ",{}]],"21":[["    ",{}],["//only to ",{"fg":4}],["coalesce",{"fg":0,"bg":3}],[" with the previous block",{"fg":4}],["                                  ",{}]],"22":[["    WRITE (HEAD(NEXT(p)), TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                            ",{}]],"23":[["                                                              160,1         24% ",{}]]}}],[0.032161,{"lines":{"0":[["    ",{}],["return",{"fg":3}],[" ",{}],["0",{"fg":1}],[";                                                                   ",{}]],"1":[["}                                                                               ",{}]],"2":[["                                                                                ",{}]],"3":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"4":[["{                                                                               ",{}]],"5":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"6":[["                                                                                ",{}]],"7":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"8":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"9":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"10":[["                                                                                ",{}]],"11":[["    p = mem_sbrk(size);                                                         ",{}]],"12":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"13":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"14":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"15":[["                                                                                ",{}]],"16":[["    ",{}],["//Initialize the block ",{"fg":4}],["                                                     ",{}]],"17":[["    WRITE (HEAD(p),   TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//header ",{"fg":4}],["                               ",{}]],"18":[["    WRITE (FOOTER(p), TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//footer",{"fg":4}],["                                ",{}]],"19":[["                                                                                ",{}]],"20":[["    ",{}],["//only to ",{"fg":4}],["coalesce",{"fg":0,"bg":3}],[" with the previous block",{"fg":4}],["                                  ",{}]],"21":[["    WRITE (HEAD(NEXT(p)), TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                            ",{}]],"22":[["    ",{}],["return",{"fg":3}],[" ",{}],["coalesce",{"fg":0,"bg":3}],[" (p);                                                        ",{}]],"23":[["                                                              161,1         25% ",{}]]}}],[0.034428,{"lines":{"0":[["}                                                                               ",{}]],"1":[["                                                                                ",{}]],"2":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"3":[["{",{"bg":6}],["                                                                               ",{}]],"4":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"5":[["                                                                                ",{}]],"6":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"7":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"8":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"9":[["                                                                                ",{}]],"10":[["    p = mem_sbrk(size);                                                         ",{}]],"11":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"12":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"13":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"14":[["                                                                                ",{}]],"15":[["    ",{}],["//Initialize the block ",{"fg":4}],["                                                     ",{}]],"16":[["    WRITE (HEAD(p),   TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//header ",{"fg":4}],["                               ",{}]],"17":[["    WRITE (FOOTER(p), TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//footer",{"fg":4}],["                                ",{}]],"18":[["                                                                                ",{}]],"19":[["    ",{}],["//only to ",{"fg":4}],["coalesce",{"fg":0,"bg":3}],[" with the previous block",{"fg":4}],["                                  ",{}]],"20":[["    WRITE (HEAD(NEXT(p)), TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                            ",{}]],"21":[["    ",{}],["return",{"fg":3}],[" ",{}],["coalesce",{"fg":0,"bg":3}],[" (p);                                                        ",{}]],"22":[["}",{"bg":6}],["                                                                               ",{}]],"23":[["                                                              162,1         25% ",{}]]}}],[0.029688,{"lines":{"0":[["                                                                                ",{}]],"1":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"2":[["{                                                                               ",{}]],"3":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"4":[["                                                                                ",{}]],"5":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"6":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"7":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"8":[["                                                                                ",{}]],"9":[["    p = mem_sbrk(size);                                                         ",{}]],"10":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"11":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"12":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"13":[["                                                                                ",{}]],"14":[["    ",{}],["//Initialize the block ",{"fg":4}],["                                                     ",{}]],"15":[["    WRITE (HEAD(p),   TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//header ",{"fg":4}],["                               ",{}]],"16":[["    WRITE (FOOTER(p), TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//footer",{"fg":4}],["                                ",{}]],"17":[["                                                                                ",{}]],"18":[["    ",{}],["//only to ",{"fg":4}],["coalesce",{"fg":0,"bg":3}],[" with the previous block",{"fg":4}],["                                  ",{}]],"19":[["    WRITE (HEAD(NEXT(p)), TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                            ",{}]],"20":[["    ",{}],["return",{"fg":3}],[" ",{}],["coalesce",{"fg":0,"bg":3}],[" (p);                                                        ",{}]],"21":[["}                                                                               ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              163,0-1       25% ",{}]]}}],[0.026534,{"lines":{"0":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * mem_expand (",{}],["size_t",{"fg":2}],[" req)                                           ",{}]],"1":[["{                                                                               ",{}]],"2":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"3":[["                                                                                ",{}]],"4":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"5":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"6":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"7":[["                                                                                ",{}]],"8":[["    p = mem_sbrk(size);                                                         ",{}]],"9":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"10":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"11":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"12":[["                                                                                ",{}]],"13":[["    ",{}],["//Initialize the block ",{"fg":4}],["                                                     ",{}]],"14":[["    WRITE (HEAD(p),   TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//header ",{"fg":4}],["                               ",{}]],"15":[["    WRITE (FOOTER(p), TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//footer",{"fg":4}],["                                ",{}]],"16":[["                                                                                ",{}]],"17":[["    ",{}],["//only to ",{"fg":4}],["coalesce",{"fg":0,"bg":3}],[" with the previous block",{"fg":4}],["                                  ",{}]],"18":[["    WRITE (HEAD(NEXT(p)), TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                            ",{}]],"19":[["    ",{}],["return",{"fg":3}],[" ",{}],["coalesce",{"fg":0,"bg":3}],[" (p);                                                        ",{}]],"20":[["}                                                                               ",{}]],"21":[["                                                                                ",{}]],"22":[["void",{"fg":2}],[" print_heap (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"23":[["                                                              164,1         25% ",{}]]}}],[0.032196,{"lines":{"0":[["{                                                                               ",{}]],"1":[[" ",{}],["//   printf(\"mem_expand\\n\"); ",{"fg":4}],["                                                  ",{}]],"2":[["                                                                                ",{}]],"3":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"4":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"5":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"6":[["                                                                                ",{}]],"7":[["    p = mem_sbrk(size);                                                         ",{}]],"8":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"9":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"10":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"11":[["                                                                                ",{}]],"12":[["    ",{}],["//Initialize the block ",{"fg":4}],["                                                     ",{}]],"13":[["    WRITE (HEAD(p),   TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//header ",{"fg":4}],["                               ",{}]],"14":[["    WRITE (FOOTER(p), TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//footer",{"fg":4}],["                                ",{}]],"15":[["                                                                                ",{}]],"16":[["    ",{}],["//only to ",{"fg":4}],["coalesce",{"fg":0,"bg":3}],[" with the previous block",{"fg":4}],["                                  ",{}]],"17":[["    WRITE (HEAD(NEXT(p)), TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                            ",{}]],"18":[["    ",{}],["return",{"fg":3}],[" ",{}],["coalesce",{"fg":0,"bg":3}],[" (p);                                                        ",{}]],"19":[["}                                                                               ",{}]],"20":[["                                                                                ",{}]],"21":[["void",{"fg":2}],[" print_heap (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"22":[["{                                                                               ",{}]],"23":[["                                                              165,1         25% ",{}]]}}],[0.028953,{"lines":{"0":[["                                                                                ",{}]],"1":[["    ",{}],["char",{"fg":2}],[" * p = ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"2":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"3":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"4":[["                                                                                ",{}]],"5":[["    p = mem_sbrk(size);                                                         ",{}]],"6":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"7":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"8":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"9":[["                                                                                ",{}]],"10":[["    ",{}],["//Initialize the block ",{"fg":4}],["                                                     ",{}]],"11":[["    WRITE (HEAD(p),   TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//header ",{"fg":4}],["                               ",{}]],"12":[["    WRITE (FOOTER(p), TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//footer",{"fg":4}],["                                ",{}]],"13":[["                                                                                ",{}]],"14":[["    ",{}],["//only to ",{"fg":4}],["coalesce",{"fg":0,"bg":3}],[" with the previous block",{"fg":4}],["                                  ",{}]],"15":[["    WRITE (HEAD(NEXT(p)), TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                            ",{}]],"16":[["    ",{}],["return",{"fg":3}],[" ",{}],["coalesce",{"fg":0,"bg":3}],[" (p);                                                        ",{}]],"17":[["}                                                                               ",{}]],"18":[["                                                                                ",{}]],"19":[["void",{"fg":2}],[" print_heap (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"20":[["{                                                                               ",{}]],"21":[["   printf (",{}],["\"header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              166,1         26% ",{}]]},"cursor":{"y":21}}],[0.041844,{"lines":{"0":[["    ",{}],["//even number of words for alignment",{"fg":4}],["                                        ",{}]],"1":[["    ",{}],["size_t",{"fg":2}],[" size = (req % ",{}],["2",{"fg":1}],[") ? (req+",{}],["1",{"fg":1}],[") * WSIZE : req*WSIZE;                      ",{}]],"2":[["                                                                                ",{}]],"3":[["    p = mem_sbrk(size);                                                         ",{}]],"4":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"5":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"6":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"7":[["                                                                                ",{}]],"8":[["    ",{}],["//Initialize the block ",{"fg":4}],["                                                     ",{}]],"9":[["    WRITE (HEAD(p),   TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//header ",{"fg":4}],["                               ",{}]],"10":[["    WRITE (FOOTER(p), TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//footer",{"fg":4}],["                                ",{}]],"11":[["                                                                                ",{}]],"12":[["    ",{}],["//only to ",{"fg":4}],["coalesce",{"fg":0,"bg":3}],[" with the previous block",{"fg":4}],["                                  ",{}]],"13":[["    WRITE (HEAD(NEXT(p)), TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                            ",{}]],"14":[["    ",{}],["return",{"fg":3}],[" ",{}],["coalesce",{"fg":0,"bg":3}],[" (p);                                                        ",{}]],"15":[["}                                                                               ",{}]],"16":[["                                                                                ",{}]],"17":[["void",{"fg":2}],[" print_heap (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"18":[["{                                                                               ",{}]],"19":[["   printf (",{}],["\"header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",",{}]],"20":[["                                                                                ",{}]],"21":[["   HEAD(p), SIZE(HEAD(p)), ALLOC(HEAD(p)), FOOTER(p), SIZE(FOOTER(p)), ALLOC(FOO",{}]],"22":[["TER(p)));                                                                       ",{}]],"23":[["                                                              167,1         26% ",{}]]}}],[0.023182,{"lines":{"0":[["                                                                                ",{}]],"1":[["    p = mem_sbrk(size);                                                         ",{}]],"2":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"3":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"4":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"5":[["                                                                                ",{}]],"6":[["    ",{}],["//Initialize the block ",{"fg":4}],["                                                     ",{}]],"7":[["    WRITE (HEAD(p),   TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//header ",{"fg":4}],["                               ",{}]],"8":[["    WRITE (FOOTER(p), TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//footer",{"fg":4}],["                                ",{}]],"9":[["                                                                                ",{}]],"10":[["    ",{}],["//only to ",{"fg":4}],["coalesce",{"fg":0,"bg":3}],[" with the previous block",{"fg":4}],["                                  ",{}]],"11":[["    WRITE (HEAD(NEXT(p)), TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                            ",{}]],"12":[["    ",{}],["return",{"fg":3}],[" ",{}],["coalesce",{"fg":0,"bg":3}],[" (p);                                                        ",{}]],"13":[["}                                                                               ",{}]],"14":[["                                                                                ",{}]],"15":[["void",{"fg":2}],[" print_heap (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"16":[["{                                                                               ",{}]],"17":[["   printf (",{}],["\"header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",",{}]],"18":[["                                                                                ",{}]],"19":[["   HEAD(p), SIZE(HEAD(p)), ALLOC(HEAD(p)), FOOTER(p), SIZE(FOOTER(p)), ALLOC(FOO",{}]],"20":[["TER(p)));                                                                       ",{}]],"21":[["   printf (",{}],["\"prev_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], prev_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"22":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                      ",{}]],"23":[["                                                              168,1         26% ",{}]]}}],[0.03219,{"lines":{"0":[["    ",{}],["//no memory ",{"fg":4}],["                                                                ",{}]],"1":[["    ",{}],["if",{"fg":3}],[" ((",{}],["long",{"fg":2}],[")p == -",{}],["1",{"fg":1}],[")                                                          ",{}]],"2":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"3":[["                                                                                ",{}]],"4":[["    ",{}],["//Initialize the block ",{"fg":4}],["                                                     ",{}]],"5":[["    WRITE (HEAD(p),   TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//header ",{"fg":4}],["                               ",{}]],"6":[["    WRITE (FOOTER(p), TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//footer",{"fg":4}],["                                ",{}]],"7":[["                                                                                ",{}]],"8":[["    ",{}],["//only to ",{"fg":4}],["coalesce",{"fg":0,"bg":3}],[" with the previous block",{"fg":4}],["                                  ",{}]],"9":[["    WRITE (HEAD(NEXT(p)), TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                            ",{}]],"10":[["    ",{}],["return",{"fg":3}],[" ",{}],["coalesce",{"fg":0,"bg":3}],[" (p);                                                        ",{}]],"11":[["}                                                                               ",{}]],"12":[["                                                                                ",{}]],"13":[["void",{"fg":2}],[" print_heap (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"14":[["{                                                                               ",{}]],"15":[["   printf (",{}],["\"header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",",{}]],"16":[["                                                                                ",{}]],"17":[["   HEAD(p), SIZE(HEAD(p)), ALLOC(HEAD(p)), FOOTER(p), SIZE(FOOTER(p)), ALLOC(FOO",{}]],"18":[["TER(p)));                                                                       ",{}]],"19":[["   printf (",{}],["\"prev_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], prev_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"20":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                      ",{}]],"21":[["   HEAD(PREV(p)), SIZE(HEAD(PREV(p))), ALLOC(HEAD(PREV(p))), FOOTER(PREV(p)), SI",{}]],"22":[["ZE(FOOTER(PREV(p))), ALLOC(FOOTER(PREV(p))));                                   ",{}]],"23":[["                                                              169,1         26% ",{}]]}}],[0.032005,{"lines":{"0":[["        ",{}],["return",{"fg":3}],[" ",{}],["NULL",{"fg":1}],[";                                                            ",{}]],"1":[["                                                                                ",{}]],"2":[["    ",{}],["//Initialize the block ",{"fg":4}],["                                                     ",{}]],"3":[["    WRITE (HEAD(p),   TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//header ",{"fg":4}],["                               ",{}]],"4":[["    WRITE (FOOTER(p), TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//footer",{"fg":4}],["                                ",{}]],"5":[["                                                                                ",{}]],"6":[["    ",{}],["//only to ",{"fg":4}],["coalesce",{"fg":0,"bg":3}],[" with the previous block",{"fg":4}],["                                  ",{}]],"7":[["    WRITE (HEAD(NEXT(p)), TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                            ",{}]],"8":[["    ",{}],["return",{"fg":3}],[" ",{}],["coalesce",{"fg":0,"bg":3}],[" (p);                                                        ",{}]],"9":[["}                                                                               ",{}]],"10":[["                                                                                ",{}]],"11":[["void",{"fg":2}],[" print_heap (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"12":[["{                                                                               ",{}]],"13":[["   printf (",{}],["\"header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",",{}]],"14":[["                                                                                ",{}]],"15":[["   HEAD(p), SIZE(HEAD(p)), ALLOC(HEAD(p)), FOOTER(p), SIZE(FOOTER(p)), ALLOC(FOO",{}]],"16":[["TER(p)));                                                                       ",{}]],"17":[["   printf (",{}],["\"prev_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], prev_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"18":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                      ",{}]],"19":[["   HEAD(PREV(p)), SIZE(HEAD(PREV(p))), ALLOC(HEAD(PREV(p))), FOOTER(PREV(p)), SI",{}]],"20":[["ZE(FOOTER(PREV(p))), ALLOC(FOOTER(PREV(p))));                                   ",{}]],"21":[["   printf (",{}],["\"next_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], next_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"22":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n\\n\\n\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                ",{}]],"23":[["                                                              170,1         27% ",{}]]}}],[0.025671,{"lines":{"0":[["    ",{}],["//Initialize the block ",{"fg":4}],["                                                     ",{}]],"1":[["    WRITE (HEAD(p),   TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//header ",{"fg":4}],["                               ",{}]],"2":[["    WRITE (FOOTER(p), TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//footer",{"fg":4}],["                                ",{}]],"3":[["                                                                                ",{}]],"4":[["    ",{}],["//only to ",{"fg":4}],["coalesce",{"fg":0,"bg":3}],[" with the previous block",{"fg":4}],["                                  ",{}]],"5":[["    WRITE (HEAD(NEXT(p)), TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                            ",{}]],"6":[["    ",{}],["return",{"fg":3}],[" ",{}],["coalesce",{"fg":0,"bg":3}],[" (p);                                                        ",{}]],"7":[["}                                                                               ",{}]],"8":[["                                                                                ",{}]],"9":[["void",{"fg":2}],[" print_heap (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"10":[["{                                                                               ",{}]],"11":[["   printf (",{}],["\"header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",",{}]],"12":[["                                                                                ",{}]],"13":[["   HEAD(p), SIZE(HEAD(p)), ALLOC(HEAD(p)), FOOTER(p), SIZE(FOOTER(p)), ALLOC(FOO",{}]],"14":[["TER(p)));                                                                       ",{}]],"15":[["   printf (",{}],["\"prev_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], prev_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"16":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                      ",{}]],"17":[["   HEAD(PREV(p)), SIZE(HEAD(PREV(p))), ALLOC(HEAD(PREV(p))), FOOTER(PREV(p)), SI",{}]],"18":[["ZE(FOOTER(PREV(p))), ALLOC(FOOTER(PREV(p))));                                   ",{}]],"19":[["   printf (",{}],["\"next_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], next_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"20":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n\\n\\n\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                ",{}]],"21":[["   HEAD(NEXT(p)), SIZE(HEAD(NEXT(p))), ALLOC(HEAD(NEXT(p))), FOOTER(NEXT(p)), SI",{}]],"22":[["ZE(FOOTER(NEXT(p))), ALLOC(FOOTER(NEXT(p))));                                   ",{}]],"23":[["                                                              171,1         27% ",{}]]}}],[0.038643,{"lines":{"0":[["    WRITE (HEAD(p),   TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//header ",{"fg":4}],["                               ",{}]],"1":[["    WRITE (FOOTER(p), TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//footer",{"fg":4}],["                                ",{}]],"2":[["                                                                                ",{}]],"3":[["    ",{}],["//only to ",{"fg":4}],["coalesce",{"fg":0,"bg":3}],[" with the previous block",{"fg":4}],["                                  ",{}]],"4":[["    WRITE (HEAD(NEXT(p)), TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                            ",{}]],"5":[["    ",{}],["return",{"fg":3}],[" ",{}],["coalesce",{"fg":0,"bg":3}],[" (p);                                                        ",{}]],"6":[["}                                                                               ",{}]],"7":[["                                                                                ",{}]],"8":[["void",{"fg":2}],[" print_heap (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"9":[["{",{"bg":6}],["                                                                               ",{}]],"10":[["   printf (",{}],["\"header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",",{}]],"11":[["                                                                                ",{}]],"12":[["   HEAD(p), SIZE(HEAD(p)), ALLOC(HEAD(p)), FOOTER(p), SIZE(FOOTER(p)), ALLOC(FOO",{}]],"13":[["TER(p)));                                                                       ",{}]],"14":[["   printf (",{}],["\"prev_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], prev_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"15":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                      ",{}]],"16":[["   HEAD(PREV(p)), SIZE(HEAD(PREV(p))), ALLOC(HEAD(PREV(p))), FOOTER(PREV(p)), SI",{}]],"17":[["ZE(FOOTER(PREV(p))), ALLOC(FOOTER(PREV(p))));                                   ",{}]],"18":[["   printf (",{}],["\"next_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], next_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"19":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n\\n\\n\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                ",{}]],"20":[["   HEAD(NEXT(p)), SIZE(HEAD(NEXT(p))), ALLOC(HEAD(NEXT(p))), FOOTER(NEXT(p)), SI",{}]],"21":[["ZE(FOOTER(NEXT(p))), ALLOC(FOOTER(NEXT(p))));                                   ",{}]],"22":[["}",{"bg":6}],["                                                                               ",{}]],"23":[["                                                              172,1         27% ",{}]]},"cursor":{"y":22}}],[0.030205,{"lines":{"0":[["    WRITE (FOOTER(p), TAG(size,",{}],["0",{"fg":1}],["));     ",{}],["//footer",{"fg":4}],["                                ",{}]],"1":[["                                                                                ",{}]],"2":[["    ",{}],["//only to ",{"fg":4}],["coalesce",{"fg":0,"bg":3}],[" with the previous block",{"fg":4}],["                                  ",{}]],"3":[["    WRITE (HEAD(NEXT(p)), TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                            ",{}]],"4":[["    ",{}],["return",{"fg":3}],[" ",{}],["coalesce",{"fg":0,"bg":3}],[" (p);                                                        ",{}]],"5":[["}                                                                               ",{}]],"6":[["                                                                                ",{}]],"7":[["void",{"fg":2}],[" print_heap (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"8":[["{                                                                               ",{}]],"9":[["   printf (",{}],["\"header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",",{}]],"10":[["                                                                                ",{}]],"11":[["   HEAD(p), SIZE(HEAD(p)), ALLOC(HEAD(p)), FOOTER(p), SIZE(FOOTER(p)), ALLOC(FOO",{}]],"12":[["TER(p)));                                                                       ",{}]],"13":[["   printf (",{}],["\"prev_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], prev_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"14":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                      ",{}]],"15":[["   HEAD(PREV(p)), SIZE(HEAD(PREV(p))), ALLOC(HEAD(PREV(p))), FOOTER(PREV(p)), SI",{}]],"16":[["ZE(FOOTER(PREV(p))), ALLOC(FOOTER(PREV(p))));                                   ",{}]],"17":[["   printf (",{}],["\"next_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], next_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"18":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n\\n\\n\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                ",{}]],"19":[["   HEAD(NEXT(p)), SIZE(HEAD(NEXT(p))), ALLOC(HEAD(NEXT(p))), FOOTER(NEXT(p)), SI",{}]],"20":[["ZE(FOOTER(NEXT(p))), ALLOC(FOOTER(NEXT(p))));                                   ",{}]],"21":[["}                                                                               ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              173,0-1       27% ",{}]]}}],[0.028911,{"lines":{"0":[["                                                                                ",{}]],"1":[["    ",{}],["//only to ",{"fg":4}],["coalesce",{"fg":0,"bg":3}],[" with the previous block",{"fg":4}],["                                  ",{}]],"2":[["    WRITE (HEAD(NEXT(p)), TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                            ",{}]],"3":[["    ",{}],["return",{"fg":3}],[" ",{}],["coalesce",{"fg":0,"bg":3}],[" (p);                                                        ",{}]],"4":[["}                                                                               ",{}]],"5":[["                                                                                ",{}]],"6":[["void",{"fg":2}],[" print_heap (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"7":[["{                                                                               ",{}]],"8":[["   printf (",{}],["\"header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",",{}]],"9":[["                                                                                ",{}]],"10":[["   HEAD(p), SIZE(HEAD(p)), ALLOC(HEAD(p)), FOOTER(p), SIZE(FOOTER(p)), ALLOC(FOO",{}]],"11":[["TER(p)));                                                                       ",{}]],"12":[["   printf (",{}],["\"prev_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], prev_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"13":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                      ",{}]],"14":[["   HEAD(PREV(p)), SIZE(HEAD(PREV(p))), ALLOC(HEAD(PREV(p))), FOOTER(PREV(p)), SI",{}]],"15":[["ZE(FOOTER(PREV(p))), ALLOC(FOOTER(PREV(p))));                                   ",{}]],"16":[["   printf (",{}],["\"next_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], next_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"17":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n\\n\\n\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                ",{}]],"18":[["   HEAD(NEXT(p)), SIZE(HEAD(NEXT(p))), ALLOC(HEAD(NEXT(p))), FOOTER(NEXT(p)), SI",{}]],"19":[["ZE(FOOTER(NEXT(p))), ALLOC(FOOTER(NEXT(p))));                                   ",{}]],"20":[["}                                                                               ",{}]],"21":[["                                                                                ",{}]],"22":[["void",{"fg":2}],[" print_free (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"23":[["                                                              174,1         28% ",{}]]}}],[0.028386,{"lines":{"0":[["    ",{}],["//only to ",{"fg":4}],["coalesce",{"fg":0,"bg":3}],[" with the previous block",{"fg":4}],["                                  ",{}]],"1":[["    WRITE (HEAD(NEXT(p)), TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                            ",{}]],"2":[["    ",{}],["return",{"fg":3}],[" ",{}],["coalesce",{"fg":0,"bg":3}],[" (p);                                                        ",{}]],"3":[["}                                                                               ",{}]],"4":[["                                                                                ",{}]],"5":[["void",{"fg":2}],[" print_heap (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"6":[["{                                                                               ",{}]],"7":[["   printf (",{}],["\"header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",",{}]],"8":[["                                                                                ",{}]],"9":[["   HEAD(p), SIZE(HEAD(p)), ALLOC(HEAD(p)), FOOTER(p), SIZE(FOOTER(p)), ALLOC(FOO",{}]],"10":[["TER(p)));                                                                       ",{}]],"11":[["   printf (",{}],["\"prev_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], prev_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"12":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                      ",{}]],"13":[["   HEAD(PREV(p)), SIZE(HEAD(PREV(p))), ALLOC(HEAD(PREV(p))), FOOTER(PREV(p)), SI",{}]],"14":[["ZE(FOOTER(PREV(p))), ALLOC(FOOTER(PREV(p))));                                   ",{}]],"15":[["   printf (",{}],["\"next_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], next_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"16":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n\\n\\n\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                ",{}]],"17":[["   HEAD(NEXT(p)), SIZE(HEAD(NEXT(p))), ALLOC(HEAD(NEXT(p))), FOOTER(NEXT(p)), SI",{}]],"18":[["ZE(FOOTER(NEXT(p))), ALLOC(FOOTER(NEXT(p))));                                   ",{}]],"19":[["}                                                                               ",{}]],"20":[["                                                                                ",{}]],"21":[["void",{"fg":2}],[" print_free (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"22":[["{                                                                               ",{}]],"23":[["                                                              175,1         28% ",{}]]}}],[0.032642,{"lines":{"0":[["    WRITE (HEAD(NEXT(p)), TAG(",{}],["0",{"fg":1}],[",",{}],["1",{"fg":1}],["));                                            ",{}]],"1":[["    ",{}],["return",{"fg":3}],[" ",{}],["coalesce",{"fg":0,"bg":3}],[" (p);                                                        ",{}]],"2":[["}                                                                               ",{}]],"3":[["                                                                                ",{}]],"4":[["void",{"fg":2}],[" print_heap (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"5":[["{                                                                               ",{}]],"6":[["   printf (",{}],["\"header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",",{}]],"7":[["                                                                                ",{}]],"8":[["   HEAD(p), SIZE(HEAD(p)), ALLOC(HEAD(p)), FOOTER(p), SIZE(FOOTER(p)), ALLOC(FOO",{}]],"9":[["TER(p)));                                                                       ",{}]],"10":[["   printf (",{}],["\"prev_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], prev_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"11":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                      ",{}]],"12":[["   HEAD(PREV(p)), SIZE(HEAD(PREV(p))), ALLOC(HEAD(PREV(p))), FOOTER(PREV(p)), SI",{}]],"13":[["ZE(FOOTER(PREV(p))), ALLOC(FOOTER(PREV(p))));                                   ",{}]],"14":[["   printf (",{}],["\"next_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], next_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"15":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n\\n\\n\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                ",{}]],"16":[["   HEAD(NEXT(p)), SIZE(HEAD(NEXT(p))), ALLOC(HEAD(NEXT(p))), FOOTER(NEXT(p)), SI",{}]],"17":[["ZE(FOOTER(NEXT(p))), ALLOC(FOOTER(NEXT(p))));                                   ",{}]],"18":[["}                                                                               ",{}]],"19":[["                                                                                ",{}]],"20":[["void",{"fg":2}],[" print_free (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"21":[["{                                                                               ",{}]],"22":[["   printf (",{}],["\"pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", p);                                                 ",{}]],"23":[["                                                              176,1         28% ",{}]]}}],[0.027779,{"lines":{"0":[["    ",{}],["return",{"fg":3}],[" ",{}],["coalesce",{"fg":0,"bg":3}],[" (p);                                                        ",{}]],"1":[["}                                                                               ",{}]],"2":[["                                                                                ",{}]],"3":[["void",{"fg":2}],[" print_heap (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"4":[["{                                                                               ",{}]],"5":[["   printf (",{}],["\"header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",",{}]],"6":[["                                                                                ",{}]],"7":[["   HEAD(p), SIZE(HEAD(p)), ALLOC(HEAD(p)), FOOTER(p), SIZE(FOOTER(p)), ALLOC(FOO",{}]],"8":[["TER(p)));                                                                       ",{}]],"9":[["   printf (",{}],["\"prev_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], prev_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"10":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                      ",{}]],"11":[["   HEAD(PREV(p)), SIZE(HEAD(PREV(p))), ALLOC(HEAD(PREV(p))), FOOTER(PREV(p)), SI",{}]],"12":[["ZE(FOOTER(PREV(p))), ALLOC(FOOTER(PREV(p))));                                   ",{}]],"13":[["   printf (",{}],["\"next_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], next_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"14":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n\\n\\n\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                ",{}]],"15":[["   HEAD(NEXT(p)), SIZE(HEAD(NEXT(p))), ALLOC(HEAD(NEXT(p))), FOOTER(NEXT(p)), SI",{}]],"16":[["ZE(FOOTER(NEXT(p))), ALLOC(FOOTER(NEXT(p))));                                   ",{}]],"17":[["}                                                                               ",{}]],"18":[["                                                                                ",{}]],"19":[["void",{"fg":2}],[" print_free (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"20":[["{                                                                               ",{}]],"21":[["   printf (",{}],["\"pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", p);                                                 ",{}]],"22":[["   printf (",{}],["\"next_pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", NEXT_FP(p));                                   ",{}]],"23":[["                                                              177,1         28% ",{}]]}}],[0.031941,{"lines":{"0":[["}                                                                               ",{}]],"1":[["                                                                                ",{}]],"2":[["void",{"fg":2}],[" print_heap (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"3":[["{                                                                               ",{}]],"4":[["   printf (",{}],["\"header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",",{}]],"5":[["                                                                                ",{}]],"6":[["   HEAD(p), SIZE(HEAD(p)), ALLOC(HEAD(p)), FOOTER(p), SIZE(FOOTER(p)), ALLOC(FOO",{}]],"7":[["TER(p)));                                                                       ",{}]],"8":[["   printf (",{}],["\"prev_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], prev_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"9":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                      ",{}]],"10":[["   HEAD(PREV(p)), SIZE(HEAD(PREV(p))), ALLOC(HEAD(PREV(p))), FOOTER(PREV(p)), SI",{}]],"11":[["ZE(FOOTER(PREV(p))), ALLOC(FOOTER(PREV(p))));                                   ",{}]],"12":[["   printf (",{}],["\"next_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], next_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"13":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n\\n\\n\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                ",{}]],"14":[["   HEAD(NEXT(p)), SIZE(HEAD(NEXT(p))), ALLOC(HEAD(NEXT(p))), FOOTER(NEXT(p)), SI",{}]],"15":[["ZE(FOOTER(NEXT(p))), ALLOC(FOOTER(NEXT(p))));                                   ",{}]],"16":[["}                                                                               ",{}]],"17":[["                                                                                ",{}]],"18":[["void",{"fg":2}],[" print_free (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"19":[["{                                                                               ",{}]],"20":[["   printf (",{}],["\"pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", p);                                                 ",{}]],"21":[["   printf (",{}],["\"next_pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", NEXT_FP(p));                                   ",{}]],"22":[["   printf (",{}],["\"prev_pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", PREV_FP(p));                                   ",{}]],"23":[["                                                              178,1         28% ",{}]]}}],[0.033572,{"lines":{"0":[["                                                                                ",{}]],"1":[["void",{"fg":2}],[" print_heap (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"2":[["{                                                                               ",{}]],"3":[["   printf (",{}],["\"header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",",{}]],"4":[["                                                                                ",{}]],"5":[["   HEAD(p), SIZE(HEAD(p)), ALLOC(HEAD(p)), FOOTER(p), SIZE(FOOTER(p)), ALLOC(FOO",{}]],"6":[["TER(p)));                                                                       ",{}]],"7":[["   printf (",{}],["\"prev_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], prev_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"8":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                      ",{}]],"9":[["   HEAD(PREV(p)), SIZE(HEAD(PREV(p))), ALLOC(HEAD(PREV(p))), FOOTER(PREV(p)), SI",{}]],"10":[["ZE(FOOTER(PREV(p))), ALLOC(FOOTER(PREV(p))));                                   ",{}]],"11":[["   printf (",{}],["\"next_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], next_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"12":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n\\n\\n\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                ",{}]],"13":[["   HEAD(NEXT(p)), SIZE(HEAD(NEXT(p))), ALLOC(HEAD(NEXT(p))), FOOTER(NEXT(p)), SI",{}]],"14":[["ZE(FOOTER(NEXT(p))), ALLOC(FOOTER(NEXT(p))));                                   ",{}]],"15":[["}                                                                               ",{}]],"16":[["                                                                                ",{}]],"17":[["void",{"fg":2}],[" print_free (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"18":[["{",{"bg":6}],["                                                                               ",{}]],"19":[["   printf (",{}],["\"pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", p);                                                 ",{}]],"20":[["   printf (",{}],["\"next_pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", NEXT_FP(p));                                   ",{}]],"21":[["   printf (",{}],["\"prev_pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", PREV_FP(p));                                   ",{}]],"22":[["}",{"bg":6}],["                                                                               ",{}]],"23":[["                                                              179,1         29% ",{}]]}}],[0.030327,{"lines":{"0":[["void",{"fg":2}],[" print_heap (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"1":[["{                                                                               ",{}]],"2":[["   printf (",{}],["\"header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",",{}]],"3":[["                                                                                ",{}]],"4":[["   HEAD(p), SIZE(HEAD(p)), ALLOC(HEAD(p)), FOOTER(p), SIZE(FOOTER(p)), ALLOC(FOO",{}]],"5":[["TER(p)));                                                                       ",{}]],"6":[["   printf (",{}],["\"prev_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], prev_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"7":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                      ",{}]],"8":[["   HEAD(PREV(p)), SIZE(HEAD(PREV(p))), ALLOC(HEAD(PREV(p))), FOOTER(PREV(p)), SI",{}]],"9":[["ZE(FOOTER(PREV(p))), ALLOC(FOOTER(PREV(p))));                                   ",{}]],"10":[["   printf (",{}],["\"next_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], next_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"11":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n\\n\\n\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                ",{}]],"12":[["   HEAD(NEXT(p)), SIZE(HEAD(NEXT(p))), ALLOC(HEAD(NEXT(p))), FOOTER(NEXT(p)), SI",{}]],"13":[["ZE(FOOTER(NEXT(p))), ALLOC(FOOTER(NEXT(p))));                                   ",{}]],"14":[["}                                                                               ",{}]],"15":[["                                                                                ",{}]],"16":[["void",{"fg":2}],[" print_free (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"17":[["{                                                                               ",{}]],"18":[["   printf (",{}],["\"pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", p);                                                 ",{}]],"19":[["   printf (",{}],["\"next_pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", NEXT_FP(p));                                   ",{}]],"20":[["   printf (",{}],["\"prev_pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", PREV_FP(p));                                   ",{}]],"21":[["}                                                                               ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              180,0-1       29% ",{}]]}}],[0.029721,{"lines":{"0":[["{                                                                               ",{}]],"1":[["   printf (",{}],["\"header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",",{}]],"2":[["                                                                                ",{}]],"3":[["   HEAD(p), SIZE(HEAD(p)), ALLOC(HEAD(p)), FOOTER(p), SIZE(FOOTER(p)), ALLOC(FOO",{}]],"4":[["TER(p)));                                                                       ",{}]],"5":[["   printf (",{}],["\"prev_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], prev_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"6":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                      ",{}]],"7":[["   HEAD(PREV(p)), SIZE(HEAD(PREV(p))), ALLOC(HEAD(PREV(p))), FOOTER(PREV(p)), SI",{}]],"8":[["ZE(FOOTER(PREV(p))), ALLOC(FOOTER(PREV(p))));                                   ",{}]],"9":[["   printf (",{}],["\"next_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], next_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"10":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n\\n\\n\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                ",{}]],"11":[["   HEAD(NEXT(p)), SIZE(HEAD(NEXT(p))), ALLOC(HEAD(NEXT(p))), FOOTER(NEXT(p)), SI",{}]],"12":[["ZE(FOOTER(NEXT(p))), ALLOC(FOOTER(NEXT(p))));                                   ",{}]],"13":[["}                                                                               ",{}]],"14":[["                                                                                ",{}]],"15":[["void",{"fg":2}],[" print_free (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"16":[["{                                                                               ",{}]],"17":[["   printf (",{}],["\"pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", p);                                                 ",{}]],"18":[["   printf (",{}],["\"next_pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", NEXT_FP(p));                                   ",{}]],"19":[["   printf (",{}],["\"prev_pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", PREV_FP(p));                                   ",{}]],"20":[["}                                                                               ",{}]],"21":[["                                                                                ",{}]],"22":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * ",{}],["coalesce",{"fg":0,"bg":3}],[" (",{}],["char",{"fg":2}],[" * p)                                               ",{}]],"23":[["                                                              181,1         29% ",{}]]}}],[0.127932,{"lines":{"23":[["                                                              180,0-1       29% ",{}]]},"cursor":{"y":21}}],[0.7671289999999999,{"lines":{"23":[[":                                                                               ",{}]]},"cursor":{"x":1,"y":23}}],[0.135861,{"lines":{"23":[[":/                                                                              ",{}]]},"cursor":{"x":2}}],[0.119531,{"lines":{"23":[[":/c                                                                             ",{}]]},"cursor":{"x":3}}],[0.1499,{"lines":{"23":[[":/co                                                                            ",{}]]},"cursor":{"x":4}}],[0.068456,{"lines":{"23":[[":/cou                                                                           ",{}]]},"cursor":{"x":5}}],[0.181681,{"lines":{"23":[[":/coun                                                                          ",{}]]},"cursor":{"x":6}}],[0.103367,{"lines":{"23":[[":/count                                                                         ",{}]]},"cursor":{"x":7}}],[0.107225,{"lines":{"23":[[":/counte                                                                        ",{}]]},"cursor":{"x":8}}],[0.097557,{"lines":{"23":[[":/counter                                                                       ",{}]]},"cursor":{"x":9}}],[0.13325,{"cursor":{"x":0}}],[0.00436,{"lines":{"0":[["   HEAD(p), SIZE(HEAD(p)), ALLOC(HEAD(p)), FOOTER(p), SIZE(FOOTER(p)), ALLOC(FOO",{}]],"1":[["TER(p)));                                                                       ",{}]],"2":[["   printf (",{}],["\"prev_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], prev_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"3":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                      ",{}]],"4":[["   HEAD(PREV(p)), SIZE(HEAD(PREV(p))), ALLOC(HEAD(PREV(p))), FOOTER(PREV(p)), SI",{}]],"5":[["ZE(FOOTER(PREV(p))), ALLOC(FOOTER(PREV(p))));                                   ",{}]],"6":[["   printf (",{}],["\"next_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], next_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"7":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n\\n\\n\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                ",{}]],"8":[["   HEAD(NEXT(p)), SIZE(HEAD(NEXT(p))), ALLOC(HEAD(NEXT(p))), FOOTER(NEXT(p)), SI",{}]],"9":[["ZE(FOOTER(NEXT(p))), ALLOC(FOOTER(NEXT(p))));                                   ",{}]],"10":[["}                                                                               ",{}]],"11":[["                                                                                ",{}]],"12":[["void",{"fg":2}],[" print_free (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"13":[["{                                                                               ",{}]],"14":[["   printf (",{}],["\"pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", p);                                                 ",{}]],"15":[["   printf (",{}],["\"next_pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", NEXT_FP(p));                                   ",{}]],"16":[["   printf (",{}],["\"prev_pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", PREV_FP(p));                                   ",{}]],"17":[["}                                                                               ",{}]],"18":[["                                                                                ",{}]],"19":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * coalesce (",{}],["char",{"fg":2}],[" * p)                                               ",{}]],"20":[["{                                                                               ",{}]],"21":[["   ",{}],["counter",{"fg":0,"bg":3}],[" ++;                                                                  ",{}]],"22":[["   ",{}],["if",{"fg":3}],[" (",{}],["counter",{"fg":0,"bg":3}],[" % ",{}],["30000",{"fg":1}],[" == ",{}],["0",{"fg":1}],[")                                                    ",{}]],"23":[["                                                              183,4         29% ",{}]]},"cursor":{"x":3,"y":21}}],[0.850121,{"lines":{"23":[["/counter                                                      184,8         29% ",{}]]},"cursor":{"x":7,"y":22}}],[0.497075,{"lines":{"0":[["   printf (",{}],["\"prev_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], prev_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"1":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                      ",{}]],"2":[["   HEAD(PREV(p)), SIZE(HEAD(PREV(p))), ALLOC(HEAD(PREV(p))), FOOTER(PREV(p)), SI",{}]],"3":[["ZE(FOOTER(PREV(p))), ALLOC(FOOTER(PREV(p))));                                   ",{}]],"4":[["   printf (",{}],["\"next_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], next_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"5":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n\\n\\n\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                ",{}]],"6":[["   HEAD(NEXT(p)), SIZE(HEAD(NEXT(p))), ALLOC(HEAD(NEXT(p))), FOOTER(NEXT(p)), SI",{}]],"7":[["ZE(FOOTER(NEXT(p))), ALLOC(FOOTER(NEXT(p))));                                   ",{}]],"8":[["}                                                                               ",{}]],"9":[["                                                                                ",{}]],"10":[["void",{"fg":2}],[" print_free (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"11":[["{                                                                               ",{}]],"12":[["   printf (",{}],["\"pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", p);                                                 ",{}]],"13":[["   printf (",{}],["\"next_pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", NEXT_FP(p));                                   ",{}]],"14":[["   printf (",{}],["\"prev_pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", PREV_FP(p));                                   ",{}]],"15":[["}                                                                               ",{}]],"16":[["                                                                                ",{}]],"17":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * coalesce (",{}],["char",{"fg":2}],[" * p)                                               ",{}]],"18":[["{                                                                               ",{}]],"19":[["   ",{}],["counter",{"fg":0,"bg":3}],[" ++;                                                                  ",{}]],"20":[["   ",{}],["if",{"fg":3}],[" (",{}],["counter",{"fg":0,"bg":3}],[" % ",{}],["30000",{"fg":1}],[" == ",{}],["0",{"fg":1}],[")                                                    ",{}]],"21":[["        printf (",{}],["\"",{"fg":1}],["counter",{"fg":0,"bg":3}],["=",{"fg":1}],["%d\\n",{"fg":5}],["\"",{"fg":1}],[", ",{}],["counter",{"fg":0,"bg":3}],[");                                       ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              185,18        30% ",{}]]},"cursor":{"x":17,"y":21}}],[0.865637,{"lines":{"23":[["                                                              185,17        30% ",{}]]},"cursor":{"x":16}}],[0.50488,{"lines":{"21":[["        printf ",{}],["(",{"bg":6}],["\"",{"fg":1}],["counter",{"fg":0,"bg":3}],["=",{"fg":1}],["%d\\n",{"fg":5}],["\"",{"fg":1}],[", ",{}],["counter",{"fg":0,"bg":3}],[")",{"bg":6}],[";                                       ",{}]],"23":[["                                                              185,16        30% ",{}]]},"cursor":{"x":15}}],[0.0284,{"lines":{"21":[["        printf (",{}],["\"",{"fg":1}],["counter",{"fg":0,"bg":3}],["=",{"fg":1}],["%d\\n",{"fg":5}],["\"",{"fg":1}],[", ",{}],["counter",{"fg":0,"bg":3}],[");                                       ",{}]],"23":[["                                                              185,15        30% ",{}]]},"cursor":{"x":14}}],[0.027833,{"lines":{"23":[["                                                              185,14        30% ",{}]]},"cursor":{"x":13}}],[0.029818,{"lines":{"23":[["                                                              185,13        30% ",{}]]},"cursor":{"x":12}}],[0.032297,{"lines":{"23":[["                                                              185,12        30% ",{}]]},"cursor":{"x":11}}],[0.031762,{"lines":{"23":[["                                                              185,11        30% ",{}]]},"cursor":{"x":10}}],[0.030705,{"lines":{"23":[["                                                              185,10        30% ",{}]]},"cursor":{"x":9}}],[0.032063,{"lines":{"23":[["                                                              185,9         30% ",{}]]},"cursor":{"x":8}}],[0.034253,{"lines":{"23":[["                                                              185,8         30% ",{}]]},"cursor":{"x":7}}],[0.028925,{"lines":{"23":[["                                                              185,7         30% ",{}]]},"cursor":{"x":6}}],[0.032744,{"lines":{"23":[["                                                              185,6         30% ",{}]]},"cursor":{"x":5}}],[0.040471,{"lines":{"23":[["                                                              185,5         30% ",{}]]},"cursor":{"x":4}}],[0.020202,{"lines":{"23":[["                                                              185,4         30% ",{}]]},"cursor":{"x":3}}],[0.016986,{"lines":{"23":[["                                                              186,0-1       30% ",{}]]},"cursor":{"x":0,"y":22}}],[0.154231,{"lines":{"0":[["   HEAD(PREV(p)), SIZE(HEAD(PREV(p))), ALLOC(HEAD(PREV(p))), FOOTER(PREV(p)), SI",{}]],"1":[["ZE(FOOTER(PREV(p))), ALLOC(FOOTER(PREV(p))));                                   ",{}]],"2":[["   printf (",{}],["\"next_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], next_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"3":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n\\n\\n\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                ",{}]],"4":[["   HEAD(NEXT(p)), SIZE(HEAD(NEXT(p))), ALLOC(HEAD(NEXT(p))), FOOTER(NEXT(p)), SI",{}]],"5":[["ZE(FOOTER(NEXT(p))), ALLOC(FOOTER(NEXT(p))));                                   ",{}]],"6":[["}                                                                               ",{}]],"7":[["                                                                                ",{}]],"8":[["void",{"fg":2}],[" print_free (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"9":[["{                                                                               ",{}]],"10":[["   printf (",{}],["\"pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", p);                                                 ",{}]],"11":[["   printf (",{}],["\"next_pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", NEXT_FP(p));                                   ",{}]],"12":[["   printf (",{}],["\"prev_pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", PREV_FP(p));                                   ",{}]],"13":[["}                                                                               ",{}]],"14":[["                                                                                ",{}]],"15":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * coalesce (",{}],["char",{"fg":2}],[" * p)                                               ",{}]],"16":[["{                                                                               ",{}]],"17":[["   ",{}],["counter",{"fg":0,"bg":3}],[" ++;                                                                  ",{}]],"18":[["   ",{}],["if",{"fg":3}],[" (",{}],["counter",{"fg":0,"bg":3}],[" % ",{}],["30000",{"fg":1}],[" == ",{}],["0",{"fg":1}],[")                                                    ",{}]],"19":[["        printf (",{}],["\"",{"fg":1}],["counter",{"fg":0,"bg":3}],["=",{"fg":1}],["%d\\n",{"fg":5}],["\"",{"fg":1}],[", ",{}],["counter",{"fg":0,"bg":3}],[");                                       ",{}]],"20":[["                                                                                ",{}]],"21":[["   ",{}],["size_t",{"fg":2}],[" p_alloc = ALLOC(FOOTER(PREV(p)));                                     ",{}]],"22":[["   ",{}],["size_t",{"fg":2}],[" n_alloc = ALLOC(HEAD(NEXT(p)));                                       ",{}]],"23":[["                                                              187,4         30% ",{}]]},"cursor":{"x":3,"y":21}}],[0.158941,{"lines":{"23":[["                                                              188,4         30% ",{}]]},"cursor":{"y":22}}],[0.14236,{"lines":{"0":[["   printf (",{}],["\"next_header(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), alloc(",{"fg":1}],["%d",{"fg":5}],[")], next_tail(",{"fg":1}],["%p",{"fg":5}],["):[size(",{"fg":1}],["%d",{"fg":5}],["), allo",{"fg":1}]],"1":[["c(",{"fg":1}],["%d",{"fg":5}],[")]",{"fg":1}],["\\n\\n\\n\\n",{"fg":5}],["\"",{"fg":1}],[",                                                                ",{}]],"2":[["   HEAD(NEXT(p)), SIZE(HEAD(NEXT(p))), ALLOC(HEAD(NEXT(p))), FOOTER(NEXT(p)), SI",{}]],"3":[["ZE(FOOTER(NEXT(p))), ALLOC(FOOTER(NEXT(p))));                                   ",{}]],"4":[["}                                                                               ",{}]],"5":[["                                                                                ",{}]],"6":[["void",{"fg":2}],[" print_free (",{}],["char",{"fg":2}],[" *p)                                                       ",{}]],"7":[["{                                                                               ",{}]],"8":[["   printf (",{}],["\"pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", p);                                                 ",{}]],"9":[["   printf (",{}],["\"next_pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", NEXT_FP(p));                                   ",{}]],"10":[["   printf (",{}],["\"prev_pointer(",{"fg":1}],["%p",{"fg":5}],[")",{"fg":1}],["\\n",{"fg":5}],["\"",{"fg":1}],[", PREV_FP(p));                                   ",{}]],"11":[["}                                                                               ",{}]],"12":[["                                                                                ",{}]],"13":[["static",{"fg":2}],[" ",{}],["void",{"fg":2}],[" * coalesce (",{}],["char",{"fg":2}],[" * p)                                               ",{}]],"14":[["{                                                                               ",{}]],"15":[["   ",{}],["counter",{"fg":0,"bg":3}],[" ++;                                                                  ",{}]],"16":[["   ",{}],["if",{"fg":3}],[" (",{}],["counter",{"fg":0,"bg":3}],[" % ",{}],["30000",{"fg":1}],[" == ",{}],["0",{"fg":1}],[")                                                    ",{}]],"17":[["        printf (",{}],["\"",{"fg":1}],["counter",{"fg":0,"bg":3}],["=",{"fg":1}],["%d\\n",{"fg":5}],["\"",{"fg":1}],[", ",{}],["counter",{"fg":0,"bg":3}],[");                                       ",{}]],"18":[["                                                                                ",{}]],"19":[["   ",{}],["size_t",{"fg":2}],[" p_alloc = ALLOC(FOOTER(PREV(p)));                                     ",{}]],"20":[["   ",{}],["size_t",{"fg":2}],[" n_alloc = ALLOC(HEAD(NEXT(p)));                                       ",{}]],"21":[["   ",{}],["size_t",{"fg":2}],[" size = SIZE(HEAD(p));                                                 ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                              189,4         30% ",{}]]},"cursor":{"y":21}}],[0.159019,{"lines":{"23":[["                                                              188,4         30% ",{}]]},"cursor":{"y":20}}],[0.151386,{"lines":{"23":[["                                                              187,4         30% ",{}]]},"cursor":{"y":19}}],[0.129931,{"lines":{"23":[["                                                              186,0-1       30% ",{}]]},"cursor":{"x":0,"y":18}}],[0.118021,{"lines":{"23":[["                                                              185,4         30% ",{}]]},"cursor":{"x":3,"y":17}}],[0.123688,{"lines":{"23":[["                                                              184,4         30% ",{}]]},"cursor":{"y":16}}],[0.118046,{"lines":{"23":[["                                                              183,4         30% ",{}]]},"cursor":{"y":15}}],[0.120571,{"lines":{"23":[["                                                              183,3         30% ",{}]]},"cursor":{"x":2}}],[0.175673,{"lines":{"23":[["                                                              183,2         30% ",{}]]},"cursor":{"x":1}}],[0.13629,{"lines":{"23":[["                                                              183,1         30% ",{}]]},"cursor":{"x":0}}],[0.56089,{"lines":{"23":[["-- INSERT --",{"bold":true}],["                                                  183,1         30% ",{}]]}}],[0.201495,{"lines":{"15":[["/   ",{}],["counter",{"fg":0,"bg":3}],[" ++;                                                                 ",{}]],"23":[["-- INSERT --",{"bold":true}],["                                                  183,2         30% ",{}]]},"cursor":{"x":1}}],[0.132167,{"lines":{"15":[["//   ",{"fg":4}],["counter",{"fg":0,"bg":3}],[" ++; ",{"fg":4}],["                                                               ",{}]],"23":[["-- INSERT --",{"bold":true}],["                                                  183,3         30% ",{}]]},"cursor":{"x":2}}],[0.347154,{"lines":{"23":[["-- INSERT --",{"bold":true}],["                                                  184,3         30% ",{}]]},"cursor":{"y":16}}],[0.065695,{"lines":{"23":[["-- INSERT --",{"bold":true}],["                                                  184,2         30% ",{}]]},"cursor":{"x":1}}],[0.166336,{"lines":{"23":[["-- INSERT --",{"bold":true}],["                                                  184,1         30% ",{}]]},"cursor":{"x":0}}],[0.258988,{"lines":{"16":[["/   ",{}],["if",{"fg":3}],[" (",{}],["counter",{"fg":0,"bg":3}],[" % ",{}],["30000",{"fg":1}],[" == ",{}],["0",{"fg":1}],[")                                                   ",{}]],"23":[["-- INSERT --",{"bold":true}],["                                                  184,2         30% ",{}]]},"cursor":{"x":1}}],[0.14296,{"lines":{"16":[["//   if (",{"fg":4}],["counter",{"fg":0,"bg":3}],[" % 30000 == 0) ",{"fg":4}],["                                                 ",{}]],"23":[["-- INSERT --",{"bold":true}],["                                                  184,3         30% ",{}]]},"cursor":{"x":2}}],[0.235507,{"lines":{"23":[["-- INSERT --",{"bold":true}],["                                                  185,3         30% ",{}]]},"cursor":{"y":17}}],[0.1438,{"lines":{"23":[["-- INSERT --",{"bold":true}],["                                                  185,2         30% ",{}]]},"cursor":{"x":1}}],[0.149486,{"lines":{"23":[["-- INSERT --",{"bold":true}],["                                                  185,1         30% ",{}]]},"cursor":{"x":0}}],[0.290964,{"lines":{"17":[["/        printf (",{}],["\"",{"fg":1}],["counter",{"fg":0,"bg":3}],["=",{"fg":1}],["%d\\n",{"fg":5}],["\"",{"fg":1}],[", ",{}],["counter",{"fg":0,"bg":3}],[");                                      ",{}]],"23":[["-- INSERT --",{"bold":true}],["                                                  185,2         30% ",{}]]},"cursor":{"x":1}}],[0.153644,{"lines":{"17":[["//        printf (\"",{"fg":4}],["counter",{"fg":0,"bg":3}],["=%d\\n\", ",{"fg":4}],["counter",{"fg":0,"bg":3}],["); ",{"fg":4}],["                                    ",{}]],"23":[["-- INSERT --",{"bold":true}],["                                                  185,3         30% ",{}]]},"cursor":{"x":2}}],[0.318119,{"lines":{"23":[["                                                                                ",{}]]},"cursor":{"x":1}}],[0.334233,{"lines":{"23":[[":                                                                               ",{}]]},"cursor":{"y":23}}],[0.07065299999999999,{"lines":{"23":[[":w                                                                              ",{}]]},"cursor":{"x":2}}],[0.084393,{"lines":{"23":[[":wq                                                                             ",{}]]},"cursor":{"x":3}}],[0.174866,{"lines":{"23":[[":wqa                                                                            ",{}]]},"cursor":{"x":4}}],[0.094656,{"lines":{"23":[[":wqal                                                                           ",{}]]},"cursor":{"x":5}}],[0.148649,{"lines":{"23":[[":wqall                                                                          ",{}]]},"cursor":{"x":6}}],[0.148616,{"lines":{"23":[["\"mm.c\"                                                                          ",{}]]},"cursor":{"visible":false}}],[0.005404,{"lines":{"23":[["\"mm.c\" 575L, 14621C written                                                     ",{}]]},"cursor":{"x":27}}],[0.015746,{"lines":{"0":[["                                                                                ",{}]],"1":[["angelshark       3:00 AM                                                        ",{}]],"2":[["bambooshark      3:30 AM                                                        ",{}]],"3":[["baskingshark     4:00 AM                                                        ",{}]],"4":[["blueshark        4:30 AM                                                        ",{}]],"5":[["carpetshark      5:00 AM                                                        ",{}]],"6":[["catshark         5:30 AM                                                        ",{}]],"7":[["hammerheadshark  6:00 AM                                                        ",{}]],"8":[["houndshark       6:30 AM                                                        ",{}]],"9":[["lemonshark       7:00 AM                                                        ",{}]],"10":[["makoshark        7:30 AM                                                        ",{}]],"11":[["                                                                                ",{}]],"12":[["-bash-4.1$ ls                                                                   ",{}]],"13":[["a",{"fg":2,"bold":true}],["                           ",{}],["Documents",{"fg":4,"bold":true}],["    ",{}],["Movies",{"fg":4,"bold":true}],["      ",{}],["Public",{"fg":4,"bold":true}],["                     ",{}]],"14":[["a.c0                        ",{}],["Downloads",{"fg":4,"bold":true}],["    ",{}],["Music",{"fg":4,"bg":2}],["       ",{}],["review",{"fg":4,"bold":true}],["                     ",{}]],"15":[["Applications",{"fg":4,"bold":true}],["                #.emacs#     ",{}],["OldFiles",{"fg":4,"bg":2}],["    ",{}],["Templates",{"fg":4,"bold":true}],["                  ",{}]],"16":[["bin",{"fg":4,"bold":true}],["                         ",{}],["hash",{"fg":4,"bold":true}],["         out.txt     test.c0                    ",{}]],"17":[["calculator",{"fg":4,"bold":true}],["                  ",{}],["intro_to_c",{"fg":4,"bold":true}],["   ",{}],["philosophy",{"fg":4,"bold":true}],["  ",{}],["Videos",{"fg":4,"bold":true}],["                     ",{}]],"18":[["ccm-project",{"fg":4,"bold":true}],["                 ",{}],["jihyel",{"fg":6,"bold":true}],["       ",{}],["Pictures",{"fg":4,"bold":true}],["    ",{}],["VirtualBox VMs",{"fg":1,"bg":0,"bold":true}],["             ",{}]],"19":[["C:\\nppdf32Log\\debuglog.txt  ",{}],["jijijar.jar",{"fg":1,"bold":true}],["  ",{}],["private",{"fg":4,"bold":true}],["                                ",{}]],"20":[["Desktop",{"fg":4,"bold":true}],["                     ",{}],["Library",{"fg":4,"bold":true}],["      ",{}],["public",{"fg":4,"bold":true}],["                                 ",{}]],"21":[["-bash-4.1$ cd private/                                                          ",{}]],"22":[["-bash-4.1$ ls                                                                   ",{}]],"23":[["15122",{"fg":4,"bold":true}],["  ",{}],["213",{"fg":4,"bold":true}],["                                                                      ",{}]],"24":[["-bash-4.1$ cd 213                                                               ",{}]],"25":[["-bash-4.1$ ls                                                                   ",{}]],"26":[["explicit2.c   explicit.c  ",{}],["malloclab-handout",{"fg":4,"bold":true}],["      mm_explicit.c   ",{}],["old",{"fg":4,"bold":true}],["            ",{}]],"27":[["explicit.3.c  list.c      ",{}],["malloclab-handout.tar",{"fg":1,"bold":true}],["  mm_reference.c                 ",{}]],"28":[["explicit.4.c  list.h      mm.c                   note                           ",{}]],"29":[["-bash-4.1$ cd malloclab-handout                                                 ",{}]],"30":[["-bash-4.1$ ls                                                                   ",{}]],"31":[["backup",{"fg":4,"bold":true}],["                    fcyc.c    ftimer.o   mm.c        ",{}],["reference",{"fg":4,"bold":true}],["            ",{}]],"32":[["backupmm.6.broken.list.c  fcyc.h    Makefile   mm.h        size2.txt            ",{}]],"33":[["clock.c                   fcyc.o    ",{}],["mdriver",{"fg":2,"bold":true}],["    mm.lc.c     size.txt             ",{}]],"34":[["clock.h                   fsecs.c   mdriver.c  mm.lc.me.c  task.note            ",{}]],"35":[["clock.o                   fsecs.h   mdriver.o  mm-naive.c  ",{}],["traces",{"fg":4,"bold":true}],["               ",{}]],"36":[["config.h                  fsecs.o   memlib.c   mm.o        ",{}],["tree",{"fg":4,"bold":true}],["                 ",{}]],"37":[["contracts.h               ftimer.c  memlib.h   ",{}],["randy",{"fg":4,"bold":true}],["                            ",{}]],"38":[["error.txt                 ftimer.h  memlib.o   README                           ",{}]],"39":[["-bash-4.1$ vim mm.c                                                             ",{}]],"40":[["-bash-4.1$                                                                      ",{}]]},"cursor":{"x":11,"y":40,"visible":true}}],[0.147281,{"lines":{"40":[["-bash-4.1$ m                                                                    ",{}]]},"cursor":{"x":12}}],[0.092099,{"lines":{"40":[["-bash-4.1$ ma                                                                   ",{}]]},"cursor":{"x":13}}],[0.112933,{"lines":{"40":[["-bash-4.1$ mak                                                                  ",{}]]},"cursor":{"x":14}}],[0.077144,{"lines":{"40":[["-bash-4.1$ make                                                                 ",{}]]},"cursor":{"x":15}}],[0.093401,{"lines":{"0":[["angelshark       3:00 AM                                                        ",{}]],"1":[["bambooshark      3:30 AM                                                        ",{}]],"2":[["baskingshark     4:00 AM                                                        ",{}]],"3":[["blueshark        4:30 AM                                                        ",{}]],"4":[["carpetshark      5:00 AM                                                        ",{}]],"5":[["catshark         5:30 AM                                                        ",{}]],"6":[["hammerheadshark  6:00 AM                                                        ",{}]],"7":[["houndshark       6:30 AM                                                        ",{}]],"8":[["lemonshark       7:00 AM                                                        ",{}]],"9":[["makoshark        7:30 AM                                                        ",{}]],"10":[["                                                                                ",{}]],"11":[["-bash-4.1$ ls                                                                   ",{}]],"12":[["a",{"fg":2,"bold":true}],["                           ",{}],["Documents",{"fg":4,"bold":true}],["    ",{}],["Movies",{"fg":4,"bold":true}],["      ",{}],["Public",{"fg":4,"bold":true}],["                     ",{}]],"13":[["a.c0                        ",{}],["Downloads",{"fg":4,"bold":true}],["    ",{}],["Music",{"fg":4,"bg":2}],["       ",{}],["review",{"fg":4,"bold":true}],["                     ",{}]],"14":[["Applications",{"fg":4,"bold":true}],["                #.emacs#     ",{}],["OldFiles",{"fg":4,"bg":2}],["    ",{}],["Templates",{"fg":4,"bold":true}],["                  ",{}]],"15":[["bin",{"fg":4,"bold":true}],["                         ",{}],["hash",{"fg":4,"bold":true}],["         out.txt     test.c0                    ",{}]],"16":[["calculator",{"fg":4,"bold":true}],["                  ",{}],["intro_to_c",{"fg":4,"bold":true}],["   ",{}],["philosophy",{"fg":4,"bold":true}],["  ",{}],["Videos",{"fg":4,"bold":true}],["                     ",{}]],"17":[["ccm-project",{"fg":4,"bold":true}],["                 ",{}],["jihyel",{"fg":6,"bold":true}],["       ",{}],["Pictures",{"fg":4,"bold":true}],["    ",{}],["VirtualBox VMs",{"fg":1,"bg":0,"bold":true}],["             ",{}]],"18":[["C:\\nppdf32Log\\debuglog.txt  ",{}],["jijijar.jar",{"fg":1,"bold":true}],["  ",{}],["private",{"fg":4,"bold":true}],["                                ",{}]],"19":[["Desktop",{"fg":4,"bold":true}],["                     ",{}],["Library",{"fg":4,"bold":true}],["      ",{}],["public",{"fg":4,"bold":true}],["                                 ",{}]],"20":[["-bash-4.1$ cd private/                                                          ",{}]],"21":[["-bash-4.1$ ls                                                                   ",{}]],"22":[["15122",{"fg":4,"bold":true}],["  ",{}],["213",{"fg":4,"bold":true}],["                                                                      ",{}]],"23":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.012538,{"lines":{"0":[["bambooshark      3:30 AM                                                        ",{}]],"1":[["baskingshark     4:00 AM                                                        ",{}]],"2":[["blueshark        4:30 AM                                                        ",{}]],"3":[["carpetshark      5:00 AM                                                        ",{}]],"4":[["catshark         5:30 AM                                                        ",{}]],"5":[["hammerheadshark  6:00 AM                                                        ",{}]],"6":[["houndshark       6:30 AM                                                        ",{}]],"7":[["lemonshark       7:00 AM                                                        ",{}]],"8":[["makoshark        7:30 AM                                                        ",{}]],"9":[["                                                                                ",{}]],"10":[["-bash-4.1$ ls                                                                   ",{}]],"11":[["a",{"fg":2,"bold":true}],["                           ",{}],["Documents",{"fg":4,"bold":true}],["    ",{}],["Movies",{"fg":4,"bold":true}],["      ",{}],["Public",{"fg":4,"bold":true}],["                     ",{}]],"12":[["a.c0                        ",{}],["Downloads",{"fg":4,"bold":true}],["    ",{}],["Music",{"fg":4,"bg":2}],["       ",{}],["review",{"fg":4,"bold":true}],["                     ",{}]],"13":[["Applications",{"fg":4,"bold":true}],["                #.emacs#     ",{}],["OldFiles",{"fg":4,"bg":2}],["    ",{}],["Templates",{"fg":4,"bold":true}],["                  ",{}]],"14":[["bin",{"fg":4,"bold":true}],["                         ",{}],["hash",{"fg":4,"bold":true}],["         out.txt     test.c0                    ",{}]],"15":[["calculator",{"fg":4,"bold":true}],["                  ",{}],["intro_to_c",{"fg":4,"bold":true}],["   ",{}],["philosophy",{"fg":4,"bold":true}],["  ",{}],["Videos",{"fg":4,"bold":true}],["                     ",{}]],"16":[["ccm-project",{"fg":4,"bold":true}],["                 ",{}],["jihyel",{"fg":6,"bold":true}],["       ",{}],["Pictures",{"fg":4,"bold":true}],["    ",{}],["VirtualBox VMs",{"fg":1,"bg":0,"bold":true}],["             ",{}]],"17":[["C:\\nppdf32Log\\debuglog.txt  ",{}],["jijijar.jar",{"fg":1,"bold":true}],["  ",{}],["private",{"fg":4,"bold":true}],["                                ",{}]],"18":[["Desktop",{"fg":4,"bold":true}],["                     ",{}],["Library",{"fg":4,"bold":true}],["      ",{}],["public",{"fg":4,"bold":true}],["                                 ",{}]],"19":[["-bash-4.1$ cd private/                                                          ",{}]],"20":[["-bash-4.1$ ls                                                                   ",{}]],"21":[["15122",{"fg":4,"bold":true}],["  ",{}],["213",{"fg":4,"bold":true}],["                                                                      ",{}]],"22":[["                                                                                ",{}]],"40":[["gcc -Wall -Wextra -Werror -O2 -g -DDRIVER -std=gnu99   -c -o mm.o mm.c          ",{}]]}}],[0.296016,{"lines":{"0":[["blueshark        4:30 AM                                                        ",{}]],"1":[["carpetshark      5:00 AM                                                        ",{}]],"2":[["catshark         5:30 AM                                                        ",{}]],"3":[["hammerheadshark  6:00 AM                                                        ",{}]],"4":[["houndshark       6:30 AM                                                        ",{}]],"5":[["lemonshark       7:00 AM                                                        ",{}]],"6":[["makoshark        7:30 AM                                                        ",{}]],"7":[["                                                                                ",{}]],"8":[["-bash-4.1$ ls                                                                   ",{}]],"9":[["a",{"fg":2,"bold":true}],["                           ",{}],["Documents",{"fg":4,"bold":true}],["    ",{}],["Movies",{"fg":4,"bold":true}],["      ",{}],["Public",{"fg":4,"bold":true}],["                     ",{}]],"10":[["a.c0                        ",{}],["Downloads",{"fg":4,"bold":true}],["    ",{}],["Music",{"fg":4,"bg":2}],["       ",{}],["review",{"fg":4,"bold":true}],["                     ",{}]],"11":[["Applications",{"fg":4,"bold":true}],["                #.emacs#     ",{}],["OldFiles",{"fg":4,"bg":2}],["    ",{}],["Templates",{"fg":4,"bold":true}],["                  ",{}]],"12":[["bin",{"fg":4,"bold":true}],["                         ",{}],["hash",{"fg":4,"bold":true}],["         out.txt     test.c0                    ",{}]],"13":[["calculator",{"fg":4,"bold":true}],["                  ",{}],["intro_to_c",{"fg":4,"bold":true}],["   ",{}],["philosophy",{"fg":4,"bold":true}],["  ",{}],["Videos",{"fg":4,"bold":true}],["                     ",{}]],"14":[["ccm-project",{"fg":4,"bold":true}],["                 ",{}],["jihyel",{"fg":6,"bold":true}],["       ",{}],["Pictures",{"fg":4,"bold":true}],["    ",{}],["VirtualBox VMs",{"fg":1,"bg":0,"bold":true}],["             ",{}]],"15":[["C:\\nppdf32Log\\debuglog.txt  ",{}],["jijijar.jar",{"fg":1,"bold":true}],["  ",{}],["private",{"fg":4,"bold":true}],["                                ",{}]],"16":[["Desktop",{"fg":4,"bold":true}],["                     ",{}],["Library",{"fg":4,"bold":true}],["      ",{}],["public",{"fg":4,"bold":true}],["                                 ",{}]],"17":[["-bash-4.1$ cd private/                                                          ",{}]],"18":[["-bash-4.1$ ls                                                                   ",{}]],"19":[["15122",{"fg":4,"bold":true}],["  ",{}],["213",{"fg":4,"bold":true}],["                                                                      ",{}]],"20":[["                                                                                ",{}]],"21":[["                                                                                ",{}]],"40":[["emlib.o fsecs.o fcyc.o clock.o ftimer.o R -std=gnu99 -o mdriver mdriver.o mm.o m",{}]]}}],[0.073422,{"lines":{"40":[["-bash-4.1$ cs.o fcyc.o clock.o ftimer.o R -std=gnu99 -o mdriver mdriver.o mm.o m",{}]]},"cursor":{"x":11}}],[0.428099,{"lines":{"40":[["-bash-4.1$ make fcyc.o clock.o ftimer.o R -std=gnu99 -o mdriver mdriver.o mm.o m",{}]]},"cursor":{"x":15}}],[0.158198,{"lines":{"40":[["-bash-4.1$ vim mm.cc.o clock.o ftimer.o R -std=gnu99 -o mdriver mdriver.o mm.o m",{}]]},"cursor":{"x":19}}],[0.157143,{"lines":{"40":[["-bash-4.1$ ls                                                                   ",{}]]},"cursor":{"x":13}}],[0.393731,{"lines":{"40":[["-bash-4.1$ vim mm.c                                                             ",{}]]},"cursor":{"x":19}}],[0.151138,{"lines":{"40":[["-bash-4.1$ make                                                                 ",{}]]},"cursor":{"x":15}}],[0.132643,{"lines":{"40":[["-bash-4.1$                                                                      ",{}]]},"cursor":{"x":11}}],[0.531971,{"lines":{"40":[["-bash-4.1$ g                                                                    ",{}]]},"cursor":{"x":12}}],[0.132975,{"lines":{"40":[["-bash-4.1$ gd                                                                   ",{}]]},"cursor":{"x":13}}],[0.104486,{"lines":{"40":[["-bash-4.1$ gdb                                                                  ",{}]]},"cursor":{"x":14}}],[0.0954,{"cursor":{"x":15}}],[0.147227,{"lines":{"40":[["-bash-4.1$ gdb .                                                                ",{}]]},"cursor":{"x":16}}],[0.173984,{"lines":{"40":[["-bash-4.1$ gdb ./                                                               ",{}]]},"cursor":{"x":17}}],[0.152489,{"lines":{"40":[["-bash-4.1$ gdb ./m                                                              ",{}]]},"cursor":{"x":18}}],[0.103963,{"lines":{"40":[["-bash-4.1$ gdb ./md                                                             ",{}]]},"cursor":{"x":19}}],[0.124134,{"lines":{"40":[["-bash-4.1$ gdb ./mdr                                                            ",{}]]},"cursor":{"x":20}}],[0.124025,{"lines":{"40":[["-bash-4.1$ gdb ./mdri                                                           ",{}]]},"cursor":{"x":21}}],[0.110693,{"lines":{"40":[["-bash-4.1$ gdb ./mdriv                                                          ",{}]]},"cursor":{"x":22}}],[0.155454,{"lines":{"40":[["-bash-4.1$ gdb ./mdrive                                                         ",{}]]},"cursor":{"x":23}}],[0.109961,{"lines":{"40":[["-bash-4.1$ gdb ./mdriver                                                        ",{}]]},"cursor":{"x":24}}],[0.370823,{"lines":{"0":[["carpetshark      5:00 AM                                                        ",{}]],"1":[["catshark         5:30 AM                                                        ",{}]],"2":[["hammerheadshark  6:00 AM                                                        ",{}]],"3":[["houndshark       6:30 AM                                                        ",{}]],"4":[["lemonshark       7:00 AM                                                        ",{}]],"5":[["makoshark        7:30 AM                                                        ",{}]],"6":[["                                                                                ",{}]],"7":[["-bash-4.1$ ls                                                                   ",{}]],"8":[["a",{"fg":2,"bold":true}],["                           ",{}],["Documents",{"fg":4,"bold":true}],["    ",{}],["Movies",{"fg":4,"bold":true}],["      ",{}],["Public",{"fg":4,"bold":true}],["                     ",{}]],"9":[["a.c0                        ",{}],["Downloads",{"fg":4,"bold":true}],["    ",{}],["Music",{"fg":4,"bg":2}],["       ",{}],["review",{"fg":4,"bold":true}],["                     ",{}]],"10":[["Applications",{"fg":4,"bold":true}],["                #.emacs#     ",{}],["OldFiles",{"fg":4,"bg":2}],["    ",{}],["Templates",{"fg":4,"bold":true}],["                  ",{}]],"11":[["bin",{"fg":4,"bold":true}],["                         ",{}],["hash",{"fg":4,"bold":true}],["         out.txt     test.c0                    ",{}]],"12":[["calculator",{"fg":4,"bold":true}],["                  ",{}],["intro_to_c",{"fg":4,"bold":true}],["   ",{}],["philosophy",{"fg":4,"bold":true}],["  ",{}],["Videos",{"fg":4,"bold":true}],["                     ",{}]],"13":[["ccm-project",{"fg":4,"bold":true}],["                 ",{}],["jihyel",{"fg":6,"bold":true}],["       ",{}],["Pictures",{"fg":4,"bold":true}],["    ",{}],["VirtualBox VMs",{"fg":1,"bg":0,"bold":true}],["             ",{}]],"14":[["C:\\nppdf32Log\\debuglog.txt  ",{}],["jijijar.jar",{"fg":1,"bold":true}],["  ",{}],["private",{"fg":4,"bold":true}],["                                ",{}]],"15":[["Desktop",{"fg":4,"bold":true}],["                     ",{}],["Library",{"fg":4,"bold":true}],["      ",{}],["public",{"fg":4,"bold":true}],["                                 ",{}]],"16":[["-bash-4.1$ cd private/                                                          ",{}]],"17":[["-bash-4.1$ ls                                                                   ",{}]],"18":[["15122",{"fg":4,"bold":true}],["  ",{}],["213",{"fg":4,"bold":true}],["                                                                      ",{}]],"19":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.036002,{"lines":{"0":[["a.c0                        ",{}],["Downloads",{"fg":4,"bold":true}],["    ",{}],["Music",{"fg":4,"bg":2}],["       ",{}],["review",{"fg":4,"bold":true}],["                     ",{}]],"1":[["Applications",{"fg":4,"bold":true}],["                #.emacs#     ",{}],["OldFiles",{"fg":4,"bg":2}],["    ",{}],["Templates",{"fg":4,"bold":true}],["                  ",{}]],"2":[["bin",{"fg":4,"bold":true}],["                         ",{}],["hash",{"fg":4,"bold":true}],["         out.txt     test.c0                    ",{}]],"3":[["calculator",{"fg":4,"bold":true}],["                  ",{}],["intro_to_c",{"fg":4,"bold":true}],["   ",{}],["philosophy",{"fg":4,"bold":true}],["  ",{}],["Videos",{"fg":4,"bold":true}],["                     ",{}]],"4":[["ccm-project",{"fg":4,"bold":true}],["                 ",{}],["jihyel",{"fg":6,"bold":true}],["       ",{}],["Pictures",{"fg":4,"bold":true}],["    ",{}],["VirtualBox VMs",{"fg":1,"bg":0,"bold":true}],["             ",{}]],"5":[["C:\\nppdf32Log\\debuglog.txt  ",{}],["jijijar.jar",{"fg":1,"bold":true}],["  ",{}],["private",{"fg":4,"bold":true}],["                                ",{}]],"6":[["Desktop",{"fg":4,"bold":true}],["                     ",{}],["Library",{"fg":4,"bold":true}],["      ",{}],["public",{"fg":4,"bold":true}],["                                 ",{}]],"7":[["-bash-4.1$ cd private/                                                          ",{}]],"8":[["-bash-4.1$ ls                                                                   ",{}]],"9":[["15122",{"fg":4,"bold":true}],["  ",{}],["213",{"fg":4,"bold":true}],["                                                                      ",{}]],"10":[["                                                                                ",{}]],"11":[["                                                                                ",{}]],"12":[["                                                                                ",{}]],"13":[["                                                                                ",{}]],"14":[["                                                                                ",{}]],"15":[["                                                                                ",{}]],"16":[["                                                                                ",{}]],"17":[["                                                                                ",{}]],"18":[["                                                                                ",{}]],"40":[["<http://www.gnu.org/software/gdb/bugs/>...:inux-gnu\".  Type \"show copying\"ml>   ",{}]]}}],[0.00207,{"lines":{"0":[["bin",{"fg":4,"bold":true}],["                         ",{}],["hash",{"fg":4,"bold":true}],["         out.txt     test.c0                    ",{}]],"1":[["calculator",{"fg":4,"bold":true}],["                  ",{}],["intro_to_c",{"fg":4,"bold":true}],["   ",{}],["philosophy",{"fg":4,"bold":true}],["  ",{}],["Videos",{"fg":4,"bold":true}],["                     ",{}]],"2":[["ccm-project",{"fg":4,"bold":true}],["                 ",{}],["jihyel",{"fg":6,"bold":true}],["       ",{}],["Pictures",{"fg":4,"bold":true}],["    ",{}],["VirtualBox VMs",{"fg":1,"bg":0,"bold":true}],["             ",{}]],"3":[["C:\\nppdf32Log\\debuglog.txt  ",{}],["jijijar.jar",{"fg":1,"bold":true}],["  ",{}],["private",{"fg":4,"bold":true}],["                                ",{}]],"4":[["Desktop",{"fg":4,"bold":true}],["                     ",{}],["Library",{"fg":4,"bold":true}],["      ",{}],["public",{"fg":4,"bold":true}],["                                 ",{}]],"5":[["-bash-4.1$ cd private/                                                          ",{}]],"6":[["-bash-4.1$ ls                                                                   ",{}]],"7":[["15122",{"fg":4,"bold":true}],["  ",{}],["213",{"fg":4,"bold":true}],["                                                                      ",{}]],"8":[["                                                                                ",{}]],"9":[["                                                                                ",{}]],"40":[["(gdb) river...done.m /afs/andrew.cmu.edu/usr18/jihyel/private/213/malloclab-hand",{}]]},"cursor":{"x":6}}],[0.721952,{"cursor":{"x":7}}],[0.123781,{"lines":{"40":[["(gdb) ruver...done.m /afs/andrew.cmu.edu/usr18/jihyel/private/213/malloclab-hand",{}]]},"cursor":{"x":8}}],[0.186207,{"lines":{"40":[["(gdb) runer...done.m /afs/andrew.cmu.edu/usr18/jihyel/private/213/malloclab-hand",{}]]},"cursor":{"x":9}}],[0.189448,{"lines":{"0":[["C:\\nppdf32Log\\debuglog.txt  ",{}],["jijijar.jar",{"fg":1,"bold":true}],["  ",{}],["private",{"fg":4,"bold":true}],["                                ",{}]],"1":[["Desktop",{"fg":4,"bold":true}],["                     ",{}],["Library",{"fg":4,"bold":true}],["      ",{}],["public",{"fg":4,"bold":true}],["                                 ",{}]],"2":[["-bash-4.1$ cd private/                                                          ",{}]],"3":[["-bash-4.1$ ls                                                                   ",{}]],"4":[["15122",{"fg":4,"bold":true}],["  ",{}],["213",{"fg":4,"bold":true}],["                                                                      ",{}]],"5":[["                                                                                ",{}]],"6":[["                                                                                ",{}]],"7":[["                                                                                ",{}]],"40":[["/mdriver program: /afs/andrew.cmu.edu/usr18/jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":0}}],[0.060179,{"lines":{"0":[["-bash-4.1$ ls                                                                   ",{}]],"1":[["15122",{"fg":4,"bold":true}],["  ",{}],["213",{"fg":4,"bold":true}],["                                                                      ",{}]],"2":[["                                                                                ",{}]],"3":[["                                                                                ",{}]],"4":[["                                                                                ",{}]],"40":[["Processor clock rate ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]}}],[0.220752,{"lines":{"40":[[".rocessor clock rate ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":1}}],[1.938702,{"lines":{"40":[["..ocessor clock rate ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":2}}],[0.027341,{"lines":{"40":[["...cessor clock rate ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":3}}],[4.75049,{"lines":{"40":[["....essor clock rate ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":4}}],[0.067352,{"lines":{"40":[[".....ssor clock rate ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":5}}],[0.018323,{"lines":{"40":[["......sor clock rate ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":6}}],[0.058678,{"lines":{"40":[[".......or clock rate ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":7}}],[0.156611,{"lines":{"40":[["........r clock rate ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":8}}],[0.123573,{"lines":{"40":[["......... clock rate ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":9}}],[0.041987,{"lines":{"40":[["..........clock rate ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":10}}],[0.7000189999999999,{"lines":{"40":[["...........lock rate ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":11}}],[0.121226,{"lines":{"40":[["............ock rate ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":12}}],[0.076935,{"lines":{"40":[[".............ck rate ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":13}}],[0.044323,{"lines":{"40":[["..............k rate ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":14}}],[0.338385,{"lines":{"40":[["............... rate ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":15}}],[0.013956,{"lines":{"40":[["..................te ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":18}}],[0.004294,{"lines":{"40":[["...................e ~= 2261.0 MHz counter./jihyel/private/213/malloclab-handout",{}]]},"cursor":{"x":19}}],[0.376584,{"lines":{"0":[["                                                                                ",{}]],"1":[["                                                                                ",{}]],"40":[["ERROR [trace ./traces/needle.rep, line 94868]: mm_malloc failed.alloclab-handout",{}]]},"cursor":{"x":0}}],[0.012438,{"lines":{"40":[["..ROR [trace ./traces/needle.rep, line 94868]: mm_malloc failed.alloclab-handout",{}]]},"cursor":{"x":2}}],[0.005457,{"lines":{"40":[["...OR [trace ./traces/needle.rep, line 94868]: mm_malloc failed.alloclab-handout",{}]]},"cursor":{"x":3}}],[0.142501,{"lines":{"40":[["....R [trace ./traces/needle.rep, line 94868]: mm_malloc failed.alloclab-handout",{}]]},"cursor":{"x":4}}],[0.154673,{"lines":{"40":[["..... [trace ./traces/needle.rep, line 94868]: mm_malloc failed.alloclab-handout",{}]]},"cursor":{"x":5}}],[0.008661,{"lines":{"40":[[".......trace ./traces/needle.rep, line 94868]: mm_malloc failed.alloclab-handout",{}]]},"cursor":{"x":7}}],[0.010451,{"lines":{"40":[["........race ./traces/needle.rep, line 94868]: mm_malloc failed.alloclab-handout",{}]]},"cursor":{"x":8}}],[0.0092,{"lines":{"40":[["(gdb) g separate debuginfos, use: debuginfo-install glibc-2.12-1.107.el6_4.5.x86",{}]]},"cursor":{"x":6}}],[3.813822,{"lines":{"40":[["(gdb) w separate debuginfos, use: debuginfo-install glibc-2.12-1.107.el6_4.5.x86",{}]]},"cursor":{"x":7}}],[0.164602,{"lines":{"40":[["(gdb) whseparate debuginfos, use: debuginfo-install glibc-2.12-1.107.el6_4.5.x86",{}]]},"cursor":{"x":8}}],[0.172992,{"lines":{"40":[["(gdb) whueparate debuginfos, use: debuginfo-install glibc-2.12-1.107.el6_4.5.x86",{}]]},"cursor":{"x":9}}],[0.126984,{"lines":{"40":[["(gdb) whutparate debuginfos, use: debuginfo-install glibc-2.12-1.107.el6_4.5.x86",{}]]},"cursor":{"x":10}}],[0.253958,{"lines":{"40":[["(gdb) whu                                                                       ",{}]]},"cursor":{"x":9}}],[0.135894,{"lines":{"40":[["(gdb) wh                                                                        ",{}]]},"cursor":{"x":8}}],[0.117789,{"lines":{"40":[["(gdb) w                                                                         ",{}]]},"cursor":{"x":7}}],[0.148368,{"lines":{"40":[["(gdb) wu                                                                        ",{}]]},"cursor":{"x":8}}],[0.127182,{"lines":{"40":[["(gdb) wut                                                                       ",{}]]},"cursor":{"x":9}}],[0.331545,{"lines":{"40":[["(gdb) wut!                                                                      ",{}]]},"cursor":{"x":10}}],[0.16603,{"lines":{"40":[["(gdb) wut!!                                                                     ",{}]]},"cursor":{"x":11}}],[0.192739,{"lines":{"40":[["(gdb) wut!!!                                                                    ",{}]]},"cursor":{"x":12}}],[0.318567,{"lines":{"40":[["(gdb) wut!!!!                                                                   ",{}]]},"cursor":{"x":13}}],[0.188398,{"lines":{"40":[["(gdb) wut!!!!!                                                                  ",{}]]},"cursor":{"x":14}}],[0.618222,{"lines":{"40":[["(gdb) ned command: \"wut\".  Try \"help\".                                          ",{}]]},"cursor":{"x":6}}],[0.334555,{"lines":{"40":[["(gdb) eed command: \"wut\".  Try \"help\".                                          ",{}]]},"cursor":{"x":7}}],[0.202972,{"lines":{"40":[["(gdb) exd command: \"wut\".  Try \"help\".                                          ",{}]]},"cursor":{"x":8}}],[0.12938,{"lines":{"40":[["(gdb) exi command: \"wut\".  Try \"help\".                                          ",{}]]},"cursor":{"x":9}}],[0.133309,{"lines":{"40":[["(gdb) exitcommand: \"wut\".  Try \"help\".                                          ",{}]]},"cursor":{"x":10}}],[0.247425,{"lines":{"40":[["(gdb) ned command: \"exit\".  Try \"help\".                                         ",{}]]},"cursor":{"x":6}}],[0.56358,{"lines":{"40":[["(gdb) qed command: \"exit\".  Try \"help\".                                         ",{}]]},"cursor":{"x":7}}],[0.16601,{"cursor":{"x":0}}],[0.000953,{"lines":{"40":[["-bash-4.1$ ommand: \"exit\".  Try \"help\".                                         ",{}]]},"cursor":{"x":11}}],[0.660801,{"lines":{"40":[["-bash-4.1$ dmmand: \"exit\".  Try \"help\".                                         ",{}]]},"cursor":{"x":12}}],[0.09699099999999999,{"lines":{"40":[["-bash-4.1$ dfmand: \"exit\".  Try \"help\".                                         ",{}]]},"cursor":{"x":13}}],[0.113174,{"lines":{"40":[["-bash-4.1$ d                                                                    ",{}]]},"cursor":{"x":12}}],[0.140554,{"lines":{"40":[["-bash-4.1$                                                                      ",{}]]},"cursor":{"x":11}}],[0.133477,{}],[0.059678,{"lines":{"40":[["-bash-4.1$ e                                                                    ",{}]]},"cursor":{"x":12}}],[0.178425,{"lines":{"40":[["-bash-4.1$ ex                                                                   ",{}]]},"cursor":{"x":13}}],[0.104572,{"lines":{"40":[["-bash-4.1$ exi                                                                  ",{}]]},"cursor":{"x":14}}],[0.116802,{"lines":{"40":[["-bash-4.1$ exit                                                                 ",{}]]},"cursor":{"x":15}}],[0.145774,{"lines":{"40":[["logout4.1$ exit                                                                 ",{}]]},"cursor":{"x":0}}],[0.00421,{"lines":{"40":[["jihyel@jihyel:~$ rk.ics.cs.cmu.edu closed.                                      ",{}]]},"cursor":{"x":17}}],[0.838923,{"lines":{"40":[["jihyel@jihyel:~$ lk.ics.cs.cmu.edu closed.                                      ",{}]]},"cursor":{"x":18}}],[0.146424,{"lines":{"40":[["jihyel@jihyel:~$ ls.ics.cs.cmu.edu closed.                                      ",{}]]},"cursor":{"x":19}}],[0.106113,{"cursor":{"x":0}}],[0.003789,{"lines":{"40":[["jihyel@jihyel:~$            ",{}],["Videostes",{"fg":4,"bold":true}],["3.2.tar.bz2-linux.zip",{"fg":1,"bold":true}],["                      ",{}]]},"cursor":{"x":17}}],[0.917119,{"lines":{"40":[["jihyel@jihyel:~$ exit       ",{}],["Videostes",{"fg":4,"bold":true}],["3.2.tar.bz2-linux.zip",{"fg":1,"bold":true}],["                      ",{}]]},"cursor":{"x":0}}]]