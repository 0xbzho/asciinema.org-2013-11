[[0.01333,{"lines":{"0":[["bash-3.2$                                                                                 ",{}]],"1":[["                                                                                          ",{}]],"2":[["                                                                                          ",{}]],"3":[["                                                                                          ",{}]],"4":[["                                                                                          ",{}]],"5":[["                                                                                          ",{}]],"6":[["                                                                                          ",{}]],"7":[["                                                                                          ",{}]],"8":[["                                                                                          ",{}]],"9":[["                                                                                          ",{}]],"10":[["                                                                                          ",{}]],"11":[["                                                                                          ",{}]],"12":[["                                                                                          ",{}]],"13":[["                                                                                          ",{}]],"14":[["                                                                                          ",{}]],"15":[["                                                                                          ",{}]],"16":[["                                                                                          ",{}]],"17":[["                                                                                          ",{}]],"18":[["                                                                                          ",{}]],"19":[["                                                                                          ",{}]],"20":[["                                                                                          ",{}]],"21":[["                                                                                          ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":10,"y":0,"visible":true}}],[1.233085,{"lines":{"0":[["bash-3.2$ c                                                                               ",{}]]},"cursor":{"x":11}}],[0.055937,{"lines":{"0":[["bash-3.2$ cd                                                                              ",{}]]},"cursor":{"x":12}}],[0.015713,{"cursor":{"x":13}}],[0.328559,{"lines":{"0":[["bash-3.2$ cd ~                                                                            ",{}]]},"cursor":{"x":14}}],[0.310795,{"lines":{"0":[["bash-3.2$ cd ~/                                                                           ",{}]]},"cursor":{"x":15}}],[0.704253,{"lines":{"0":[["bash-3.2$ cd ~/s                                                                          ",{}]]},"cursor":{"x":16}}],[0.057069,{"lines":{"0":[["bash-3.2$ cd ~/sc                                                                         ",{}]]},"cursor":{"x":17}}],[0.09557499999999999,{"lines":{"0":[["bash-3.2$ cd ~/sca                                                                        ",{}]]},"cursor":{"x":18}}],[0.111911,{"lines":{"0":[["bash-3.2$ cd ~/scal                                                                       ",{}]]},"cursor":{"x":19}}],[0.08821,{"lines":{"0":[["bash-3.2$ cd ~/scala                                                                      ",{}]]},"cursor":{"x":20}}],[0.215891,{"lines":{"0":[["bash-3.2$ cd ~/scalat                                                                     ",{}]]},"cursor":{"x":21}}],[0.06407,{"lines":{"0":[["bash-3.2$ cd ~/scalate                                                                    ",{}]]},"cursor":{"x":22}}],[0.071321,{"lines":{"0":[["bash-3.2$ cd ~/scalates                                                                   ",{}]]},"cursor":{"x":23}}],[0.088408,{"lines":{"0":[["bash-3.2$ cd ~/scalatest                                                                  ",{}]]},"cursor":{"x":24}}],[0.224599,{"cursor":{"x":0,"y":1}}],[0.00058,{"lines":{"1":[["bash-3.2$                                                                                 ",{}]]},"cursor":{"x":10}}],[0.631328,{"lines":{"1":[["bash-3.2$ s                                                                               ",{}]]},"cursor":{"x":11}}],[0.17555,{"lines":{"1":[["bash-3.2$ sb                                                                              ",{}]]},"cursor":{"x":12}}],[0.175678,{"lines":{"1":[["bash-3.2$ sbt                                                                             ",{}]]},"cursor":{"x":13}}],[0.064305,{"cursor":{"x":14}}],[0.14435,{"lines":{"1":[["bash-3.2$ sbt c                                                                           ",{}]]},"cursor":{"x":15}}],[0.063099,{"lines":{"1":[["bash-3.2$ sbt co                                                                          ",{}]]},"cursor":{"x":16}}],[0.024683,{"lines":{"1":[["bash-3.2$ sbt con                                                                         ",{}]]},"cursor":{"x":17}}],[0.27923,{"lines":{"1":[["bash-3.2$ sbt cons                                                                        ",{}]]},"cursor":{"x":18}}],[0.09639300000000001,{"lines":{"1":[["bash-3.2$ sbt conso                                                                       ",{}]]},"cursor":{"x":19}}],[0.160123,{"lines":{"1":[["bash-3.2$ sbt consol                                                                      ",{}]]},"cursor":{"x":20}}],[0.07166699999999999,{"lines":{"1":[["bash-3.2$ sbt console                                                                     ",{}]]},"cursor":{"x":21}}],[0.104217,{"cursor":{"x":0,"y":2}}],[3.09999,{"lines":{"2":[["[info] Loading global plugins from /Users/wfreeman/.sbt/plugins                           ",{}]]},"cursor":{"y":3}}],[1.117313,{"lines":{"3":[["[info] Set current project to sbtneo (in build file:/Users/wfreeman/scalatest/)           ",{}]]},"cursor":{"y":4}}],[0.856903,{"lines":{"4":[["[info] Starting scala interpreter...                                                      ",{}]]},"cursor":{"y":5}}],[0.002715,{"lines":{"5":[["[info]                                                                                    ",{}]]},"cursor":{"y":6}}],[5.077523,{"lines":{"6":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"7":[["Type in expressions to have them evaluated.                                               ",{}]],"8":[["Type :help for more information.                                                          ",{}]]},"cursor":{"y":9}}],[0.000402,{"lines":{"10":[["scala>                                                                                    ",{}]]},"cursor":{"x":7,"y":10}}],[1.235949,{"lines":{"10":[["scala> i                                                                                  ",{}]]},"cursor":{"x":8}}],[0.040825,{"lines":{"10":[["scala> im                                                                                 ",{}]]},"cursor":{"x":9}}],[0.11194,{"lines":{"10":[["scala> imp                                                                                ",{}]]},"cursor":{"x":10}}],[0.031964,{"lines":{"10":[["scala> impo                                                                               ",{}]]},"cursor":{"x":11}}],[0.096211,{"lines":{"10":[["scala> impor                                                                              ",{}]]},"cursor":{"x":12}}],[0.167764,{"lines":{"10":[["scala> import                                                                             ",{}]]},"cursor":{"x":13}}],[0.08812,{"cursor":{"x":14}}],[0.280626,{"lines":{"10":[["scala> import o                                                                           ",{}]]},"cursor":{"x":15}}],[0.056669,{"lines":{"10":[["scala> import or                                                                          ",{}]]},"cursor":{"x":16}}],[0.164437,{"lines":{"10":[["scala> import org                                                                         ",{}]]},"cursor":{"x":17}}],[0.09191000000000001,{"lines":{"10":[["scala> import org.                                                                        ",{}]]},"cursor":{"x":18}}],[0.232012,{"lines":{"10":[["scala> import org.n                                                                       ",{}]]},"cursor":{"x":19}}],[0.128319,{"lines":{"10":[["scala> import org.ne                                                                      ",{}]]},"cursor":{"x":20}}],[0.086634,{"lines":{"10":[["scala> import org.neo                                                                     ",{}]]},"cursor":{"x":21}}],[0.184489,{"lines":{"10":[["scala> import org.neo4                                                                    ",{}]]},"cursor":{"x":22}}],[0.08854099999999999,{"lines":{"10":[["scala> import org.neo4j                                                                   ",{}]]},"cursor":{"x":23}}],[0.227979,{"lines":{"10":[["scala> import org.neo4j.                                                                  ",{}]]},"cursor":{"x":24}}],[0.97992,{"lines":{"10":[["scala> import org.neo4j.g                                                                 ",{}]]},"cursor":{"x":25}}],[0.255726,{"lines":{"10":[["scala> import org.neo4j.gr                                                                ",{}]]},"cursor":{"x":26}}],[0.088059,{"lines":{"10":[["scala> import org.neo4j.gra                                                               ",{}]]},"cursor":{"x":27}}],[0.063193,{"lines":{"10":[["scala> import org.neo4j.grap                                                              ",{}]]},"cursor":{"x":28}}],[0.05545,{"lines":{"10":[["scala> import org.neo4j.graph                                                             ",{}]]},"cursor":{"x":29}}],[0.241464,{"lines":{"10":[["scala> import org.neo4j.graph.                                                            ",{}]]},"cursor":{"x":30}}],[0.031971,{"lines":{"10":[["scala> import org.neo4j.graph.d                                                           ",{}]]},"cursor":{"x":31}}],[0.369366,{"cursor":{"x":30}}],[0.001483,{"lines":{"10":[["scala> import org.neo4j.graph.                                                            ",{}]]}}],[0.116752,{"cursor":{"x":29}}],[0.001106,{"lines":{"10":[["scala> import org.neo4j.graph                                                             ",{}]]}}],[0.068788,{"lines":{"10":[["scala> import org.neo4j.graphd                                                            ",{}]]},"cursor":{"x":30}}],[0.154393,{"lines":{"10":[["scala> import org.neo4j.graphdb                                                           ",{}]]},"cursor":{"x":31}}],[0.087718,{"lines":{"10":[["scala> import org.neo4j.graphdb.                                                          ",{}]]},"cursor":{"x":32}}],[0.439893,{"lines":{"10":[["scala> import org.neo4j.graphdb._                                                         ",{}]]},"cursor":{"x":33}}],[0.183085,{"cursor":{"x":0,"y":11}}],[0.17768,{"lines":{"11":[["import org.neo4j.graphdb._                                                                ",{}]]},"cursor":{"y":12}}],[0.000355,{"lines":{"13":[["scala>                                                                                    ",{}]]},"cursor":{"x":7,"y":13}}],[0.806472,{"lines":{"13":[["scala> import org.neo4j.graphdb._                                                         ",{}]]},"cursor":{"x":33}}],[0.320851,{"cursor":{"x":32}}],[0.376822,{"lines":{"13":[["scala> import org.neo4j.graphdb.t_                                                        ",{}]]},"cursor":{"x":33}}],[0.152382,{"lines":{"13":[["scala> import org.neo4j.graphdb.tr_                                                       ",{}]]},"cursor":{"x":34}}],[0.07155599999999999,{"lines":{"13":[["scala> import org.neo4j.graphdb.tra_                                                      ",{}]]},"cursor":{"x":35}}],[0.14865,{"lines":{"13":[["scala> import org.neo4j.graphdb.trav_                                                     ",{}]]},"cursor":{"x":36}}],[0.130208,{"lines":{"13":[["scala> import org.neo4j.graphdb.trave_                                                    ",{}]]},"cursor":{"x":37}}],[0.088836,{"lines":{"13":[["scala> import org.neo4j.graphdb.traver_                                                   ",{}]]},"cursor":{"x":38}}],[0.07877099999999999,{"lines":{"13":[["scala> import org.neo4j.graphdb.travers_                                                  ",{}]]},"cursor":{"x":39}}],[0.391916,{"lines":{"13":[["scala> import org.neo4j.graphdb.traverse_                                                 ",{}]]},"cursor":{"x":40}}],[0.048117,{"lines":{"13":[["scala> import org.neo4j.graphdb.traverser_                                                ",{}]]},"cursor":{"x":41}}],[0.601436,{"cursor":{"x":40}}],[0.0006669999999999999,{"lines":{"13":[["scala> import org.neo4j.graphdb.traverse_                                                 ",{}]]}}],[0.11054,{"cursor":{"x":39}}],[0.000902,{"lines":{"13":[["scala> import org.neo4j.graphdb.travers_                                                  ",{}]]}}],[0.063758,{"lines":{"13":[["scala> import org.neo4j.graphdb.traversa_                                                 ",{}]]},"cursor":{"x":40}}],[0.13457,{"lines":{"13":[["scala> import org.neo4j.graphdb.traversal_                                                ",{}]]},"cursor":{"x":41}}],[0.184066,{"lines":{"13":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]]},"cursor":{"x":42}}],[0.167032,{"cursor":{"x":0,"y":14}}],[0.432378,{"lines":{"14":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"16":[["scala>                                                                                    ",{}]]},"cursor":{"x":7,"y":16}}],[2.839841,{"lines":{"16":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]]},"cursor":{"x":43}}],[0.423833,{"cursor":{"x":42}}],[0.5761230000000001,{"cursor":{"x":41}}],[1.333244,{"cursor":{"x":40}}],[0.000467,{"lines":{"16":[["scala> import org.neo4j.graphdb.traversa._                                                ",{}]]}}],[0.487252,{"cursor":{"x":39}}],[0.000447,{"lines":{"16":[["scala> import org.neo4j.graphdb.travers._                                                 ",{}]]}}],[0.084573,{"cursor":{"x":38}}],[0.0008049999999999999,{"lines":{"16":[["scala> import org.neo4j.graphdb.traver._                                                  ",{}]]}}],[0.083991,{"cursor":{"x":37}}],[0.001522,{"lines":{"16":[["scala> import org.neo4j.graphdb.trave._                                                   ",{}]]}}],[0.081943,{"cursor":{"x":36}}],[0.000884,{"lines":{"16":[["scala> import org.neo4j.graphdb.trav._                                                    ",{}]]}}],[0.08361499999999999,{"cursor":{"x":35}}],[0.000668,{"lines":{"16":[["scala> import org.neo4j.graphdb.tra._                                                     ",{}]]}}],[0.082985,{"cursor":{"x":34}}],[0.001223,{"lines":{"16":[["scala> import org.neo4j.graphdb.tr._                                                      ",{}]]}}],[0.083035,{"cursor":{"x":33}}],[0.0009,{"lines":{"16":[["scala> import org.neo4j.graphdb.t._                                                       ",{}]]}}],[0.09640799999999999,{"cursor":{"x":32}}],[0.00051,{"lines":{"16":[["scala> import org.neo4j.graphdb.._                                                        ",{}]]}}],[0.07041799999999999,{"cursor":{"x":31}}],[0.00086,{"lines":{"16":[["scala> import org.neo4j.graphdb._                                                         ",{}]]}}],[0.08354499999999999,{"cursor":{"x":30}}],[0.0009959999999999999,{"lines":{"16":[["scala> import org.neo4j.graphd._                                                          ",{}]]}}],[0.081506,{"cursor":{"x":29}}],[0.0006919999999999999,{"lines":{"16":[["scala> import org.neo4j.graph._                                                           ",{}]]}}],[0.084496,{"cursor":{"x":28}}],[0.001028,{"lines":{"16":[["scala> import org.neo4j.grap._                                                            ",{}]]}}],[0.08286200000000001,{"cursor":{"x":27}}],[0.000878,{"lines":{"16":[["scala> import org.neo4j.gra._                                                             ",{}]]}}],[0.082911,{"cursor":{"x":26}}],[0.000923,{"lines":{"16":[["scala> import org.neo4j.gr._                                                              ",{}]]}}],[0.082595,{"cursor":{"x":25}}],[0.0008550000000000001,{"lines":{"16":[["scala> import org.neo4j.g._                                                               ",{}]]}}],[0.234355,{"cursor":{"x":24}}],[0.000891,{"lines":{"16":[["scala> import org.neo4j.._                                                                ",{}]]}}],[0.267736,{"lines":{"16":[["scala> import org.neo4j.k._                                                               ",{}]]},"cursor":{"x":25}}],[0.067147,{"lines":{"16":[["scala> import org.neo4j.ke._                                                              ",{}]]},"cursor":{"x":26}}],[0.063192,{"lines":{"16":[["scala> import org.neo4j.ker._                                                             ",{}]]},"cursor":{"x":27}}],[0.056843,{"lines":{"16":[["scala> import org.neo4j.kern._                                                            ",{}]]},"cursor":{"x":28}}],[0.10369,{"lines":{"16":[["scala> import org.neo4j.kerne._                                                           ",{}]]},"cursor":{"x":29}}],[0.088072,{"lines":{"16":[["scala> import org.neo4j.kernel._                                                          ",{}]]},"cursor":{"x":30}}],[0.127655,{"cursor":{"x":0,"y":17}}],[0.404234,{"lines":{"17":[["import org.neo4j.kernel._                                                                 ",{}]]},"cursor":{"y":18}}],[6.3e-05,{"lines":{"19":[["scala>                                                                                    ",{}]]},"cursor":{"x":7,"y":19}}],[2.902924,{"lines":{"19":[["scala> v                                                                                  ",{}]]},"cursor":{"x":8}}],[0.067694,{"lines":{"19":[["scala> va                                                                                 ",{}]]},"cursor":{"x":9}}],[0.096111,{"lines":{"19":[["scala> val                                                                                ",{}]]},"cursor":{"x":10}}],[0.04787,{"cursor":{"x":11}}],[0.456001,{"lines":{"19":[["scala> val d                                                                              ",{}]]},"cursor":{"x":12}}],[0.410057,{"lines":{"19":[["scala> val db                                                                             ",{}]]},"cursor":{"x":13}}],[0.205882,{"cursor":{"x":14}}],[0.632143,{"lines":{"19":[["scala> val db =                                                                           ",{}]]},"cursor":{"x":15}}],[0.063844,{"cursor":{"x":16}}],[0.867341,{"lines":{"19":[["scala> val db = n                                                                         ",{}]]},"cursor":{"x":17}}],[0.068729,{"lines":{"19":[["scala> val db = ne                                                                        ",{}]]},"cursor":{"x":18}}],[0.039953,{"lines":{"19":[["scala> val db = new                                                                       ",{}]]},"cursor":{"x":19}}],[0.079959,{"cursor":{"x":20}}],[0.336298,{"lines":{"19":[["scala> val db = new E                                                                     ",{}]]},"cursor":{"x":21}}],[0.177145,{"lines":{"19":[["scala> val db = new Em                                                                    ",{}]]},"cursor":{"x":22}}],[0.103017,{"lines":{"19":[["scala> val db = new Emb                                                                   ",{}]]},"cursor":{"x":23}}],[0.229184,{"lines":{"19":[["scala> val db = new Embe                                                                  ",{}]]},"cursor":{"x":24}}],[0.187839,{"lines":{"19":[["scala> val db = new Embed                                                                 ",{}]]},"cursor":{"x":25}}],[0.151948,{"lines":{"19":[["scala> val db = new Embedd                                                                ",{}]]},"cursor":{"x":26}}],[0.168052,{"lines":{"19":[["scala> val db = new Embedde                                                               ",{}]]},"cursor":{"x":27}}],[0.166868,{"lines":{"19":[["scala> val db = new Embedded                                                              ",{}]]},"cursor":{"x":28}}],[0.097066,{"cursor":{"x":29}}],[0.6180639999999999,{"cursor":{"x":28}}],[0.000269,{}],[0.07793899999999999,{"lines":{"19":[["scala> val db = new EmbeddedG                                                             ",{}]]},"cursor":{"x":29}}],[0.159622,{"lines":{"19":[["scala> val db = new EmbeddedGr                                                            ",{}]]},"cursor":{"x":30}}],[0.055773,{"lines":{"19":[["scala> val db = new EmbeddedGra                                                           ",{}]]},"cursor":{"x":31}}],[0.079902,{"lines":{"19":[["scala> val db = new EmbeddedGrap                                                          ",{}]]},"cursor":{"x":32}}],[0.032176,{"lines":{"19":[["scala> val db = new EmbeddedGraph                                                         ",{}]]},"cursor":{"x":33}}],[0.208356,{"lines":{"19":[["scala> val db = new EmbeddedGraphD                                                        ",{}]]},"cursor":{"x":34}}],[0.223397,{"lines":{"19":[["scala> val db = new EmbeddedGraphDa                                                       ",{}]]},"cursor":{"x":35}}],[0.08045099999999999,{"lines":{"19":[["scala> val db = new EmbeddedGraphDat                                                      ",{}]]},"cursor":{"x":36}}],[0.133156,{"lines":{"19":[["scala> val db = new EmbeddedGraphData                                                     ",{}]]},"cursor":{"x":37}}],[0.10639,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatab                                                    ",{}]]},"cursor":{"x":38}}],[0.095495,{"lines":{"19":[["scala> val db = new EmbeddedGraphDataba                                                   ",{}]]},"cursor":{"x":39}}],[0.08931,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabas                                                  ",{}]]},"cursor":{"x":40}}],[0.07034799999999999,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase                                                 ",{}]]},"cursor":{"x":41}}],[13.061782,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(                                                ",{}]]},"cursor":{"x":42}}],[0.137743,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"                                               ",{}]]},"cursor":{"x":43}}],[0.616136,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/                                              ",{}]]},"cursor":{"x":44}}],[0.642524,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/U                                             ",{}]]},"cursor":{"x":45}}],[0.10947,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Us                                            ",{}]]},"cursor":{"x":46}}],[0.047881,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Use                                           ",{}]]},"cursor":{"x":47}}],[0.056102,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/User                                          ",{}]]},"cursor":{"x":48}}],[0.088029,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users                                         ",{}]]},"cursor":{"x":49}}],[0.087959,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/                                        ",{}]]},"cursor":{"x":50}}],[0.111863,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/w                                       ",{}]]},"cursor":{"x":51}}],[0.06417100000000001,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wf                                      ",{}]]},"cursor":{"x":52}}],[0.144003,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfr                                     ",{}]]},"cursor":{"x":53}}],[0.047864,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfre                                    ",{}]]},"cursor":{"x":54}}],[0.135996,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfree                                   ",{}]]},"cursor":{"x":55}}],[0.08792899999999999,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreem                                  ",{}]]},"cursor":{"x":56}}],[0.07494199999999999,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreema                                 ",{}]]},"cursor":{"x":57}}],[0.038181,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman                                ",{}]]},"cursor":{"x":58}}],[0.08721,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/                               ",{}]]},"cursor":{"x":59}}],[2.581742,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/n                              ",{}]]},"cursor":{"x":60}}],[0.075041,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/ne                             ",{}]]},"cursor":{"x":61}}],[0.112246,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo                            ",{}]]},"cursor":{"x":62}}],[0.143886,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4                           ",{}]]},"cursor":{"x":63}}],[0.087842,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j                          ",{}]]},"cursor":{"x":64}}],[0.303789,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j.                         ",{}]]},"cursor":{"x":65}}],[0.91564,{"cursor":{"x":64}}],[0.000277,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j                          ",{}]]}}],[0.147357,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-                         ",{}]]},"cursor":{"x":65}}],[0.385093,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-c                        ",{}]]},"cursor":{"x":66}}],[0.046955,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-co                       ",{}]]},"cursor":{"x":67}}],[0.065177,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-com                      ",{}]]},"cursor":{"x":68}}],[0.143641,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-comm                     ",{}]]},"cursor":{"x":69}}],[0.175411,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-commu                    ",{}]]},"cursor":{"x":70}}],[0.17357,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-commun                   ",{}]]},"cursor":{"x":71}}],[0.042578,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-communi                  ",{}]]},"cursor":{"x":72}}],[0.08866599999999999,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-communit                 ",{}]]},"cursor":{"x":73}}],[0.16783,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community                ",{}]]},"cursor":{"x":74}}],[0.495707,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-               ",{}]]},"cursor":{"x":75}}],[0.493897,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2              ",{}]]},"cursor":{"x":76}}],[0.017209,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.             ",{}]]},"cursor":{"x":77}}],[0.224517,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0            ",{}]]},"cursor":{"x":78}}],[0.224328,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.           ",{}]]},"cursor":{"x":79}}],[0.20069,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0          ",{}]]},"cursor":{"x":80}}],[0.295735,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0.         ",{}]]},"cursor":{"x":81}}],[0.549513,{"cursor":{"x":80}}],[0.000241,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0          ",{}]]}}],[0.121473,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-         ",{}]]},"cursor":{"x":81}}],[0.391984,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M        ",{}]]},"cursor":{"x":82}}],[0.296275,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M0       ",{}]]},"cursor":{"x":83}}],[0.103666,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06      ",{}]]},"cursor":{"x":84}}],[1.155043,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/     ",{}]]},"cursor":{"x":85}}],[2.054417,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/d    ",{}]]},"cursor":{"x":86}}],[0.118141,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/da   ",{}]]},"cursor":{"x":87}}],[0.072161,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/dat  ",{}]]},"cursor":{"x":88}}],[0.103701,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/data ",{}]]},"cursor":{"x":89}}],[0.12799,{"lines":{"19":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/data/",{}]]},"cursor":{"x":0,"y":20}}],[0.528143,{"lines":{"20":[["g                                                                                         ",{}]]},"cursor":{"x":1}}],[0.195294,{"lines":{"20":[["gr                                                                                        ",{}]]},"cursor":{"x":2}}],[0.052527,{"lines":{"20":[["gra                                                                                       ",{}]]},"cursor":{"x":3}}],[0.040269,{"lines":{"20":[["grap                                                                                      ",{}]]},"cursor":{"x":4}}],[0.039961,{"lines":{"20":[["graph                                                                                     ",{}]]},"cursor":{"x":5}}],[0.263784,{"lines":{"20":[["graph.                                                                                    ",{}]]},"cursor":{"x":6}}],[0.095959,{"lines":{"20":[["graph.d                                                                                   ",{}]]},"cursor":{"x":7}}],[0.192044,{"lines":{"20":[["graph.db                                                                                  ",{}]]},"cursor":{"x":8}}],[0.112191,{"lines":{"20":[["graph.db/                                                                                 ",{}]]},"cursor":{"x":9}}],[0.642346,{"lines":{"20":[["graph.db/)                                                                                ",{}]]},"cursor":{"x":10}}],[0.405882,{"cursor":{"x":9}}],[0.00029,{"lines":{"20":[["graph.db/                                                                                 ",{}]]}}],[0.191305,{"lines":{"20":[["graph.db/\"                                                                                ",{}]]},"cursor":{"x":10}}],[0.135967,{"lines":{"20":[["graph.db/\")                                                                               ",{}]]},"cursor":{"x":11}}],[0.808194,{"cursor":{"x":0,"y":21}}],[0.501703,{"lines":{"21":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]]},"cursor":{"y":22}}],[1.472605,{"lines":{"0":[["[info] Loading global plugins from /Users/wfreeman/.sbt/plugins                           ",{}]],"1":[["[info] Set current project to sbtneo (in build file:/Users/wfreeman/scalatest/)           ",{}]],"2":[["[info] Starting scala interpreter...                                                      ",{}]],"3":[["[info]                                                                                    ",{}]],"4":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"5":[["Type in expressions to have them evaluated.                                               ",{}]],"6":[["Type :help for more information.                                                          ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"9":[["import org.neo4j.graphdb._                                                                ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"12":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> import org.neo4j.kernel._                                                          ",{}]],"15":[["import org.neo4j.kernel._                                                                 ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/data/",{}]],"18":[["graph.db/\")                                                                               ",{}]],"19":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"20":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [/Users/wfreeman/neo4j-",{}]],"21":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]]}}],[4.5e-05,{"lines":{"0":[["[info] Set current project to sbtneo (in build file:/Users/wfreeman/scalatest/)           ",{}]],"1":[["[info] Starting scala interpreter...                                                      ",{}]],"2":[["[info]                                                                                    ",{}]],"3":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"4":[["Type in expressions to have them evaluated.                                               ",{}]],"5":[["Type :help for more information.                                                          ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"8":[["import org.neo4j.graphdb._                                                                ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"11":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> import org.neo4j.kernel._                                                          ",{}]],"14":[["import org.neo4j.kernel._                                                                 ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/data/",{}]],"17":[["graph.db/\")                                                                               ",{}]],"18":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"19":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [/Users/wfreeman/neo4j-",{}]],"20":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[2.063928,{"lines":{"22":[["scala> v                                                                                  ",{}]]},"cursor":{"x":8}}],[0.049584,{"lines":{"22":[["scala> va                                                                                 ",{}]]},"cursor":{"x":9}}],[0.111895,{"lines":{"22":[["scala> val                                                                                ",{}]]},"cursor":{"x":10}}],[0.071933,{"cursor":{"x":11}}],[0.376084,{"lines":{"22":[["scala> val t                                                                              ",{}]]},"cursor":{"x":12}}],[0.200356,{"lines":{"22":[["scala> val tx                                                                             ",{}]]},"cursor":{"x":13}}],[0.055549,{"cursor":{"x":14}}],[0.236009,{"lines":{"22":[["scala> val tx =                                                                           ",{}]]},"cursor":{"x":15}}],[0.053748,{"cursor":{"x":16}}],[0.326341,{"lines":{"22":[["scala> val tx = d                                                                         ",{}]]},"cursor":{"x":17}}],[0.199828,{"lines":{"22":[["scala> val tx = db                                                                        ",{}]]},"cursor":{"x":18}}],[0.08005,{"lines":{"22":[["scala> val tx = db.                                                                       ",{}]]},"cursor":{"x":19}}],[0.428544,{"lines":{"22":[["scala> val tx = db.b                                                                      ",{}]]},"cursor":{"x":20}}],[0.148198,{"lines":{"22":[["scala> val tx = db.be                                                                     ",{}]]},"cursor":{"x":21}}],[0.055211,{"lines":{"22":[["scala> val tx = db.beg                                                                    ",{}]]},"cursor":{"x":22}}],[0.096484,{"lines":{"22":[["scala> val tx = db.begi                                                                   ",{}]]},"cursor":{"x":23}}],[0.055649,{"lines":{"22":[["scala> val tx = db.begin                                                                  ",{}]]},"cursor":{"x":24}}],[0.183916,{"lines":{"22":[["scala> val tx = db.beginT                                                                 ",{}]]},"cursor":{"x":25}}],[0.401326,{"lines":{"22":[["scala> val tx = db.beginTx                                                                ",{}]]},"cursor":{"x":26}}],[0.103565,{"lines":{"0":[["[info] Starting scala interpreter...                                                      ",{}]],"1":[["[info]                                                                                    ",{}]],"2":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"3":[["Type in expressions to have them evaluated.                                               ",{}]],"4":[["Type :help for more information.                                                          ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"7":[["import org.neo4j.graphdb._                                                                ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"10":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> import org.neo4j.kernel._                                                          ",{}]],"13":[["import org.neo4j.kernel._                                                                 ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/data/",{}]],"16":[["graph.db/\")                                                                               ",{}]],"17":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"18":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [/Users/wfreeman/neo4j-",{}]],"19":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val tx = db.beginTx                                                                ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.276099,{"lines":{"0":[["Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).       ",{}]],"1":[["Type in expressions to have them evaluated.                                               ",{}]],"2":[["Type :help for more information.                                                          ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"5":[["import org.neo4j.graphdb._                                                                ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"8":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> import org.neo4j.kernel._                                                          ",{}]],"11":[["import org.neo4j.kernel._                                                                 ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/data/",{}]],"14":[["graph.db/\")                                                                               ",{}]],"15":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"16":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [/Users/wfreeman/neo4j-",{}]],"17":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> val tx = db.beginTx                                                                ",{}]],"20":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[2.694595,{"lines":{"22":[["scala> v                                                                                  ",{}]]},"cursor":{"x":8}}],[0.05315,{"lines":{"22":[["scala> va                                                                                 ",{}]]},"cursor":{"x":9}}],[0.08758100000000001,{"lines":{"22":[["scala> val                                                                                ",{}]]},"cursor":{"x":10}}],[0.072836,{"cursor":{"x":11}}],[0.10381,{"lines":{"22":[["scala> val c                                                                              ",{}]]},"cursor":{"x":12}}],[0.119309,{"lines":{"22":[["scala> val ch                                                                             ",{}]]},"cursor":{"x":13}}],[0.07190199999999999,{"lines":{"22":[["scala> val cha                                                                            ",{}]]},"cursor":{"x":14}}],[0.05595,{"lines":{"22":[["scala> val char                                                                           ",{}]]},"cursor":{"x":15}}],[0.09662900000000001,{"lines":{"22":[["scala> val charl                                                                          ",{}]]},"cursor":{"x":16}}],[0.063135,{"lines":{"22":[["scala> val charli                                                                         ",{}]]},"cursor":{"x":17}}],[0.153298,{"lines":{"22":[["scala> val charliz                                                                        ",{}]]},"cursor":{"x":18}}],[0.104175,{"lines":{"22":[["scala> val charlize                                                                       ",{}]]},"cursor":{"x":19}}],[0.443689,{"cursor":{"x":20}}],[0.115016,{"lines":{"22":[["scala> val charlize =                                                                     ",{}]]},"cursor":{"x":21}}],[0.055849,{"cursor":{"x":22}}],[0.783875,{"lines":{"22":[["scala> val charlize = d                                                                   ",{}]]},"cursor":{"x":23}}],[0.204924,{"lines":{"22":[["scala> val charlize = db                                                                  ",{}]]},"cursor":{"x":24}}],[0.091138,{"lines":{"22":[["scala> val charlize = db.                                                                 ",{}]]},"cursor":{"x":25}}],[0.183947,{"lines":{"22":[["scala> val charlize = db.G                                                                ",{}]]},"cursor":{"x":26}}],[0.264012,{"lines":{"22":[["scala> val charlize = db.Ge                                                               ",{}]]},"cursor":{"x":27}}],[0.071992,{"lines":{"22":[["scala> val charlize = db.Get                                                              ",{}]]},"cursor":{"x":28}}],[0.500989,{"cursor":{"x":27}}],[0.000229,{"lines":{"22":[["scala> val charlize = db.Ge                                                               ",{}]]}}],[0.11507,{"cursor":{"x":26}}],[0.000301,{"lines":{"22":[["scala> val charlize = db.G                                                                ",{}]]}}],[0.135554,{"cursor":{"x":25}}],[0.000285,{"lines":{"22":[["scala> val charlize = db.                                                                 ",{}]]}}],[0.05553,{"lines":{"22":[["scala> val charlize = db.g                                                                ",{}]]},"cursor":{"x":26}}],[0.09610299999999999,{"lines":{"22":[["scala> val charlize = db.ge                                                               ",{}]]},"cursor":{"x":27}}],[0.080114,{"lines":{"22":[["scala> val charlize = db.get                                                              ",{}]]},"cursor":{"x":28}}],[0.191875,{"lines":{"22":[["scala> val charlize = db.getN                                                             ",{}]]},"cursor":{"x":29}}],[0.152099,{"lines":{"22":[["scala> val charlize = db.getNo                                                            ",{}]]},"cursor":{"x":30}}],[0.09582300000000001,{"lines":{"22":[["scala> val charlize = db.getNod                                                           ",{}]]},"cursor":{"x":31}}],[0.777203,{"lines":{"22":[["scala> val charlize = db.getNo                                                            ",{}]]},"cursor":{"x":29}}],[0.012834,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"2":[["import org.neo4j.graphdb._                                                                ",{}]],"4":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"5":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"7":[["scala> import org.neo4j.kernel._                                                          ",{}]],"8":[["import org.neo4j.kernel._                                                                 ",{}]],"10":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/data/",{}]],"11":[["graph.db/\")                                                                               ",{}]],"12":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"13":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [/Users/wfreeman/neo4j-",{}]],"14":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val tx = db.beginTx                                                                ",{}]],"17":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"19":[["scala> val charlize = db.getNode                                                          ",{}]],"20":[["getNodeById      getNodeManager                                                           ",{}]],"22":[["scala> val charlize = db.getNode                                                          ",{}]]},"cursor":{"x":32}}],[0.857896,{"lines":{"22":[["scala> val charlize = db.getNodeB                                                         ",{}]]},"cursor":{"x":33}}],[0.678333,{"cursor":{"x":32}}],[0.004665,{"lines":{"22":[["scala> val charlize = db.getNodeById                                                      ",{}]]},"cursor":{"x":36}}],[0.925833,{"lines":{"22":[["scala> val charlize = db.getNodeById(                                                     ",{}]]},"cursor":{"x":37}}],[0.575716,{"lines":{"22":[["scala> val charlize = db.getNodeById(9                                                    ",{}]]},"cursor":{"x":38}}],[0.136673,{"lines":{"22":[["scala> val charlize = db.getNodeById(93                                                   ",{}]]},"cursor":{"x":39}}],[0.10356,{"lines":{"22":[["scala> val charlize = db.getNodeById(931                                                  ",{}]]},"cursor":{"x":40}}],[0.167645,{"lines":{"22":[["scala> val charlize = db.getNodeById(9311                                                 ",{}]]},"cursor":{"x":41}}],[0.224522,{"lines":{"22":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]]},"cursor":{"x":42}}],[0.183862,{"lines":{"0":[["scala> import org.neo4j.graphdb._                                                         ",{}]],"1":[["import org.neo4j.graphdb._                                                                ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"4":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> import org.neo4j.kernel._                                                          ",{}]],"7":[["import org.neo4j.kernel._                                                                 ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/data/",{}]],"10":[["graph.db/\")                                                                               ",{}]],"11":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"12":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [/Users/wfreeman/neo4j-",{}]],"13":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val tx = db.beginTx                                                                ",{}]],"16":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val charlize = db.getNode                                                          ",{}]],"19":[["getNodeById      getNodeManager                                                           ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.201422,{"lines":{"0":[["import org.neo4j.graphdb._                                                                ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"3":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> import org.neo4j.kernel._                                                          ",{}]],"6":[["import org.neo4j.kernel._                                                                 ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/data/",{}]],"9":[["graph.db/\")                                                                               ",{}]],"10":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"11":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [/Users/wfreeman/neo4j-",{}]],"12":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val tx = db.beginTx                                                                ",{}]],"15":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val charlize = db.getNode                                                          ",{}]],"18":[["getNodeById      getNodeManager                                                           ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"21":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]]}}],[8.3e-05,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"2":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> import org.neo4j.kernel._                                                          ",{}]],"5":[["import org.neo4j.kernel._                                                                 ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/data/",{}]],"8":[["graph.db/\")                                                                               ",{}]],"9":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"10":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [/Users/wfreeman/neo4j-",{}]],"11":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val tx = db.beginTx                                                                ",{}]],"14":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val charlize = db.getNode                                                          ",{}]],"17":[["getNodeById      getNodeManager                                                           ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"20":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[2.643471,{"lines":{"22":[["scala> v                                                                                  ",{}]]},"cursor":{"x":8}}],[0.578557,{"cursor":{"x":7}}],[0.000153,{"lines":{"22":[["scala>                                                                                    ",{}]]}}],[1.37338,{"lines":{"22":[["scala> c                                                                                  ",{}]]},"cursor":{"x":8}}],[0.074102,{"lines":{"22":[["scala> ch                                                                                 ",{}]]},"cursor":{"x":9}}],[0.111891,{"lines":{"22":[["scala> cha                                                                                ",{}]]},"cursor":{"x":10}}],[0.05597,{"lines":{"22":[["scala> char                                                                               ",{}]]},"cursor":{"x":11}}],[0.0963,{"lines":{"22":[["scala> charl                                                                              ",{}]]},"cursor":{"x":12}}],[0.055719,{"lines":{"22":[["scala> charli                                                                             ",{}]]},"cursor":{"x":13}}],[0.136012,{"lines":{"22":[["scala> charliz                                                                            ",{}]]},"cursor":{"x":14}}],[0.06388099999999999,{"lines":{"22":[["scala> charlize                                                                           ",{}]]},"cursor":{"x":15}}],[0.264036,{"lines":{"22":[["scala> charlize.                                                                          ",{}]]},"cursor":{"x":16}}],[0.502905,{"lines":{"22":[["scala> charlize.g                                                                         ",{}]]},"cursor":{"x":17}}],[0.121357,{"lines":{"22":[["scala> charlize.ge                                                                        ",{}]]},"cursor":{"x":18}}],[0.063889,{"lines":{"22":[["scala> charlize.get                                                                       ",{}]]},"cursor":{"x":19}}],[0.183852,{"lines":{"22":[["scala> charlize.getR                                                                      ",{}]]},"cursor":{"x":20}}],[0.144012,{"lines":{"22":[["scala> charlize.getRe                                                                     ",{}]]},"cursor":{"x":21}}],[0.09601899999999999,{"lines":{"22":[["scala> charlize.getRel                                                                    ",{}]]},"cursor":{"x":22}}],[0.088516,{"lines":{"22":[["scala> charlize.getRela                                                                   ",{}]]},"cursor":{"x":23}}],[0.055479,{"lines":{"22":[["scala> charlize.getRelat                                                                  ",{}]]},"cursor":{"x":24}}],[0.080023,{"lines":{"22":[["scala> charlize.getRelati                                                                 ",{}]]},"cursor":{"x":25}}],[0.040028,{"lines":{"22":[["scala> charlize.getRelatio                                                                ",{}]]},"cursor":{"x":26}}],[0.055914,{"lines":{"22":[["scala> charlize.getRelation                                                               ",{}]]},"cursor":{"x":27}}],[0.124705,{"lines":{"22":[["scala> charlize.getRelations                                                              ",{}]]},"cursor":{"x":28}}],[0.107441,{"lines":{"22":[["scala> charlize.getRelationsh                                                             ",{}]]},"cursor":{"x":29}}],[0.000163,{"lines":{"22":[["scala> charlize.getRelationshi                                                            ",{}]]},"cursor":{"x":30}}],[0.055745,{"lines":{"22":[["scala> charlize.getRelationship                                                           ",{}]]},"cursor":{"x":31}}],[0.129224,{"lines":{"22":[["scala> charlize.getRelationships                                                          ",{}]]},"cursor":{"x":32}}],[0.375959,{"lines":{"22":[["scala> charlize.getRelationships(                                                         ",{}]]},"cursor":{"x":33}}],[1.902869,{"lines":{"22":[["scala> charlize.getRelationships(D                                                        ",{}]]},"cursor":{"x":34}}],[0.22419,{"lines":{"22":[["scala> charlize.getRelationships(Di                                                       ",{}]]},"cursor":{"x":35}}],[0.040427,{"lines":{"22":[["scala> charlize.getRelationships(Dir                                                      ",{}]]},"cursor":{"x":36}}],[0.087312,{"lines":{"22":[["scala> charlize.getRelationships(Dire                                                     ",{}]]},"cursor":{"x":37}}],[0.128089,{"lines":{"22":[["scala> charlize.getRelationships(Direc                                                    ",{}]]},"cursor":{"x":38}}],[0.232246,{"lines":{"22":[["scala> charlize.getRelationships(Direci                                                   ",{}]]},"cursor":{"x":39}}],[0.000234,{"lines":{"22":[["scala> charlize.getRelationships(Direcit                                                  ",{}]]},"cursor":{"x":40}}],[0.04832,{"lines":{"22":[["scala> charlize.getRelationships(Direcito                                                 ",{}]]},"cursor":{"x":41}}],[0.047565,{"lines":{"22":[["scala> charlize.getRelationships(Direciton                                                ",{}]]},"cursor":{"x":42}}],[0.22316,{"lines":{"22":[["scala> charlize.getRelationships(Direciton.                                               ",{}]]},"cursor":{"x":43}}],[0.449182,{"cursor":{"x":42}}],[0.000437,{"lines":{"22":[["scala> charlize.getRelationships(Direciton                                                ",{}]]}}],[0.12749,{"cursor":{"x":41}}],[0.00027,{"lines":{"22":[["scala> charlize.getRelationships(Direcito                                                 ",{}]]}}],[0.143071,{"cursor":{"x":40}}],[0.000188,{"lines":{"22":[["scala> charlize.getRelationships(Direcit                                                  ",{}]]}}],[0.144688,{"cursor":{"x":39}}],[0.000531,{"lines":{"22":[["scala> charlize.getRelationships(Direci                                                   ",{}]]}}],[0.127762,{"cursor":{"x":38}}],[0.000545,{"lines":{"22":[["scala> charlize.getRelationships(Direc                                                    ",{}]]}}],[0.163996,{"lines":{"22":[["scala> charlize.getRelationships(Direct                                                   ",{}]]},"cursor":{"x":39}}],[0.058573,{"lines":{"22":[["scala> charlize.getRelationships(Directi                                                  ",{}]]},"cursor":{"x":40}}],[0.040093,{"lines":{"22":[["scala> charlize.getRelationships(Directio                                                 ",{}]]},"cursor":{"x":41}}],[0.04065,{"lines":{"22":[["scala> charlize.getRelationships(Direction                                                ",{}]]},"cursor":{"x":42}}],[0.255815,{"lines":{"22":[["scala> charlize.getRelationships(Direction.                                               ",{}]]},"cursor":{"x":43}}],[0.35158,{"lines":{"22":[["scala> charlize.getRelationships(Direction.B                                              ",{}]]},"cursor":{"x":44}}],[0.143362,{"lines":{"22":[["scala> charlize.getRelationships(Direction.Bo                                             ",{}]]},"cursor":{"x":45}}],[0.363739,{"cursor":{"x":44}}],[0.000223,{"lines":{"22":[["scala> charlize.getRelationships(Direction.B                                              ",{}]]}}],[0.156037,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BO                                             ",{}]]},"cursor":{"x":45}}],[0.09606199999999999,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOT                                            ",{}]]},"cursor":{"x":46}}],[0.031911,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH                                           ",{}]]},"cursor":{"x":47}}],[0.568049,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH,                                          ",{}]]},"cursor":{"x":48}}],[0.040022,{"cursor":{"x":49}}],[0.973384,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, D                                        ",{}]]},"cursor":{"x":50}}],[0.250589,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, Dy                                       ",{}]]},"cursor":{"x":51}}],[0.17594,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, Dyn                                      ",{}]]},"cursor":{"x":52}}],[0.128077,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, Dyna                                     ",{}]]},"cursor":{"x":53}}],[0.135984,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, Dynam                                    ",{}]]},"cursor":{"x":54}}],[0.055944,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, Dynami                                   ",{}]]},"cursor":{"x":55}}],[0.159943,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, Dynamic                                  ",{}]]},"cursor":{"x":56}}],[0.422242,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicR                                 ",{}]]},"cursor":{"x":57}}],[0.162351,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRe                                ",{}]]},"cursor":{"x":58}}],[0.015401,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRel                               ",{}]]},"cursor":{"x":59}}],[0.159978,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRela                              ",{}]]},"cursor":{"x":60}}],[0.024281,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelat                             ",{}]]},"cursor":{"x":61}}],[0.07181,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelati                            ",{}]]},"cursor":{"x":62}}],[0.063862,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelatio                           ",{}]]},"cursor":{"x":63}}],[0.056062,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelation                          ",{}]]},"cursor":{"x":64}}],[0.096222,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelations                         ",{}]]},"cursor":{"x":65}}],[0.135832,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationsh                        ",{}]]},"cursor":{"x":66}}],[0.055925,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshi                       ",{}]]},"cursor":{"x":67}}],[0.031986,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationship                      ",{}]]},"cursor":{"x":68}}],[0.324591,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipT                     ",{}]]},"cursor":{"x":69}}],[0.164474,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipTy                    ",{}]]},"cursor":{"x":70}}],[0.023711,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipTyp                   ",{}]]},"cursor":{"x":71}}],[0.072343,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType                  ",{}]]},"cursor":{"x":72}}],[0.615579,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType(                 ",{}]]},"cursor":{"x":73}}],[0.166061,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType(\"                ",{}]]},"cursor":{"x":74}}],[1.321107,{"cursor":{"x":73}}],[0.00014,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType(                 ",{}]]}}],[0.305591,{"cursor":{"x":72}}],[0.000249,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType                  ",{}]]}}],[0.223136,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.                 ",{}]]},"cursor":{"x":73}}],[0.136105,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.w                ",{}]]},"cursor":{"x":74}}],[0.104111,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.wi               ",{}]]},"cursor":{"x":75}}],[0.128009,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.wit              ",{}]]},"cursor":{"x":76}}],[0.03163,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.with             ",{}]]},"cursor":{"x":77}}],[0.218843,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withN            ",{}]]},"cursor":{"x":78}}],[0.109747,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withNa           ",{}]]},"cursor":{"x":79}}],[0.031078,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withNam          ",{}]]},"cursor":{"x":80}}],[0.128471,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName         ",{}]]},"cursor":{"x":81}}],[0.176521,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName(        ",{}]]},"cursor":{"x":82}}],[0.175297,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName(\"       ",{}]]},"cursor":{"x":83}}],[1.151911,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName(\"A      ",{}]]},"cursor":{"x":84}}],[0.103582,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName(\"AC     ",{}]]},"cursor":{"x":85}}],[0.23176,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName(\"ACT    ",{}]]},"cursor":{"x":86}}],[0.063954,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName(\"ACTE   ",{}]]},"cursor":{"x":87}}],[0.16808,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName(\"ACTED  ",{}]]},"cursor":{"x":88}}],[0.079938,{"lines":{"22":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName(\"ACTED_ ",{}]]},"cursor":{"x":89}}],[0.207903,{"lines":{"0":[["scala> import org.neo4j.graphdb.traversal._                                               ",{}]],"1":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> import org.neo4j.kernel._                                                          ",{}]],"4":[["import org.neo4j.kernel._                                                                 ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/data/",{}]],"7":[["graph.db/\")                                                                               ",{}]],"8":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"9":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [/Users/wfreeman/neo4j-",{}]],"10":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> val tx = db.beginTx                                                                ",{}]],"13":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val charlize = db.getNode                                                          ",{}]],"16":[["getNodeById      getNodeManager                                                           ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"19":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName(\"ACTED_I",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.039991,{"lines":{"22":[["N                                                                                         ",{}]]},"cursor":{"x":1}}],[0.197581,{"lines":{"22":[["N\"                                                                                        ",{}]]},"cursor":{"x":2}}],[0.234439,{"lines":{"22":[["N\")                                                                                       ",{}]]},"cursor":{"x":3}}],[0.496005,{"lines":{"22":[["N\"))                                                                                      ",{}]]},"cursor":{"x":4}}],[2.00361,{"cursor":{"x":7,"y":21}}],[0.6763940000000001,{"lines":{"21":[["scala> vcharlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName(\"ACTED_",{}]],"22":[["IN\"))                                                                                     ",{}]]},"cursor":{"x":5}}],[5.8e-05,{"cursor":{"x":8}}],[0.063956,{"lines":{"21":[["scala> vacharlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName(\"ACTED",{}]],"22":[["_IN\"))                                                                                    ",{}]]},"cursor":{"x":6}}],[5.4e-05,{"cursor":{"x":9}}],[0.07190299999999999,{"lines":{"21":[["scala> valcharlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName(\"ACTE",{}]],"22":[["D_IN\"))                                                                                   ",{}]]},"cursor":{"x":10}}],[0.016147,{"lines":{"21":[["scala> val charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName(\"ACT",{}]],"22":[["ED_IN\"))                                                                                  ",{}]]},"cursor":{"x":11}}],[2.663703,{"lines":{"21":[["scala> val icharlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName(\"AC",{}]],"22":[["TED_IN\"))                                                                                 ",{}]]},"cursor":{"x":12}}],[0.08054699999999999,{"lines":{"21":[["scala> val itcharlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName(\"A",{}]],"22":[["CTED_IN\"))                                                                                ",{}]]},"cursor":{"x":10}}],[5e-05,{"cursor":{"x":13}}],[0.144692,{"lines":{"21":[["scala> val it charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName(\"",{}]],"22":[["ACTED_IN\"))                                                                               ",{}]]},"cursor":{"x":14}}],[0.63147,{"lines":{"21":[["scala> val it =charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName(",{}]],"22":[["\"ACTED_IN\"))                                                                              ",{}]]},"cursor":{"x":12}}],[5.6e-05,{"cursor":{"x":15}}],[0.06503299999999999,{"lines":{"21":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"22":[["(\"ACTED_IN\"))                                                                             ",{}]]},"cursor":{"x":16}}],[0.337267,{}],[0.000504,{"lines":{"0":[["import org.neo4j.graphdb.traversal._                                                      ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> import org.neo4j.kernel._                                                          ",{}]],"3":[["import org.neo4j.kernel._                                                                 ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/data/",{}]],"6":[["graph.db/\")                                                                               ",{}]],"7":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"8":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [/Users/wfreeman/neo4j-",{}]],"9":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val tx = db.beginTx                                                                ",{}]],"12":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val charlize = db.getNode                                                          ",{}]],"15":[["getNodeById      getNodeManager                                                           ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"18":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"21":[["(\"ACTED_IN\"))                                                                             ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0,"y":22}}],[0.299326,{"lines":{"0":[["scala> import org.neo4j.kernel._                                                          ",{}]],"1":[["import org.neo4j.kernel._                                                                 ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/data/",{}]],"4":[["graph.db/\")                                                                               ",{}]],"5":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"6":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [/Users/wfreeman/neo4j-",{}]],"7":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val tx = db.beginTx                                                                ",{}]],"10":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> val charlize = db.getNode                                                          ",{}]],"13":[["getNodeById      getNodeManager                                                           ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"16":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"19":[["(\"ACTED_IN\"))                                                                             ",{}]],"20":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"21":[["ator@2f5f0fe4                                                                             ",{}]]}}],[3.6e-05,{"lines":{"0":[["import org.neo4j.kernel._                                                                 ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/data/",{}]],"3":[["graph.db/\")                                                                               ",{}]],"4":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"5":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [/Users/wfreeman/neo4j-",{}]],"6":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val tx = db.beginTx                                                                ",{}]],"9":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val charlize = db.getNode                                                          ",{}]],"12":[["getNodeById      getNodeManager                                                           ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"15":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"18":[["(\"ACTED_IN\"))                                                                             ",{}]],"19":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"20":[["ator@2f5f0fe4                                                                             ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.862319,{"lines":{"22":[["scala> i                                                                                  ",{}]]},"cursor":{"x":8}}],[0.138929,{"lines":{"22":[["scala> it                                                                                 ",{}]]},"cursor":{"x":9}}],[0.120219,{"lines":{"22":[["scala> it.                                                                                ",{}]]},"cursor":{"x":10}}],[0.191591,{"lines":{"22":[["scala> it.a                                                                               ",{}]]},"cursor":{"x":11}}],[0.439958,{"cursor":{"x":10}}],[0.000245,{"lines":{"22":[["scala> it.                                                                                ",{}]]}}],[0.147905,{"cursor":{"x":9}}],[0.000202,{"lines":{"22":[["scala> it                                                                                 ",{}]]}}],[0.13165,{"cursor":{"x":8}}],[0.000243,{"lines":{"22":[["scala> i                                                                                  ",{}]]}}],[0.143773,{"cursor":{"x":7}}],[0.00017,{"lines":{"22":[["scala>                                                                                    ",{}]]}}],[0.231687,{"lines":{"22":[["scala> i                                                                                  ",{}]]},"cursor":{"x":8}}],[0.047958,{"lines":{"22":[["scala> im                                                                                 ",{}]]},"cursor":{"x":9}}],[0.088119,{"lines":{"22":[["scala> imp                                                                                ",{}]]},"cursor":{"x":10}}],[0.05588,{"lines":{"22":[["scala> impo                                                                               ",{}]]},"cursor":{"x":11}}],[0.11213,{"lines":{"22":[["scala> impor                                                                              ",{}]]},"cursor":{"x":12}}],[0.17602,{"lines":{"22":[["scala> import                                                                             ",{}]]},"cursor":{"x":13}}],[0.075379,{"cursor":{"x":14}}],[1.186023,{"lines":{"22":[["scala> import c                                                                           ",{}]]},"cursor":{"x":15}}],[0.0265,{"lines":{"22":[["scala> import co                                                                          ",{}]]},"cursor":{"x":16}}],[0.231976,{"lines":{"22":[["scala> import col                                                                         ",{}]]},"cursor":{"x":17}}],[0.119957,{"lines":{"22":[["scala> import coll                                                                        ",{}]]},"cursor":{"x":18}}],[0.111968,{"lines":{"22":[["scala> import colle                                                                       ",{}]]},"cursor":{"x":19}}],[0.040723,{"lines":{"22":[["scala> import collec                                                                      ",{}]]},"cursor":{"x":20}}],[0.207325,{"lines":{"22":[["scala> import collect                                                                     ",{}]]},"cursor":{"x":21}}],[0.024216,{"lines":{"22":[["scala> import collecti                                                                    ",{}]]},"cursor":{"x":22}}],[0.015704,{"lines":{"22":[["scala> import collectio                                                                   ",{}]]},"cursor":{"x":23}}],[0.056099,{"lines":{"22":[["scala> import collection                                                                  ",{}]]},"cursor":{"x":24}}],[0.227233,{"lines":{"22":[["scala> import collection.                                                                 ",{}]]},"cursor":{"x":25}}],[0.9010280000000001,{"lines":{"22":[["scala> import collection.J                                                                ",{}]]},"cursor":{"x":26}}],[0.215969,{"lines":{"22":[["scala> import collection.Ja                                                               ",{}]]},"cursor":{"x":27}}],[0.06506000000000001,{"lines":{"22":[["scala> import collection.Jav                                                              ",{}]]},"cursor":{"x":28}}],[0.103574,{"lines":{"22":[["scala> import collection.Java                                                             ",{}]]},"cursor":{"x":29}}],[0.279994,{"lines":{"22":[["scala> import collection.JavaC                                                            ",{}]]},"cursor":{"x":30}}],[0.104089,{"lines":{"22":[["scala> import collection.JavaCo                                                           ",{}]]},"cursor":{"x":31}}],[0.063538,{"lines":{"22":[["scala> import collection.JavaCon                                                          ",{}]]},"cursor":{"x":32}}],[0.30349,{"lines":{"22":[["scala> import collection.JavaConv                                                         ",{}]]},"cursor":{"x":33}}],[0.166839,{"lines":{"22":[["scala> import collection.JavaConve                                                        ",{}]]},"cursor":{"x":34}}],[0.058176,{"lines":{"22":[["scala> import collection.JavaConver                                                       ",{}]]},"cursor":{"x":35}}],[0.152184,{"lines":{"22":[["scala> import collection.JavaConvert                                                      ",{}]]},"cursor":{"x":36}}],[0.111913,{"lines":{"22":[["scala> import collection.JavaConverte                                                     ",{}]]},"cursor":{"x":37}}],[0.103709,{"lines":{"22":[["scala> import collection.JavaConverter                                                    ",{}]]},"cursor":{"x":38}}],[0.17625,{"lines":{"22":[["scala> import collection.JavaConverters                                                   ",{}]]},"cursor":{"x":39}}],[0.095933,{"lines":{"22":[["scala> import collection.JavaConverters.                                                  ",{}]]},"cursor":{"x":40}}],[0.374715,{"lines":{"22":[["scala> import collection.JavaConverters._                                                 ",{}]]},"cursor":{"x":41}}],[0.193486,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/data/",{}]],"2":[["graph.db/\")                                                                               ",{}]],"3":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"4":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [/Users/wfreeman/neo4j-",{}]],"5":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val tx = db.beginTx                                                                ",{}]],"8":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val charlize = db.getNode                                                          ",{}]],"11":[["getNodeById      getNodeManager                                                           ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"14":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"17":[["(\"ACTED_IN\"))                                                                             ",{}]],"18":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"19":[["ator@2f5f0fe4                                                                             ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> import collection.JavaConverters._                                                 ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.147437,{"lines":{"0":[["scala> val db = new EmbeddedGraphDatabase(\"/Users/wfreeman/neo4j-community-2.0.0-M06/data/",{}]],"1":[["graph.db/\")                                                                               ",{}]],"2":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"3":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [/Users/wfreeman/neo4j-",{}]],"4":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val tx = db.beginTx                                                                ",{}]],"7":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val charlize = db.getNode                                                          ",{}]],"10":[["getNodeById      getNodeManager                                                           ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"13":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"16":[["(\"ACTED_IN\"))                                                                             ",{}]],"17":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"18":[["ator@2f5f0fe4                                                                             ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> import collection.JavaConverters._                                                 ",{}]],"21":[["import collection.JavaConverters._                                                        ",{}]]}}],[4.2e-05,{"lines":{"0":[["graph.db/\")                                                                               ",{}]],"1":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"2":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [/Users/wfreeman/neo4j-",{}]],"3":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val tx = db.beginTx                                                                ",{}]],"6":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val charlize = db.getNode                                                          ",{}]],"9":[["getNodeById      getNodeManager                                                           ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"12":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"15":[["(\"ACTED_IN\"))                                                                             ",{}]],"16":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"17":[["ator@2f5f0fe4                                                                             ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> import collection.JavaConverters._                                                 ",{}]],"20":[["import collection.JavaConverters._                                                        ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[3.702317,{"lines":{"22":[["scala> i                                                                                  ",{}]]},"cursor":{"x":8}}],[0.108959,{"lines":{"22":[["scala> it                                                                                 ",{}]]},"cursor":{"x":9}}],[0.09586,{"lines":{"22":[["scala> it.                                                                                ",{}]]},"cursor":{"x":10}}],[0.225027,{"lines":{"22":[["scala> it.a                                                                               ",{}]]},"cursor":{"x":11}}],[0.119072,{"lines":{"22":[["scala> it.as                                                                              ",{}]]},"cursor":{"x":12}}],[0.247848,{"lines":{"22":[["scala> it.asS                                                                             ",{}]]},"cursor":{"x":13}}],[0.184447,{"lines":{"22":[["scala> it.asSc                                                                            ",{}]]},"cursor":{"x":14}}],[0.090763,{"lines":{"22":[["scala> it.asSca                                                                           ",{}]]},"cursor":{"x":15}}],[0.068902,{"lines":{"22":[["scala> it.asScal                                                                          ",{}]]},"cursor":{"x":16}}],[0.127976,{"lines":{"22":[["scala> it.asScala                                                                         ",{}]]},"cursor":{"x":17}}],[0.160006,{"lines":{"22":[["scala> it.asScala.                                                                        ",{}]]},"cursor":{"x":18}}],[1.589192,{"lines":{"22":[["scala> it.asScala.f                                                                       ",{}]]},"cursor":{"x":19}}],[0.07498100000000001,{"lines":{"22":[["scala> it.asScala.fo                                                                      ",{}]]},"cursor":{"x":20}}],[0.215701,{"lines":{"22":[["scala> it.asScala.foe                                                                     ",{}]]},"cursor":{"x":21}}],[0.344734,{"cursor":{"x":20}}],[0.000298,{"lines":{"22":[["scala> it.asScala.fo                                                                      ",{}]]}}],[0.07212300000000001,{"lines":{"22":[["scala> it.asScala.for                                                                     ",{}]]},"cursor":{"x":21}}],[0.056165,{"lines":{"22":[["scala> it.asScala.fore                                                                    ",{}]]},"cursor":{"x":22}}],[0.071154,{"lines":{"22":[["scala> it.asScala.forea                                                                   ",{}]]},"cursor":{"x":23}}],[0.095731,{"lines":{"22":[["scala> it.asScala.foreac                                                                  ",{}]]},"cursor":{"x":24}}],[0.106368,{"lines":{"22":[["scala> it.asScala.foreach                                                                 ",{}]]},"cursor":{"x":25}}],[0.366583,{"lines":{"22":[["scala> it.asScala.foreach(                                                                ",{}]]},"cursor":{"x":26}}],[1.274537,{"lines":{"22":[["scala> it.asScala.foreach(p                                                               ",{}]]},"cursor":{"x":27}}],[0.100993,{"lines":{"22":[["scala> it.asScala.foreach(pr                                                              ",{}]]},"cursor":{"x":28}}],[0.103246,{"lines":{"22":[["scala> it.asScala.foreach(pri                                                             ",{}]]},"cursor":{"x":29}}],[0.064639,{"lines":{"22":[["scala> it.asScala.foreach(prin                                                            ",{}]]},"cursor":{"x":30}}],[0.128449,{"lines":{"22":[["scala> it.asScala.foreach(print                                                           ",{}]]},"cursor":{"x":31}}],[0.06338000000000001,{"lines":{"22":[["scala> it.asScala.foreach(printl                                                          ",{}]]},"cursor":{"x":32}}],[0.048737,{"lines":{"22":[["scala> it.asScala.foreach(println                                                         ",{}]]},"cursor":{"x":33}}],[0.223849,{"lines":{"22":[["scala> it.asScala.foreach(println(                                                        ",{}]]},"cursor":{"x":34}}],[1.455319,{"lines":{"22":[["scala> it.asScala.foreach(println(_                                                       ",{}]]},"cursor":{"x":35}}],[0.168665,{"lines":{"22":[["scala> it.asScala.foreach(println(_)                                                      ",{}]]},"cursor":{"x":36}}],[0.111795,{"lines":{"22":[["scala> it.asScala.foreach(println(_))                                                     ",{}]]},"cursor":{"x":37}}],[0.30305,{"lines":{"0":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"1":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [/Users/wfreeman/neo4j-",{}]],"2":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> val tx = db.beginTx                                                                ",{}]],"5":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val charlize = db.getNode                                                          ",{}]],"8":[["getNodeById      getNodeManager                                                           ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"11":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"14":[["(\"ACTED_IN\"))                                                                             ",{}]],"15":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"16":[["ator@2f5f0fe4                                                                             ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> import collection.JavaConverters._                                                 ",{}]],"19":[["import collection.JavaConverters._                                                        ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[1.493885,{"lines":{"0":[["db: org.neo4j.kernel.EmbeddedGraphDatabase = EmbeddedGraphDatabase [/Users/wfreeman/neo4j-",{}]],"1":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val tx = db.beginTx                                                                ",{}]],"4":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val charlize = db.getNode                                                          ",{}]],"7":[["getNodeById      getNodeManager                                                           ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"10":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"13":[["(\"ACTED_IN\"))                                                                             ",{}]],"14":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"15":[["ator@2f5f0fe4                                                                             ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> import collection.JavaConverters._                                                 ",{}]],"18":[["import collection.JavaConverters._                                                        ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"21":[["Relationship[130]                                                                         ",{}]]}}],[0.000688,{"lines":{"0":[["community-2.0.0-M06/data/graph.db]                                                        ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val tx = db.beginTx                                                                ",{}]],"3":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val charlize = db.getNode                                                          ",{}]],"6":[["getNodeById      getNodeManager                                                           ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"9":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"12":[["(\"ACTED_IN\"))                                                                             ",{}]],"13":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"14":[["ator@2f5f0fe4                                                                             ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> import collection.JavaConverters._                                                 ",{}]],"17":[["import collection.JavaConverters._                                                        ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"20":[["Relationship[130]                                                                         ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[8.184218,{"lines":{"22":[["scala> /                                                                                  ",{}]]},"cursor":{"x":8}}],[0.130116,{"lines":{"22":[["scala> //                                                                                 ",{}]]},"cursor":{"x":9}}],[0.072074,{"cursor":{"x":10}}],[1.499973,{"lines":{"22":[["scala> // o                                                                               ",{}]]},"cursor":{"x":11}}],[0.058856,{"lines":{"22":[["scala> // on                                                                              ",{}]]},"cursor":{"x":12}}],[0.159958,{"lines":{"22":[["scala> // onl                                                                             ",{}]]},"cursor":{"x":13}}],[0.056154,{"lines":{"22":[["scala> // only                                                                            ",{}]]},"cursor":{"x":14}}],[0.07199800000000001,{"cursor":{"x":15}}],[0.175906,{"lines":{"22":[["scala> // only o                                                                          ",{}]]},"cursor":{"x":16}}],[0.056062,{"lines":{"22":[["scala> // only on                                                                         ",{}]]},"cursor":{"x":17}}],[0.119903,{"lines":{"22":[["scala> // only one                                                                        ",{}]]},"cursor":{"x":18}}],[0.072016,{"cursor":{"x":19}}],[0.144105,{"lines":{"22":[["scala> // only one r                                                                      ",{}]]},"cursor":{"x":20}}],[0.107209,{"lines":{"22":[["scala> // only one rl                                                                     ",{}]]},"cursor":{"x":21}}],[0.000143,{"lines":{"22":[["scala> // only one rle                                                                    ",{}]]},"cursor":{"x":22}}],[0.236541,{"lines":{"22":[["scala> // only one rlea                                                                   ",{}]]},"cursor":{"x":23}}],[0.104015,{"lines":{"22":[["scala> // only one rleat                                                                  ",{}]]},"cursor":{"x":24}}],[0.064025,{"lines":{"22":[["scala> // only one rleati                                                                 ",{}]]},"cursor":{"x":25}}],[0.039977,{"lines":{"22":[["scala> // only one rleatio                                                                ",{}]]},"cursor":{"x":26}}],[0.06403,{"lines":{"22":[["scala> // only one rleation                                                               ",{}]]},"cursor":{"x":27}}],[0.27211,{"cursor":{"x":26}}],[0.00021,{"lines":{"22":[["scala> // only one rleatio                                                                ",{}]]}}],[0.127744,{"cursor":{"x":25}}],[0.000192,{"lines":{"22":[["scala> // only one rleati                                                                 ",{}]]}}],[0.146382,{"cursor":{"x":24}}],[0.000157,{"lines":{"22":[["scala> // only one rleat                                                                  ",{}]]}}],[0.133291,{"cursor":{"x":23}}],[0.000142,{"lines":{"22":[["scala> // only one rlea                                                                   ",{}]]}}],[0.143847,{"cursor":{"x":22}}],[0.000189,{"lines":{"22":[["scala> // only one rle                                                                    ",{}]]}}],[0.143876,{"cursor":{"x":21}}],[0.000216,{"lines":{"22":[["scala> // only one rl                                                                     ",{}]]}}],[0.143682,{"cursor":{"x":20}}],[0.000177,{"lines":{"22":[["scala> // only one r                                                                      ",{}]]}}],[0.079856,{"lines":{"22":[["scala> // only one re                                                                     ",{}]]},"cursor":{"x":21}}],[0.11181,{"lines":{"22":[["scala> // only one rel                                                                    ",{}]]},"cursor":{"x":22}}],[0.096058,{"lines":{"22":[["scala> // only one rela                                                                   ",{}]]},"cursor":{"x":23}}],[0.048566,{"lines":{"22":[["scala> // only one relat                                                                  ",{}]]},"cursor":{"x":24}}],[0.0794,{"lines":{"22":[["scala> // only one relati                                                                 ",{}]]},"cursor":{"x":25}}],[0.068158,{"lines":{"22":[["scala> // only one relatio                                                                ",{}]]},"cursor":{"x":26}}],[0.043831,{"lines":{"22":[["scala> // only one relation                                                               ",{}]]},"cursor":{"x":27}}],[0.135996,{"lines":{"22":[["scala> // only one relations                                                              ",{}]]},"cursor":{"x":28}}],[0.06401,{"lines":{"22":[["scala> // only one relationsh                                                             ",{}]]},"cursor":{"x":29}}],[0.048048,{"lines":{"22":[["scala> // only one relationshi                                                            ",{}]]},"cursor":{"x":30}}],[0.031971,{"lines":{"22":[["scala> // only one relationship                                                           ",{}]]},"cursor":{"x":31}}],[0.096012,{"lines":{"22":[["scala> // only one relationships                                                          ",{}]]},"cursor":{"x":32}}],[0.473615,{"cursor":{"x":31}}],[0.000346,{"lines":{"22":[["scala> // only one relationship                                                           ",{}]]}}],[0.511145,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> val tx = db.beginTx                                                                ",{}]],"2":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> val charlize = db.getNode                                                          ",{}]],"5":[["getNodeById      getNodeManager                                                           ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"8":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"11":[["(\"ACTED_IN\"))                                                                             ",{}]],"12":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"13":[["ator@2f5f0fe4                                                                             ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> import collection.JavaConverters._                                                 ",{}]],"16":[["import collection.JavaConverters._                                                        ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"19":[["Relationship[130]                                                                         ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> // only one relationship                                                           ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.000955,{"lines":{"0":[["scala> val tx = db.beginTx                                                                ",{}]],"1":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val charlize = db.getNode                                                          ",{}]],"4":[["getNodeById      getNodeManager                                                           ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"7":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"10":[["(\"ACTED_IN\"))                                                                             ",{}]],"11":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"12":[["ator@2f5f0fe4                                                                             ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> import collection.JavaConverters._                                                 ",{}]],"15":[["import collection.JavaConverters._                                                        ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"18":[["Relationship[130]                                                                         ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> // only one relationship                                                           ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[5.586262,{"lines":{"22":[["scala> /                                                                                  ",{}]]},"cursor":{"x":8}}],[0.115579,{"lines":{"22":[["scala> //                                                                                 ",{}]]},"cursor":{"x":9}}],[0.111929,{"cursor":{"x":10}}],[0.144088,{"lines":{"22":[["scala> // l                                                                               ",{}]]},"cursor":{"x":11}}],[0.10392,{"lines":{"22":[["scala> // le                                                                              ",{}]]},"cursor":{"x":12}}],[0.079941,{"lines":{"22":[["scala> // let                                                                             ",{}]]},"cursor":{"x":13}}],[0.360019,{"lines":{"22":[["scala> // let'                                                                            ",{}]]},"cursor":{"x":14}}],[0.079986,{"lines":{"22":[["scala> // let's                                                                           ",{}]]},"cursor":{"x":15}}],[0.082802,{"cursor":{"x":16}}],[0.133219,{"lines":{"22":[["scala> // let's t                                                                         ",{}]]},"cursor":{"x":17}}],[0.167971,{"lines":{"22":[["scala> // let's tr                                                                        ",{}]]},"cursor":{"x":18}}],[0.088272,{"lines":{"22":[["scala> // let's try                                                                       ",{}]]},"cursor":{"x":19}}],[0.047733,{"cursor":{"x":20}}],[1.316166,{"lines":{"22":[["scala> // let's try r                                                                     ",{}]]},"cursor":{"x":21}}],[0.035789,{"lines":{"22":[["scala> // let's try re                                                                    ",{}]]},"cursor":{"x":22}}],[0.12795,{"lines":{"22":[["scala> // let's try rep                                                                   ",{}]]},"cursor":{"x":23}}],[0.192103,{"lines":{"22":[["scala> // let's try repe                                                                  ",{}]]},"cursor":{"x":24}}],[0.071963,{"lines":{"22":[["scala> // let's try repee                                                                 ",{}]]},"cursor":{"x":25}}],[0.159979,{"lines":{"22":[["scala> // let's try repeea                                                                ",{}]]},"cursor":{"x":26}}],[0.024088,{"lines":{"22":[["scala> // let's try repeeat                                                               ",{}]]},"cursor":{"x":27}}],[0.103958,{"lines":{"22":[["scala> // let's try repeeati                                                              ",{}]]},"cursor":{"x":28}}],[0.310539,{"cursor":{"x":27}}],[0.000266,{"lines":{"22":[["scala> // let's try repeeat                                                               ",{}]]}}],[0.114199,{"cursor":{"x":26}}],[0.000339,{"lines":{"22":[["scala> // let's try repeea                                                                ",{}]]}}],[0.144082,{"cursor":{"x":25}}],[0.000359,{"lines":{"22":[["scala> // let's try repee                                                                 ",{}]]}}],[0.14312,{"cursor":{"x":24}}],[0.000355,{"lines":{"22":[["scala> // let's try repe                                                                  ",{}]]}}],[0.143327,{"lines":{"22":[["scala> // let's try repea                                                                 ",{}]]},"cursor":{"x":25}}],[0.031995,{"lines":{"22":[["scala> // let's try repeat                                                                ",{}]]},"cursor":{"x":26}}],[0.096474,{"lines":{"22":[["scala> // let's try repeati                                                               ",{}]]},"cursor":{"x":27}}],[0.03169,{"lines":{"22":[["scala> // let's try repeatin                                                              ",{}]]},"cursor":{"x":28}}],[0.5495910000000001,{"lines":{"22":[["scala> // let's try repeating                                                             ",{}]]},"cursor":{"x":29}}],[0.042081,{"cursor":{"x":30}}],[0.264665,{"lines":{"22":[["scala> // let's try repeating t                                                           ",{}]]},"cursor":{"x":31}}],[0.135979,{"lines":{"22":[["scala> // let's try repeating th                                                          ",{}]]},"cursor":{"x":32}}],[0.06414499999999999,{"lines":{"22":[["scala> // let's try repeating the                                                         ",{}]]},"cursor":{"x":33}}],[0.104084,{"cursor":{"x":34}}],[0.287153,{"lines":{"22":[["scala> // let's try repeating the A                                                       ",{}]]},"cursor":{"x":35}}],[0.118464,{"lines":{"22":[["scala> // let's try repeating the AC                                                      ",{}]]},"cursor":{"x":36}}],[0.194318,{"lines":{"22":[["scala> // let's try repeating the ACT                                                     ",{}]]},"cursor":{"x":37}}],[0.079711,{"lines":{"22":[["scala> // let's try repeating the ACTE                                                    ",{}]]},"cursor":{"x":38}}],[0.176022,{"lines":{"22":[["scala> // let's try repeating the ACTED                                                   ",{}]]},"cursor":{"x":39}}],[0.231849,{"lines":{"22":[["scala> // let's try repeating the ACTED_                                                  ",{}]]},"cursor":{"x":40}}],[0.193323,{"lines":{"22":[["scala> // let's try repeating the ACTED_I                                                 ",{}]]},"cursor":{"x":41}}],[0.038063,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN                                                ",{}]]},"cursor":{"x":42}}],[0.117843,{"cursor":{"x":43}}],[0.458325,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN r                                              ",{}]]},"cursor":{"x":44}}],[0.048426,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN re                                             ",{}]]},"cursor":{"x":45}}],[0.056119,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN rel                                            ",{}]]},"cursor":{"x":46}}],[0.111541,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN rela                                           ",{}]]},"cursor":{"x":47}}],[0.031898,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relat                                          ",{}]]},"cursor":{"x":48}}],[0.079943,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relati                                         ",{}]]},"cursor":{"x":49}}],[0.088001,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relatip                                        ",{}]]},"cursor":{"x":50}}],[0.056688,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relatipn                                       ",{}]]},"cursor":{"x":51}}],[0.155329,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relatipns                                      ",{}]]},"cursor":{"x":52}}],[0.052044,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relatipnsh                                     ",{}]]},"cursor":{"x":53}}],[0.055957,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relatipnshi                                    ",{}]]},"cursor":{"x":54}}],[0.032366,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relatipnship                                   ",{}]]},"cursor":{"x":55}}],[0.143567,{"cursor":{"x":56}}],[0.304189,{"cursor":{"x":55}}],[0.000496,{}],[0.119906,{"cursor":{"x":54}}],[4.6e-05,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relatipnshi                                    ",{}]]}}],[0.143723,{"cursor":{"x":53}}],[0.000375,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relatipnsh                                     ",{}]]}}],[0.143924,{"cursor":{"x":52}}],[0.000211,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relatipns                                      ",{}]]}}],[0.148117,{"cursor":{"x":51}}],[0.000114,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relatipn                                       ",{}]]}}],[0.13182,{"cursor":{"x":50}}],[0.000352,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relatip                                        ",{}]]}}],[0.111622,{"cursor":{"x":49}}],[0.000289,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relati                                         ",{}]]}}],[0.335105,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relatio                                        ",{}]]},"cursor":{"x":50}}],[0.04752,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relation                                       ",{}]]},"cursor":{"x":51}}],[0.169088,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relations                                      ",{}]]},"cursor":{"x":52}}],[0.095774,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relationsh                                     ",{}]]},"cursor":{"x":53}}],[0.055856,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relationshi                                    ",{}]]},"cursor":{"x":54}}],[0.039354,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relationship                                   ",{}]]},"cursor":{"x":55}}],[0.222533,{"cursor":{"x":56}}],[0.09024799999999999,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relationship t                                 ",{}]]},"cursor":{"x":57}}],[0.13634,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relationship ty                                ",{}]]},"cursor":{"x":58}}],[0.015766,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]]},"cursor":{"x":59}}],[0.231701,{"lines":{"0":[["tx: org.neo4j.graphdb.Transaction = org.neo4j.kernel.TopLevelTransaction@3caf286e         ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val charlize = db.getNode                                                          ",{}]],"3":[["getNodeById      getNodeManager                                                           ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"6":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"9":[["(\"ACTED_IN\"))                                                                             ",{}]],"10":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"11":[["ator@2f5f0fe4                                                                             ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> import collection.JavaConverters._                                                 ",{}]],"14":[["import collection.JavaConverters._                                                        ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"17":[["Relationship[130]                                                                         ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> // only one relationship                                                           ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.000754,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> val charlize = db.getNode                                                          ",{}]],"2":[["getNodeById      getNodeManager                                                           ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"5":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"8":[["(\"ACTED_IN\"))                                                                             ",{}]],"9":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"10":[["ator@2f5f0fe4                                                                             ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> import collection.JavaConverters._                                                 ",{}]],"13":[["import collection.JavaConverters._                                                        ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"16":[["Relationship[130]                                                                         ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> // only one relationship                                                           ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.254218,{"lines":{"22":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]]},"cursor":{"x":59}}],[0.137466,{"cursor":{"x":10}}],[0.0007199999999999999,{"lines":{"22":[["scala> // only one relationship                                                           ",{}]]},"cursor":{"x":31}}],[0.14358,{"cursor":{"x":7}}],[0.000865,{"lines":{"22":[["scala> it.asScala.foreach(println(_))                                                     ",{}]]},"cursor":{"x":37}}],[0.119105,{"cursor":{"x":8}}],[0.000725,{"lines":{"22":[["scala> import collection.JavaConverters._                                                 ",{}]]},"cursor":{"x":41}}],[1.969107,{"cursor":{"x":7}}],[0.000297,{"lines":{"0":[["scala> val charlize = db.getNode                                                          ",{}]],"1":[["getNodeById      getNodeManager                                                           ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"4":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"7":[["(\"ACTED_IN\"))                                                                             ",{}]],"8":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"9":[["ator@2f5f0fe4                                                                             ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> import collection.JavaConverters._                                                 ",{}]],"12":[["import collection.JavaConverters._                                                        ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"15":[["Relationship[130]                                                                         ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> // only one relationship                                                           ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"22":[["(\"ACTED_IN\"))                                                                             ",{}]]},"cursor":{"x":13}}],[0.828331,{"cursor":{"x":12}}],[0.64185,{"lines":{"22":[["(\"ACTED_IN\").)                                                                            ",{}]]},"cursor":{"x":13}}],[0.038687,{"lines":{"22":[["(\"ACTED_IN\"). )                                                                           ",{}]]},"cursor":{"x":14}}],[1.092261,{"cursor":{"x":13}}],[0.000323,{"lines":{"22":[["(\"ACTED_IN\").)                                                                            ",{}]]}}],[0.11477,{"cursor":{"x":12}}],[0.00032,{"lines":{"22":[["(\"ACTED_IN\"))                                                                             ",{}]]}}],[0.423666,{"lines":{"22":[["(\"ACTED_IN\"),)                                                                            ",{}]]},"cursor":{"x":13}}],[0.06390800000000001,{"lines":{"22":[["(\"ACTED_IN\"), )                                                                           ",{}]]},"cursor":{"x":14}}],[0.352034,{"lines":{"22":[["(\"ACTED_IN\"), D)                                                                          ",{}]]},"cursor":{"x":15}}],[0.266389,{"lines":{"22":[["(\"ACTED_IN\"), Dy)                                                                         ",{}]]},"cursor":{"x":16}}],[0.173689,{"lines":{"22":[["(\"ACTED_IN\"), Dyn)                                                                        ",{}]]},"cursor":{"x":17}}],[0.095872,{"lines":{"22":[["(\"ACTED_IN\"), Dyna)                                                                       ",{}]]},"cursor":{"x":18}}],[0.08809400000000001,{"lines":{"22":[["(\"ACTED_IN\"), Dynam)                                                                      ",{}]]},"cursor":{"x":19}}],[0.063904,{"lines":{"22":[["(\"ACTED_IN\"), Dynami)                                                                     ",{}]]},"cursor":{"x":20}}],[0.080336,{"lines":{"22":[["(\"ACTED_IN\"), Dynamic)                                                                    ",{}]]},"cursor":{"x":21}}],[0.27215,{"lines":{"22":[["(\"ACTED_IN\"), DynamicR)                                                                   ",{}]]},"cursor":{"x":22}}],[0.200551,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRe)                                                                  ",{}]]},"cursor":{"x":23}}],[0.205549,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRel)                                                                 ",{}]]},"cursor":{"x":24}}],[0.130182,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRela)                                                                ",{}]]},"cursor":{"x":25}}],[0.112055,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelat)                                                               ",{}]]},"cursor":{"x":26}}],[0.048085,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelati)                                                              ",{}]]},"cursor":{"x":27}}],[0.047453,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelatio)                                                             ",{}]]},"cursor":{"x":28}}],[0.056948,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelation)                                                            ",{}]]},"cursor":{"x":29}}],[0.14347,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelations)                                                           ",{}]]},"cursor":{"x":30}}],[0.08045099999999999,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationsh)                                                          ",{}]]},"cursor":{"x":31}}],[0.007364,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshi)                                                         ",{}]]},"cursor":{"x":32}}],[0.064411,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationship)                                                        ",{}]]},"cursor":{"x":33}}],[0.304308,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipT)                                                       ",{}]]},"cursor":{"x":34}}],[0.1792,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipTy)                                                      ",{}]]},"cursor":{"x":35}}],[0.012963,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipTyp)                                                     ",{}]]},"cursor":{"x":36}}],[0.07949100000000001,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType)                                                    ",{}]]},"cursor":{"x":37}}],[0.624371,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.)                                                   ",{}]]},"cursor":{"x":38}}],[0.175683,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.w)                                                  ",{}]]},"cursor":{"x":39}}],[0.096163,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.wi)                                                 ",{}]]},"cursor":{"x":40}}],[0.132805,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.wit)                                                ",{}]]},"cursor":{"x":41}}],[0.035022,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.with)                                               ",{}]]},"cursor":{"x":42}}],[0.200236,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withN)                                              ",{}]]},"cursor":{"x":43}}],[0.296047,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withNm)                                             ",{}]]},"cursor":{"x":44}}],[0.319953,{"cursor":{"x":43}}],[0.000371,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withN)                                              ",{}]]}}],[0.079676,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withNa)                                             ",{}]]},"cursor":{"x":44}}],[0.11658,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withNam)                                            ",{}]]},"cursor":{"x":45}}],[0.083301,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withName)                                           ",{}]]},"cursor":{"x":46}}],[0.287359,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withName()                                          ",{}]]},"cursor":{"x":47}}],[0.239351,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\")                                         ",{}]]},"cursor":{"x":48}}],[0.493727,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"A)                                        ",{}]]},"cursor":{"x":49}}],[0.115735,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"AC)                                       ",{}]]},"cursor":{"x":50}}],[0.21573,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACT)                                      ",{}]]},"cursor":{"x":51}}],[0.07163799999999999,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTE)                                     ",{}]]},"cursor":{"x":52}}],[0.184447,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED)                                    ",{}]]},"cursor":{"x":53}}],[0.521774,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_)                                   ",{}]]},"cursor":{"x":54}}],[0.17452,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_I)                                  ",{}]]},"cursor":{"x":55}}],[0.015013,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN)                                 ",{}]]},"cursor":{"x":56}}],[0.184916,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\")                                ",{}]]},"cursor":{"x":57}}],[0.199367,{"lines":{"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]]},"cursor":{"x":58}}],[0.619455,{"lines":{"0":[["getNodeById      getNodeManager                                                           ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"3":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"6":[["(\"ACTED_IN\"))                                                                             ",{}]],"7":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"8":[["ator@2f5f0fe4                                                                             ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> import collection.JavaConverters._                                                 ",{}]],"11":[["import collection.JavaConverters._                                                        ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"14":[["Relationship[130]                                                                         ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> // only one relationship                                                           ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"21":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.235352,{"lines":{"0":[["scala> val charlize = db.getNodeById(9311)                                                ",{}]],"1":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"4":[["(\"ACTED_IN\"))                                                                             ",{}]],"5":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"6":[["ator@2f5f0fe4                                                                             ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> import collection.JavaConverters._                                                 ",{}]],"9":[["import collection.JavaConverters._                                                        ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"12":[["Relationship[130]                                                                         ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> // only one relationship                                                           ",{}]],"16":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"18":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"19":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]],"20":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"21":[["ator@3947ea7f                                                                             ",{}]]}}],[0.003553,{"lines":{"0":[["charlize: org.neo4j.graphdb.Node = Node[9311]                                             ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"3":[["(\"ACTED_IN\"))                                                                             ",{}]],"4":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"5":[["ator@2f5f0fe4                                                                             ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> import collection.JavaConverters._                                                 ",{}]],"8":[["import collection.JavaConverters._                                                        ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"11":[["Relationship[130]                                                                         ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> // only one relationship                                                           ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"18":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]],"19":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"20":[["ator@3947ea7f                                                                             ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.551997,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"2":[["(\"ACTED_IN\"))                                                                             ",{}]],"3":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"4":[["ator@2f5f0fe4                                                                             ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> import collection.JavaConverters._                                                 ",{}]],"7":[["import collection.JavaConverters._                                                        ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"10":[["Relationship[130]                                                                         ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> // only one relationship                                                           ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"17":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]],"18":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"19":[["ator@3947ea7f                                                                             ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"22":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]]},"cursor":{"x":59}}],[0.134432,{"cursor":{"x":7,"y":21}}],[0.000809,{"lines":{"21":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":59}}],[0.199064,{"cursor":{"x":10}}],[0.0006850000000000001,{"lines":{"21":[["scala> // only one relationship                                                           ",{}]]},"cursor":{"x":31}}],[0.157943,{"cursor":{"x":7}}],[0.000314,{"lines":{"21":[["scala> it.asScala.foreach(println(_))                                                     ",{}]]},"cursor":{"x":37}}],[0.153001,{"cursor":{"x":8}}],[0.0007750000000000001,{"lines":{"21":[["scala> import collection.JavaConverters._                                                 ",{}]]},"cursor":{"x":41}}],[0.798268,{"cursor":{"x":8}}],[0.00114,{"lines":{"21":[["scala> it.asScala.foreach(println(_))                                                     ",{}]]},"cursor":{"x":37}}],[1.190042,{"cursor":{"x":0,"y":22}}],[0.27165,{"lines":{"0":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"1":[["(\"ACTED_IN\"))                                                                             ",{}]],"2":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"3":[["ator@2f5f0fe4                                                                             ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> import collection.JavaConverters._                                                 ",{}]],"6":[["import collection.JavaConverters._                                                        ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"9":[["Relationship[130]                                                                         ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> // only one relationship                                                           ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"16":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]],"17":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"18":[["ator@3947ea7f                                                                             ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"21":[["Relationship[130]                                                                         ",{}]]}}],[0.000258,{"lines":{"0":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"1":[["ator@2f5f0fe4                                                                             ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> import collection.JavaConverters._                                                 ",{}]],"4":[["import collection.JavaConverters._                                                        ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"7":[["Relationship[130]                                                                         ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> // only one relationship                                                           ",{}]],"11":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"13":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"14":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]],"15":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"16":[["ator@3947ea7f                                                                             ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"19":[["Relationship[130]                                                                         ",{}]],"20":[["Relationship[130]                                                                         ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[2.04354,{"lines":{"22":[["scala> /                                                                                  ",{}]]},"cursor":{"x":8}}],[0.164615,{"lines":{"22":[["scala> //                                                                                 ",{}]]},"cursor":{"x":9}}],[0.088779,{"cursor":{"x":10}}],[0.295179,{"lines":{"22":[["scala> // n                                                                               ",{}]]},"cursor":{"x":11}}],[0.040163,{"lines":{"22":[["scala> // no                                                                              ",{}]]},"cursor":{"x":12}}],[0.119828,{"lines":{"22":[["scala> // now                                                                             ",{}]]},"cursor":{"x":13}}],[0.088919,{"cursor":{"x":14}}],[0.218316,{"lines":{"22":[["scala> // now i                                                                           ",{}]]},"cursor":{"x":15}}],[0.052815,{"lines":{"22":[["scala> // now it                                                                          ",{}]]},"cursor":{"x":16}}],[0.111975,{"cursor":{"x":17}}],[0.161168,{"lines":{"22":[["scala> // now it r                                                                        ",{}]]},"cursor":{"x":18}}],[0.063665,{"lines":{"22":[["scala> // now it re                                                                       ",{}]]},"cursor":{"x":19}}],[0.144554,{"lines":{"22":[["scala> // now it ret                                                                      ",{}]]},"cursor":{"x":20}}],[0.095222,{"lines":{"22":[["scala> // now it retu                                                                     ",{}]]},"cursor":{"x":21}}],[0.12022,{"lines":{"22":[["scala> // now it retur                                                                    ",{}]]},"cursor":{"x":22}}],[0.055317,{"lines":{"22":[["scala> // now it return                                                                   ",{}]]},"cursor":{"x":23}}],[0.160804,{"lines":{"22":[["scala> // now it returns                                                                  ",{}]]},"cursor":{"x":24}}],[0.027831,{"cursor":{"x":25}}],[0.775469,{"lines":{"22":[["scala> // now it returns t                                                                ",{}]]},"cursor":{"x":26}}],[0.075837,{"lines":{"22":[["scala> // now it returns tw                                                               ",{}]]},"cursor":{"x":27}}],[0.0482,{"lines":{"22":[["scala> // now it returns two                                                              ",{}]]},"cursor":{"x":28}}],[0.527725,{"lines":{"22":[["scala> // now it returns two.                                                             ",{}]]},"cursor":{"x":29}}],[0.151919,{"lines":{"22":[["scala> // now it returns two..                                                            ",{}]]},"cursor":{"x":30}}],[0.18409,{"cursor":{"x":31}}],[0.194813,{"lines":{"22":[["scala> // now it returns two.. o                                                          ",{}]]},"cursor":{"x":32}}],[0.021184,{"lines":{"22":[["scala> // now it returns two.. on                                                         ",{}]]},"cursor":{"x":33}}],[0.127925,{"lines":{"22":[["scala> // now it returns two.. one                                                        ",{}]]},"cursor":{"x":34}}],[0.104001,{"cursor":{"x":35}}],[0.096025,{"lines":{"22":[["scala> // now it returns two.. one f                                                      ",{}]]},"cursor":{"x":36}}],[0.095957,{"lines":{"22":[["scala> // now it returns two.. one fo                                                     ",{}]]},"cursor":{"x":37}}],[0.120224,{"lines":{"22":[["scala> // now it returns two.. one for                                                    ",{}]]},"cursor":{"x":38}}],[0.087906,{"cursor":{"x":39}}],[0.095849,{"lines":{"22":[["scala> // now it returns two.. one for e                                                  ",{}]]},"cursor":{"x":40}}],[0.096041,{"lines":{"22":[["scala> // now it returns two.. one for ea                                                 ",{}]]},"cursor":{"x":41}}],[0.08006000000000001,{"lines":{"22":[["scala> // now it returns two.. one for eac                                                ",{}]]},"cursor":{"x":42}}],[0.10828,{"lines":{"22":[["scala> // now it returns two.. one for each                                               ",{}]]},"cursor":{"x":43}}],[0.043768,{"cursor":{"x":44}}],[0.135864,{"lines":{"22":[["scala> // now it returns two.. one for each r                                             ",{}]]},"cursor":{"x":45}}],[0.071975,{"lines":{"22":[["scala> // now it returns two.. one for each re                                            ",{}]]},"cursor":{"x":46}}],[0.048065,{"lines":{"22":[["scala> // now it returns two.. one for each rel                                           ",{}]]},"cursor":{"x":47}}],[0.127962,{"lines":{"22":[["scala> // now it returns two.. one for each rela                                          ",{}]]},"cursor":{"x":48}}],[0.032106,{"lines":{"22":[["scala> // now it returns two.. one for each relat                                         ",{}]]},"cursor":{"x":49}}],[0.08801299999999999,{"lines":{"22":[["scala> // now it returns two.. one for each relati                                        ",{}]]},"cursor":{"x":50}}],[0.043309,{"lines":{"22":[["scala> // now it returns two.. one for each relatio                                       ",{}]]},"cursor":{"x":51}}],[0.052529,{"lines":{"22":[["scala> // now it returns two.. one for each relation                                      ",{}]]},"cursor":{"x":52}}],[0.14405,{"lines":{"22":[["scala> // now it returns two.. one for each relations                                     ",{}]]},"cursor":{"x":53}}],[0.07223,{"lines":{"22":[["scala> // now it returns two.. one for each relationsh                                    ",{}]]},"cursor":{"x":54}}],[0.081597,{"lines":{"22":[["scala> // now it returns two.. one for each relationshi                                   ",{}]]},"cursor":{"x":55}}],[0.006191,{"lines":{"22":[["scala> // now it returns two.. one for each relationship                                  ",{}]]},"cursor":{"x":56}}],[0.210649,{"cursor":{"x":57}}],[0.050725,{"lines":{"22":[["scala> // now it returns two.. one for each relationship t                                ",{}]]},"cursor":{"x":58}}],[0.106672,{"lines":{"22":[["scala> // now it returns two.. one for each relationship ty                               ",{}]]},"cursor":{"x":59}}],[0.044219,{"lines":{"22":[["scala> // now it returns two.. one for each relationship typ                              ",{}]]},"cursor":{"x":60}}],[0.06769799999999999,{"lines":{"22":[["scala> // now it returns two.. one for each relationship type                             ",{}]]},"cursor":{"x":61}}],[0.215895,{"lines":{"0":[["ator@2f5f0fe4                                                                             ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> import collection.JavaConverters._                                                 ",{}]],"3":[["import collection.JavaConverters._                                                        ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"6":[["Relationship[130]                                                                         ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> // only one relationship                                                           ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"13":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]],"14":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"15":[["ator@3947ea7f                                                                             ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"18":[["Relationship[130]                                                                         ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> // now it returns two.. one for each relationship type                             ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.000433,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> import collection.JavaConverters._                                                 ",{}]],"2":[["import collection.JavaConverters._                                                        ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"5":[["Relationship[130]                                                                         ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> // only one relationship                                                           ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"12":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]],"13":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"14":[["ator@3947ea7f                                                                             ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"17":[["Relationship[130]                                                                         ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> // now it returns two.. one for each relationship type                             ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[4.045778,{"lines":{"22":[["scala> /                                                                                  ",{}]]},"cursor":{"x":8}}],[0.139161,{"lines":{"22":[["scala> //                                                                                 ",{}]]},"cursor":{"x":9}}],[0.071904,{"cursor":{"x":10}}],[0.183304,{"lines":{"22":[["scala> // k                                                                               ",{}]]},"cursor":{"x":11}}],[0.184507,{"lines":{"22":[["scala> // ki                                                                              ",{}]]},"cursor":{"x":12}}],[0.031972,{"lines":{"22":[["scala> // kin                                                                             ",{}]]},"cursor":{"x":13}}],[0.072253,{"lines":{"22":[["scala> // kind                                                                            ",{}]]},"cursor":{"x":14}}],[0.078944,{"cursor":{"x":15}}],[0.048896,{"lines":{"22":[["scala> // kind o                                                                          ",{}]]},"cursor":{"x":16}}],[0.135508,{"lines":{"22":[["scala> // kind of                                                                         ",{}]]},"cursor":{"x":17}}],[0.031686,{"cursor":{"x":18}}],[0.177415,{"lines":{"22":[["scala> // kind of w                                                                       ",{}]]},"cursor":{"x":19}}],[0.223496,{"lines":{"22":[["scala> // kind of wi                                                                      ",{}]]},"cursor":{"x":20}}],[0.136124,{"lines":{"22":[["scala> // kind of wie                                                                     ",{}]]},"cursor":{"x":21}}],[0.335594,{"cursor":{"x":20}}],[0.000346,{"lines":{"22":[["scala> // kind of wi                                                                      ",{}]]}}],[0.120115,{"cursor":{"x":19}}],[0.0006489999999999999,{"lines":{"22":[["scala> // kind of w                                                                       ",{}]]}}],[0.166941,{"lines":{"22":[["scala> // kind of wi                                                                      ",{}]]},"cursor":{"x":20}}],[0.117871,{"lines":{"22":[["scala> // kind of wie                                                                     ",{}]]},"cursor":{"x":21}}],[0.249156,{"cursor":{"x":20}}],[0.000211,{"lines":{"22":[["scala> // kind of wi                                                                      ",{}]]}}],[0.1197,{"cursor":{"x":19}}],[0.000133,{"lines":{"22":[["scala> // kind of w                                                                       ",{}]]}}],[0.08082300000000001,{"lines":{"22":[["scala> // kind of we                                                                      ",{}]]},"cursor":{"x":20}}],[0.104372,{"lines":{"22":[["scala> // kind of wei                                                                     ",{}]]},"cursor":{"x":21}}],[0.158937,{"lines":{"22":[["scala> // kind of weir                                                                    ",{}]]},"cursor":{"x":22}}],[0.104719,{"lines":{"22":[["scala> // kind of weird                                                                   ",{}]]},"cursor":{"x":23}}],[0.229181,{"lines":{"22":[["scala> // kind of weird?                                                                  ",{}]]},"cursor":{"x":24}}],[0.6261100000000001,{"lines":{"0":[["scala> import collection.JavaConverters._                                                 ",{}]],"1":[["import collection.JavaConverters._                                                        ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"4":[["Relationship[130]                                                                         ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> // only one relationship                                                           ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"11":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]],"12":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"13":[["ator@3947ea7f                                                                             ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"16":[["Relationship[130]                                                                         ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> // now it returns two.. one for each relationship type                             ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> // kind of weird?                                                                  ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.00062,{"lines":{"0":[["import collection.JavaConverters._                                                        ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"3":[["Relationship[130]                                                                         ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> // only one relationship                                                           ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"10":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]],"11":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"12":[["ator@3947ea7f                                                                             ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"15":[["Relationship[130]                                                                         ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> // now it returns two.. one for each relationship type                             ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> // kind of weird?                                                                  ",{}]],"21":[["                                                                                          ",{}]],"22":[["scala>                                                                                    ",{}]]},"cursor":{"x":7}}],[1.046326,{"lines":{"22":[["scala> e                                                                                  ",{}]]},"cursor":{"x":8}}],[0.209389,{"lines":{"22":[["scala> ex                                                                                 ",{}]]},"cursor":{"x":9}}],[0.080119,{"lines":{"22":[["scala> exi                                                                                ",{}]]},"cursor":{"x":10}}],[0.095605,{"lines":{"22":[["scala> exit                                                                               ",{}]]},"cursor":{"x":11}}],[0.104347,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"2":[["Relationship[130]                                                                         ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> // only one relationship                                                           ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"9":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]],"10":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"11":[["ator@3947ea7f                                                                             ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"14":[["Relationship[130]                                                                         ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> // now it returns two.. one for each relationship type                             ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> // kind of weird?                                                                  ",{}]],"20":[["                                                                                          ",{}]],"21":[["scala> exit                                                                               ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.118747,{"lines":{"0":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"1":[["Relationship[130]                                                                         ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> // only one relationship                                                           ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"6":[["                                                                                          ",{}]],"7":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"8":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]],"9":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"10":[["ator@3947ea7f                                                                             ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"13":[["Relationship[130]                                                                         ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> // now it returns two.. one for each relationship type                             ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> // kind of weird?                                                                  ",{}]],"19":[["                                                                                          ",{}]],"20":[["scala> exit                                                                               ",{}]],"21":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]]}}],[2.014344,{"lines":{"0":[["Relationship[130]                                                                         ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> // only one relationship                                                           ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"5":[["                                                                                          ",{}]],"6":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"7":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]],"8":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"9":[["ator@3947ea7f                                                                             ",{}]],"10":[["                                                                                          ",{}]],"11":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"12":[["Relationship[130]                                                                         ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> // now it returns two.. one for each relationship type                             ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> // kind of weird?                                                                  ",{}]],"18":[["                                                                                          ",{}]],"19":[["scala> exit                                                                               ",{}]],"20":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"21":[["                                                                                          ",{}]]}}],[0.008208999999999999,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> // only one relationship                                                           ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"4":[["                                                                                          ",{}]],"5":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"6":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]],"7":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"8":[["ator@3947ea7f                                                                             ",{}]],"9":[["                                                                                          ",{}]],"10":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"11":[["Relationship[130]                                                                         ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> // now it returns two.. one for each relationship type                             ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> // kind of weird?                                                                  ",{}]],"17":[["                                                                                          ",{}]],"18":[["scala> exit                                                                               ",{}]],"19":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"20":[["                                                                                          ",{}]],"21":[["[",{}],["success",{"fg":2}],["] Total time: 213 s, completed Nov 13, 2013 10:22:38 PM                           ",{}]]}}],[0.438202,{"lines":{"22":[["bash-3.2$                                                                                 ",{}]]},"cursor":{"x":10}}],[0.475717,{"lines":{"22":[["bash-3.2$ e                                                                               ",{}]]},"cursor":{"x":11}}],[0.231745,{"lines":{"22":[["bash-3.2$ ex                                                                              ",{}]]},"cursor":{"x":12}}],[0.103937,{"lines":{"22":[["bash-3.2$ exi                                                                             ",{}]]},"cursor":{"x":13}}],[0.128069,{"lines":{"22":[["bash-3.2$ exit                                                                            ",{}]]},"cursor":{"x":14}}],[0.104088,{"lines":{"0":[["scala> // only one relationship                                                           ",{}]],"1":[["                                                                                          ",{}]],"2":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"3":[["                                                                                          ",{}]],"4":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"5":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]],"6":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"7":[["ator@3947ea7f                                                                             ",{}]],"8":[["                                                                                          ",{}]],"9":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"10":[["Relationship[130]                                                                         ",{}]],"12":[["                                                                                          ",{}]],"13":[["scala> // now it returns two.. one for each relationship type                             ",{}]],"14":[["                                                                                          ",{}]],"15":[["scala> // kind of weird?                                                                  ",{}]],"16":[["                                                                                          ",{}]],"17":[["scala> exit                                                                               ",{}]],"18":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"19":[["                                                                                          ",{}]],"20":[["[",{}],["success",{"fg":2}],["] Total time: 213 s, completed Nov 13, 2013 10:22:38 PM                           ",{}]],"21":[["bash-3.2$ exit                                                                            ",{}]],"22":[["                                                                                          ",{}]]},"cursor":{"x":0}}],[0.00026,{"lines":{"0":[["                                                                                          ",{}]],"1":[["scala> // let's try repeating the ACTED_IN relationship typ                               ",{}]],"2":[["                                                                                          ",{}]],"3":[["scala> val it = charlize.getRelationships(Direction.BOTH, DynamicRelationshipType.withName",{}]],"4":[["(\"ACTED_IN\"), DynamicRelationshipType.withName(\"ACTED_IN\"))                               ",{}]],"5":[["it: Iterable[org.neo4j.graphdb.Relationship] = org.neo4j.kernel.impl.core.RelationshipIter",{}]],"6":[["ator@3947ea7f                                                                             ",{}]],"7":[["                                                                                          ",{}]],"8":[["scala> it.asScala.foreach(println(_))                                                     ",{}]],"9":[["Relationship[130]                                                                         ",{}]],"11":[["                                                                                          ",{}]],"12":[["scala> // now it returns two.. one for each relationship type                             ",{}]],"13":[["                                                                                          ",{}]],"14":[["scala> // kind of weird?                                                                  ",{}]],"15":[["                                                                                          ",{}]],"16":[["scala> exit                                                                               ",{}]],"17":[["warning: there were 1 deprecation warning(s); re-run with -deprecation for details        ",{}]],"18":[["                                                                                          ",{}]],"19":[["[",{}],["success",{"fg":2}],["] Total time: 213 s, completed Nov 13, 2013 10:22:38 PM                           ",{}]],"20":[["bash-3.2$ exit                                                                            ",{}]],"21":[["exit                                                                                      ",{}]]}}]]